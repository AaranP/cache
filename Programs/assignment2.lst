680x0 MACRO ASSEMBLER   Version 5.00   (c) 1992-2005 Peter J. Fondse

Date: 16 Feb 2024      Time: 00:13:06          Source: C:\M68KV6.0 - 800BY480\PROGRAMS\ASSIGNMENT2.SRC

                       1          section   code
                       2   ; for initial stack use $08040000 if your system uses SRAM for main memory (top of 256kbyte SRAM space)
                       3   ; When your system is converted to use DRAM for main memory set this constant to $0C000000 (top of 64MByte DRAM space
                       4   
                       5   ;StackPointerVal     equ $08040000      when using sram
          0C00 0000    6   StackPointerVal     equ $0C000000      when using dram
                       7   
                       8   ; define RamVectorTable as $0803000 if your system uses SRAM for main memory
                       9   ; When your system is converted to use DRAM for main memory define RamVectorTable constant as $0B000000 (top of 64MByte DRAM space)
                      10   
                      11   ;RamVectorTable      equ $08030000      when using sram
          0B00 0000   12   RamVectorTable      equ $0B000000      when using dram
                      13   
                      14   
                      15   
                      16   ; CSTART.ASM  -  C startup-code for Debug Monitor
00000000              17                   align
                      18   
00000000              19                   org $00000000          ;start of rom based vector table, 68k hard wired to expect this at $0
                      20   
00000000  0C00 0000   21   InitialSP       dc.l StackPointerVal   ;initial supervisor state stack pointer(stack decrements first before being used)
00000004  0000 0400   22   InitialPC       dc.l start             ;address of 1st instruction of program after a reset
00000008  0000 0802   23   BusError        dc.l E_BErro           ;bus error - stop program
0000000C  0000 0814   24   AddressError    dc.l E_AErro           ;address error - stop program
00000010  0000 0826   25   IllegalInstr    dc.l E_IInst           ;illegal instruction - stop program
00000014  0000 0838   26   DividebyZero    dc.l E_DZero           ;divide by zero error - stop program
00000018  0000 084A   27   Check           dc.l E_Check           ;Check instruction - stop program
0000001C  0000 085C   28   TrapV           dc.l E_Trapv           ;Trapv instruction - stop program
00000020  0000 086E   29   Privilege       dc.l E_Priv            ;privilige violation - stop program
00000024  0000 0880   30   Trace           dc.l E_Trace           ;stop on trace
00000028  0000 0892   31   Line1010emul    dc.l E_1010            ;1010 instructions stop
0000002C  0000 08A4   32   Line1111emul    dc.l E_1111            ;1111 instructions stop
00000030  0000 08B6   33   Unassigned1     dc.l E_Unnas1           ;unassigned vector
00000034  0000 08B6   34   Unassigned2     dc.l E_Unnas2           ;unassigned vector
00000038  0000 08B6   35   Unassigned3     dc.l E_Unnas3           ;unassigned vector
0000003C  0000 08B6   36   Uninit_IRQ      dc.l E_UnitI           ;uninitialised interrupt
00000040  0000 08B6   37   Unassigned4     dc.l E_Unnas4           ;unassigned vector
00000044  0000 08B6   38   Unassigned5     dc.l E_Unnas5           ;unassigned vector
00000048  0000 08B6   39   Unassigned6     dc.l E_Unnas6           ;unassigned vector
0000004C  0000 08B6   40   Unassigned7     dc.l E_Unnas7           ;unassigned vector
00000050  0000 08B6   41   Unassigned8     dc.l E_Unnas8           ;unassigned vector
00000054  0000 08B6   42   Unassigned9     dc.l E_Unnas9           ;unassigned vector
00000058  0000 08B6   43   Unassigned10    dc.l E_Unnas10           ;unassigned vector
0000005C  0000 08B6   44   Unassigned11    dc.l E_Unnas11           ;unassigned vector
00000060  0000 08B6   45   SpuriousIRQ     dc.l E_Spuri           ;stop on spurious irq
                      46   *
                      47   *
00000064  0000 049A   48   Level1IRQ       dc.l Level1RamISR
00000068  0000 04AC   49   Level2IRQ       dc.l Level2RamISR
0000006C  0000 04BE   50   Level3IRQ       dc.l Level3RamISR
00000070  0000 04D0   51   Level4IRQ       dc.l Level4RamISR
00000074  0000 04E2   52   Level5IRQ       dc.l Level5RamISR
00000078  0000 05EC   53   Level6IRQ       dc.l Level6RamISR
0000007C  0000 05FE   54   Level7IRQ       dc.l Level7RamISR
                      55   *
                      56   *
00000080  0000 0610   57   Trap0           dc.l Trap0RamISR        ; User installed trap handler
00000084  0000 0622   58   Trap1           dc.l Trap1RamISR        ; User installed trap handler
00000088  0000 0634   59   Trap2           dc.l Trap2RamISR        ; User installed trap handler
0000008C  0000 0646   60   Trap3           dc.l Trap3RamISR        ; User installed trap handler
00000090  0000 0658   61   Trap4           dc.l Trap4RamISR        ; User installed trap handler
00000094  0000 066A   62   Trap5           dc.l Trap5RamISR        ; User installed trap handler
00000098  0000 067C   63   Trap6           dc.l Trap6RamISR        ; User installed trap handler
0000009C  0000 068E   64   Trap7           dc.l Trap7RamISR        ; User installed trap handler
000000A0  0000 06A0   65   Trap8           dc.l Trap8RamISR        ; User installed trap handler
000000A4  0000 06B2   66   Trap9           dc.l Trap9RamISR        ; User installed trap handler
000000A8  0000 06C4   67   Trap10          dc.l Trap10RamISR       ; User installed trap handler
000000AC  0000 06D6   68   Trap11          dc.l Trap11RamISR       ; User installed trap handler
000000B0  0000 06E8   69   Trap12          dc.l Trap12RamISR       ; User installed trap handler
000000B4  0000 06FA   70   Trap13          dc.l Trap13RamISR       ; User installed trap handler
000000B8  0000 070C   71   Trap14          dc.l Trap14RamISR       ; User installed trap handler
000000BC  0000 07FC   72   Trap15          dc.l Trap15RamISR       ; User installed trap handler
                      73   
                      74   *
                      75   * Other vectors 64-255 are users vectors for autovectored IO device (not implemented in TG68)
                      76   *
                      77   
00000400              78                   org       $00000400
                      79   
00000400  46FC 2700   80   start:          move.w     #$2700,SR             set interrupts to disable until later
                      81   
                      82   *************************************************************************************
                      83   ** add some 68000 instruction to read and write to memory, IO etc. This doesn't do anything
                      84   ** important, it just creates read and write bus cycles to specific addresses which
                      85   ** help with debugging hardware in Quartus simulations
                      86   **************************************************************************************
                      87   
                      88                   ; perform some dummy read/write of 32 bit values to memory to see waveforms during a simulation
                      89   
00000404  23FC 1122   90                   move.l     #$11223344,$08060000 write 32 bits, to memory
00000408  3344 0806 
0000040C  0000      
0000040E  2039 0806   91                   move.l     $08060000,d0         read 32 bits back
00000412  0000      
00000414  13FC 0000   92                   move.b     #$00,$00400000         write to the output ports
00000418  0040 0000 
0000041C  13FC 0000   93                   move.b     #$00,$00400002         write to the output ports
00000420  0040 0002 
00000424  13FC 0000   94                   move.b     #$00,$00400004         write to the output ports
00000428  0040 0004 
0000042C  13FC 0000   95                   move.b     #$00,$00400006         write to the output ports
00000430  0040 0006 
00000434  13FC 0000   96                   move.b     #$00,$00400008         write to the output ports
00000438  0040 0008 
0000043C  13FC 0000   97                   move.b     #$00,$00400010         write to the hex display ports
00000440  0040 0010 
00000444  13FC 0000   98                   move.b     #$00,$00400012         write to the hex display ports
00000448  0040 0012 
0000044C  13FC 0000   99                   move.b     #$00,$00400014         write to the hex display ports
00000450  0040 0014 
00000454  13FC 0000  100                   move.b     #0,$00400020         write to the LCD
00000458  0040 0020 
0000045C  13FC 0000  101                   move.b     #0,$00400022         write to the LCD
00000460  0040 0022 
00000464  13FC 0000  102                   move.b     #0,$00400030         write to the Timer1 Data
00000468  0040 0030 
0000046C  13FC 0000  103                   move.b     #0,$00400032         write to the Timer1 Control
00000470  0040 0032 
                     104   
                     105                   ; some important initialisation do not modify
00000474  23FC FFFF  106                   move.l    #-1,__ungetbuf  ; unget-buffer for keyboard input
00000478  FFFF 0B00 
0000047C  00C0      
0000047E  23FC 0000  107                   move.l    #0,__allocp     ; pointer to allocated memory for malloc-function
00000482  0000 0B00 
00000486  00C4      
00000488  23FC 0B00  108                   move.l    #heap,__heap    ; pointer to free memory
0000048C  05AA 0B00 
00000490  00C4      
                     109   
                     110   
00000492  4EB9 0000  111   mainloop        jsr       _main
00000496  2ACC      
00000498  60F8       112                   bra       mainloop
                     113   
                     114   *********************************************************************************************************
                     115   * Code to call Ram Based Interrupt handler and other exeception handler code
                     116   *********************************************************************************************************
0000049A  48E7 FFFE  117   Level1RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000049E  2079 0B00  118                   move.l    VL1IRQ,a0               get ram based address into a0
000004A2  0064      
000004A4  4E90       119                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004A6  4CDF 7FFF  120                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004AA  4E73       121                   rte
000004AC  48E7 FFFE  122   Level2RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004B0  2079 0B00  123                   move.l    VL2IRQ,a0               get ram based address into a0
000004B4  0068      
000004B6  4E90       124                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004B8  4CDF 7FFF  125                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004BC  4E73       126                   rte
000004BE  48E7 FFFE  127   Level3RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004C2  2079 0B00  128                   move.l    VL3IRQ,a0               get ram based address into a0
000004C6  006C      
000004C8  4E90       129                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004CA  4CDF 7FFF  130                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004CE  4E73       131                   rte
000004D0  48E7 FFFE  132   Level4RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004D4  2079 0B00  133                   move.l    VL4IRQ,a0               get ram based address into a0
000004D8  0070      
000004DA  4E90       134                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004DC  4CDF 7FFF  135                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004E0  4E73       136                   rte
                     137   
                     138   * Trace trap Handler
                     139   
                     140   Level5RamISR
                     141   *
                     142   **         Copy 68000 registers from debug monitor Variables,
                     143   *
                     144   *
000004E2  23FC 0000  145                   move.l    #1,_Trace              switch on Trace Mode
000004E6  0001 0B00 
000004EA  00D8      
000004EC  13FC 0000  146                   move.b    #$0,$0040000A          turn off a trace exception so we don't when generate a trace when disassembling instruction in the register dump (disassembling causes access to use program)
000004F0  0040 000A 
000004F4  33DF 0B00  147                   move.w    (sp)+,_SR              get at the users status register pointed to by stack pointer and copy
000004F8  012C      
000004FA  23DF 0B00  148                   move.l    (sp)+,_PC              get at the users program counter and copy
000004FE  0120      
                     149   *
00000500  23CF 0B00  150                   move.l    SP,_SSP                copy system stack pointer to debug monitor variable
00000504  0124      
00000506  23C0 0B00  151                   move.l    d0,_d0
0000050A  00E4      
0000050C  23C1 0B00  152                   move.l    d1,_d1
00000510  00E8      
00000512  23C2 0B00  153                   move.l    d2,_d2
00000516  00EC      
00000518  23C3 0B00  154                   move.l    d3,_d3
0000051C  00F0      
0000051E  23C4 0B00  155                   move.l    d4,_d4
00000522  00F4      
00000524  23C5 0B00  156                   move.l    d5,_d5
00000528  00F8      
0000052A  23C6 0B00  157                   move.l    d6,_d6
0000052E  00FC      
00000530  23C7 0B00  158                   move.l    d7,_d7
00000534  0100      
                     159   *
00000536  23C8 0B00  160                   move.l    a0,_a0
0000053A  0104      
0000053C  23C9 0B00  161                   move.l    a1,_a1
00000540  0108      
00000542  23CA 0B00  162                   move.l    a2,_a2
00000546  010C      
00000548  23CB 0B00  163                   move.l    a3,_a3
0000054C  0110      
0000054E  23CC 0B00  164                   move.l    a4,_a4
00000552  0114      
00000554  23CD 0B00  165                   move.l    a5,_a5
00000558  0118      
0000055A  23CE 0B00  166                   move.l    a6,_a6
0000055E  011C      
00000560  4E68       167                   move.l    usp,a0
00000562  23C8 0B00  168                   move.l    a0,_USP
00000566  0128      
                     169   *
00000568  2079 0B00  170                   move.l    VL5IRQ,a0              get ram based address into a0, trace exception for next instruction will be generated in Menu SPACE command
0000056C  0074      
0000056E  4E90       171                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     172   
                     173   ** After trace, reload 68000 registers with new values before continuing
                     174   
00000570  2039 0B00  175                   move.l   _d0,d0
00000574  00E4      
00000576  2239 0B00  176                   move.l   _d1,d1
0000057A  00E8      
0000057C  2439 0B00  177                   move.l   _d2,d2
00000580  00EC      
00000582  2639 0B00  178                   move.l   _d3,d3
00000586  00F0      
00000588  2839 0B00  179                   move.l   _d4,d4
0000058C  00F4      
0000058E  2A39 0B00  180                   move.l   _d5,d5
00000592  00F8      
00000594  2C39 0B00  181                   move.l   _d6,d6
00000598  00FC      
0000059A  2E39 0B00  182                   move.l   _d7,d7
0000059E  0100      
                     183   
000005A0  2079 0B00  184                   move.l   _USP,a0
000005A4  0128      
000005A6  4E60       185                   move.l   a0,USP                     load user stack pointer
000005A8  2079 0B00  186                   move.l   _a0,a0
000005AC  0104      
000005AE  2279 0B00  187                   move.l   _a1,a1
000005B2  0108      
000005B4  2479 0B00  188                   move.l   _a2,a2
000005B8  010C      
000005BA  2679 0B00  189                   move.l   _a3,a3
000005BE  0110      
000005C0  2879 0B00  190                   move.l   _a4,a4
000005C4  0114      
000005C6  2A79 0B00  191                   move.l   _a5,a5
000005CA  0118      
000005CC  2C79 0B00  192                   move.l   _a6,a6
000005D0  011C      
                     193   
000005D2  2E79 0B00  194                   move.l   _SSP,sp
000005D6  0124      
000005D8  2F39 0B00  195                   move.l   _PC,-(sp)
000005DC  0120      
000005DE  3F39 0B00  196                   move.w   _SR,-(sp)
000005E2  012C      
000005E4  11F8 0074  197                   move.b    $00000074,$0	          read trace exception vector after accessing disassembly to reset the trace request causes by disassembling program above
000005E8  0000      
000005EA  4E73       198                   rte
                     199   
                     200   * address trap handler
                     201   
000005EC  48E7 FFFE  202   Level6RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005F0  2079 0B00  203                   move.l    VL6IRQ,a0               get ram based address into a0
000005F4  0078      
000005F6  4E90       204                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000005F8  4CDF 7FFF  205                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005FC  4E73       206                   rte
                     207   
000005FE  48E7 FFFE  208   Level7RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000602  2079 0B00  209                   move.l    VL7IRQ,a0               get ram based address into a0
00000606  007C      
00000608  4E90       210                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000060A  4CDF 7FFF  211                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000060E  4E73       212                   rte
                     213   
                     214   
                     215   ********************************************************************************************************
                     216   * Ram based Trap handler and other exeception handler code
                     217   *********************************************************************************************************
                     218   
00000610  48E7 FFFE  219   Trap0RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000614  2079 0B00  220                   move.l    VTrap0,a0                get ram based address into a0
00000618  0080      
0000061A  4E90       221                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000061C  4CDF 7FFF  222                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000620  4E73       223                   rte
                     224   
00000622  48E7 FFFE  225   Trap1RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000626  2079 0B00  226                   move.l    VTrap1,a0                get ram based address into a0
0000062A  0084      
0000062C  4E90       227                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000062E  4CDF 7FFF  228                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000632  4E73       229                   rte
                     230   
00000634  48E7 FFFE  231   Trap2RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000638  2079 0B00  232                   move.l    VTrap2,a0                get ram based address into a0
0000063C  0088      
0000063E  4E90       233                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000640  4CDF 7FFF  234                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000644  4E73       235                   rte
                     236   
00000646  48E7 FFFE  237   Trap3RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000064A  2079 0B00  238                   move.l    VTrap3,a0                get ram based address into a0
0000064E  008C      
00000650  4E90       239                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000652  4CDF 7FFF  240                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000656  4E73       241                   rte
                     242   
00000658  48E7 FFFE  243   Trap4RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000065C  2079 0B00  244                   move.l    VTrap4,a0                get ram based address into a0
00000660  0090      
00000662  4E90       245                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000664  4CDF 7FFF  246                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000668  4E73       247                   rte
                     248   
0000066A  48E7 FFFE  249   Trap5RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000066E  2079 0B00  250                   move.l    VTrap5,a0                get ram based address into a0
00000672  0094      
00000674  4E90       251                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000676  4CDF 7FFF  252                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000067A  4E73       253                   rte
                     254   
0000067C  48E7 FFFE  255   Trap6RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000680  2079 0B00  256                   move.l    VTrap6,a0                get ram based address into a0
00000684  0098      
00000686  4E90       257                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000688  4CDF 7FFF  258                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000068C  4E73       259                   rte
                     260   
0000068E  48E7 FFFE  261   Trap7RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000692  2079 0B00  262                   move.l    VTrap7,a0                get ram based address into a0
00000696  009C      
00000698  4E90       263                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000069A  4CDF 7FFF  264                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000069E  4E73       265                   rte
                     266   
000006A0  48E7 FFFE  267   Trap8RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006A4  2079 0B00  268                   move.l    VTrap8,a0                get ram based address into a0
000006A8  00A0      
000006AA  4E90       269                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006AC  4CDF 7FFF  270                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006B0  4E73       271                   rte
                     272   
000006B2  48E7 FFFE  273   Trap9RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006B6  2079 0B00  274                   move.l    VTrap9,a0                get ram based address into a0
000006BA  00A4      
000006BC  4E90       275                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006BE  4CDF 7FFF  276                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006C2  4E73       277                   rte
                     278   
000006C4  48E7 FFFE  279   Trap10RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006C8  2079 0B00  280                   move.l    VTrap10,a0                get ram based address into a0
000006CC  00A8      
000006CE  4E90       281                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006D0  4CDF 7FFF  282                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006D4  4E73       283                   rte
                     284   
000006D6  48E7 FFFE  285   Trap11RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006DA  2079 0B00  286                   move.l    VTrap11,a0                get ram based address into a0
000006DE  00AC      
000006E0  4E90       287                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006E2  4CDF 7FFF  288                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006E6  4E73       289                   rte
                     290   
000006E8  48E7 FFFE  291   Trap12RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006EC  2079 0B00  292                   move.l    VTrap12,a0                get ram based address into a0
000006F0  00B0      
000006F2  4E90       293                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006F4  4CDF 7FFF  294                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006F8  4E73       295                   rte
                     296   
000006FA  48E7 FFFE  297   Trap13RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006FE  2079 0B00  298                   move.l    VTrap13,a0                get ram based address into a0
00000702  00B4      
00000704  4E90       299                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000706  4CDF 7FFF  300                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000070A  4E73       301                   rte
                     302   
                     303   Trap14RamISR    ;Break Point Handler
                     304   *
                     305   **         Copy 68000 registers from debug monitor Variables
                     306   *
0000070C  23FC 0000  307                   move.l    #1,_Trace      switch on Trace Mode
00000710  0001 0B00 
00000714  00D8      
00000716  33DF 0B00  308                   move.w    (sp)+,_SR       get at the users status register pointed to by stack pointer and copy
0000071A  012C      
0000071C  23DF 0B00  309                   move.l    (sp)+,_PC      get at the users program counter and copy
00000720  0120      
                     310   *
00000722  23C0 0B00  311                   move.l    d0,_d0
00000726  00E4      
00000728  23C1 0B00  312                   move.l    d1,_d1
0000072C  00E8      
0000072E  23C2 0B00  313                   move.l    d2,_d2
00000732  00EC      
00000734  23C3 0B00  314                   move.l    d3,_d3
00000738  00F0      
0000073A  23C4 0B00  315                   move.l    d4,_d4
0000073E  00F4      
00000740  23C5 0B00  316                   move.l    d5,_d5
00000744  00F8      
00000746  23C6 0B00  317                   move.l    d6,_d6
0000074A  00FC      
0000074C  23C7 0B00  318                   move.l    d7,_d7
00000750  0100      
                     319   *
00000752  23C8 0B00  320                   move.l    a0,_a0
00000756  0104      
00000758  23C9 0B00  321                   move.l    a1,_a1
0000075C  0108      
0000075E  23CA 0B00  322                   move.l    a2,_a2
00000762  010C      
00000764  23CB 0B00  323                   move.l    a3,_a3
00000768  0110      
0000076A  23CC 0B00  324                   move.l    a4,_a4
0000076E  0114      
00000770  23CD 0B00  325                   move.l    a5,_a5
00000774  0118      
00000776  23CE 0B00  326                   move.l    a6,_a6
0000077A  011C      
0000077C  4E68       327                   move.l    USP,a0
0000077E  23C8 0B00  328                   move.l    a0,_USP
00000782  0128      
                     329   *
00000784  2079 0B00  330                   move.l    VTrap14,a0             get ram based address into a0
00000788  00B8      
0000078A  4E90       331                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     332   
                     333   ** After breakpoint reload 68000 registers with new values before continuing
                     334   
                     335   *                move.b    #$ff,$0040000A     generate a trace exception for the next instruction
0000078C  2039 0B00  336                   move.l   _d0,d0
00000790  00E4      
00000792  2239 0B00  337                   move.l   _d1,d1
00000796  00E8      
00000798  2439 0B00  338                   move.l   _d2,d2
0000079C  00EC      
0000079E  2639 0B00  339                   move.l   _d3,d3
000007A2  00F0      
000007A4  2839 0B00  340                   move.l   _d4,d4
000007A8  00F4      
000007AA  2A39 0B00  341                   move.l   _d5,d5
000007AE  00F8      
000007B0  2C39 0B00  342                   move.l   _d6,d6
000007B4  00FC      
000007B6  2E39 0B00  343                   move.l   _d7,d7
000007BA  0100      
                     344   
000007BC  2079 0B00  345                   move.l   _USP,a0
000007C0  0128      
000007C2  4E60       346                   move.l   a0,USP        load user stack pointer A7
000007C4  2079 0B00  347                   move.l   _a0,a0
000007C8  0104      
000007CA  2279 0B00  348                   move.l   _a1,a1
000007CE  0108      
000007D0  2479 0B00  349                   move.l   _a2,a2
000007D4  010C      
000007D6  2679 0B00  350                   move.l   _a3,a3
000007DA  0110      
000007DC  2879 0B00  351                   move.l   _a4,a4
000007E0  0114      
000007E2  2A79 0B00  352                   move.l   _a5,a5
000007E6  0118      
000007E8  2C79 0B00  353                   move.l   _a6,a6
000007EC  011C      
                     354   
000007EE  2F39 0B00  355                   move.l   _PC,-(sp)
000007F2  0120      
000007F4  3F39 0B00  356                   move.w   _SR,-(sp)
000007F8  012C      
000007FA  4E73       357                   rte
                     358   
000007FC  4EF9 0000  359   Trap15RamISR    jmp     _CallDebugMonitor
00000800  226E      
                     360   *                movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                     361   *                move.l    VTrap15,a0                get ram based address into a0
                     362   *                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                     363   *                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                     364   *                rte
                     365   
                     366   *********************************************************************************************************
                     367   *Default exception handler for everything without a specific handler
                     368   *********************************************************************************************************
                     369   
                     370   *
                     371   **              Jump here for each unhandled exception
                     372   **              If you need to, MAKE SURE YOU SAVE ALL IMPORTANT REGISTERS AND RESTORE THEM BEFORE RETURNING (IF APPROPRIATE)
                     373   *
                     374   
00000802  48E7 FFFE  375   E_BErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000806  2079 0B00  376                   move.l    VBusError,a0            get ram based address into a0
0000080A  0008      
0000080C  4E90       377                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000080E  4CDF 7FFF  378                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000812  4E73       379                   rte
00000814  48E7 FFFE  380   E_AErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000818  2079 0B00  381                   move.l    VAddressError,a0        get ram based address into a0
0000081C  000C      
0000081E  4E90       382                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000820  4CDF 7FFF  383                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000824  4E73       384                   rte
00000826  48E7 FFFE  385   E_IInst         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000082A  2079 0B00  386                   move.l    VIllegalInstr,a0        get ram based address into a0
0000082E  0010      
00000830  4E90       387                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000832  4CDF 7FFF  388                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000836  4E73       389                   rte
00000838  48E7 FFFE  390   E_DZero         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000083C  2079 0B00  391                   move.l    VDividebyZero,a0        get ram based address into a0
00000840  0014      
00000842  4E90       392                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000844  4CDF 7FFF  393                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000848  4E73       394                   rte
0000084A  48E7 FFFE  395   E_Check         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000084E  2079 0B00  396                   move.l    VCheck,a0               get ram based address into a0
00000852  0018      
00000854  4E90       397                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000856  4CDF 7FFF  398                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000085A  4E73       399                   rte
0000085C  48E7 FFFE  400   E_Trapv         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000860  2079 0B00  401                   move.l    VTrapV,a0               get ram based address into a0
00000864  001C      
00000866  4E90       402                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000868  4CDF 7FFF  403                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000086C  4E73       404                   rte
0000086E  48E7 FFFE  405   E_Priv          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000872  2079 0B00  406                   move.l    VPrivilege,a0           get ram based address into a0
00000876  0020      
00000878  4E90       407                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000087A  4CDF 7FFF  408                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000087E  4E73       409                   rte
00000880  48E7 FFFE  410   E_Trace         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000884  2079 0B00  411                   move.l    VTrace,a0               get ram based address into a0
00000888  0024      
0000088A  4E90       412                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000088C  4CDF 7FFF  413                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000890  4E73       414                   rte
00000892  48E7 FFFE  415   E_1010          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000896  2079 0B00  416                   move.l    VLine1010emul,a0        get ram based address into a0
0000089A  0028      
0000089C  4E90       417                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000089E  4CDF 7FFF  418                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008A2  4E73       419                   rte
000008A4  48E7 FFFE  420   E_1111          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000008A8  2079 0B00  421                   move.l    VLine1111emul,a0        get ram based address into a0
000008AC  002C      
000008AE  4E90       422                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000008B0  4CDF 7FFF  423                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008B4  4E73       424                   rte
                     425   E_Unnas1
                     426   E_Unnas2
                     427   E_Unnas3
                     428   E_UnitI
                     429   E_Unnas4
                     430   E_Unnas5
                     431   E_Unnas6
                     432   E_Unnas7
                     433   E_Unnas8
                     434   E_Unnas9
                     435   E_Unnas10
                     436   E_Unnas11
                     437   E_Spuri
000008B6  60FE       438   _stop            bra _stop                         stop
                     439   ***************************************************************************************************
                     440   * Go() function in debug monitor
                     441   ***************************************************************************************************
                     442   _go
000008B8  2E79 0B00  443                   move.l   _SSP,a7        load system stack pointer (remember we are in supervisor mode when running this so a7 is the System stack pointer)
000008BC  0124      
000008BE  2F39 0B00  444                   move.l   _PC,-(sp)      copy debug monitor PC variable to the stack
000008C2  0120      
000008C4  3F39 0B00  445                   move.w   _SR,-(sp)      copy debug monitor status reg to the stack
000008C8  012C      
                     446   
000008CA  1038 0078  447                   move.b   $00000078,d0  remove any spurious address exception arising after power on
000008CE  2039 0B00  448                   move.l   _d0,d0
000008D2  00E4      
000008D4  2239 0B00  449                   move.l   _d1,d1
000008D8  00E8      
000008DA  2439 0B00  450                   move.l   _d2,d2
000008DE  00EC      
000008E0  2639 0B00  451                   move.l   _d3,d3
000008E4  00F0      
000008E6  2839 0B00  452                   move.l   _d4,d4
000008EA  00F4      
000008EC  2A39 0B00  453                   move.l   _d5,d5
000008F0  00F8      
000008F2  2C39 0B00  454                   move.l   _d6,d6
000008F6  00FC      
000008F8  2E39 0B00  455                   move.l   _d7,d7
000008FC  0100      
                     456   
000008FE  2079 0B00  457                   move.l   _USP,a0
00000902  0128      
00000904  4E60       458                   move.l   a0,USP        load user stack pointer (remember we are in supervisor mode when running this, so a7 is the System stack pointer)
00000906  2079 0B00  459                   move.l   _a0,a0
0000090A  0104      
0000090C  2279 0B00  460                   move.l   _a1,a1
00000910  0108      
00000912  2479 0B00  461                   move.l   _a2,a2
00000916  010C      
00000918  2679 0B00  462                   move.l   _a3,a3
0000091C  0110      
0000091E  2879 0B00  463                   move.l   _a4,a4
00000922  0114      
00000924  2A79 0B00  464                   move.l   _a5,a5
00000928  0118      
0000092A  2C79 0B00  465                   move.l   _a6,a6
0000092E  011C      
00000930  4E73       466                   rte                    load the status reg and PC from the stack and commence running
                     467                                          *used to be rte but this didn't load the status byte
                     468   
                     469   ; C:\M68KV6.0 - 800BY480\PROGRAMS\DEBUGMONITORCODE\M68KDEBUG.C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                     470   ; #include "DebugMonitor.h"
                     471   ; // use 08030000 for a system running from sram or 0B000000 for system running from dram
                     472   ; //#define StartOfExceptionVectorTable 0x08030000
                     473   ; #define StartOfExceptionVectorTable 0x0B000000
                     474   ; // use 0C000000 for dram or hex 08040000 for sram
                     475   ; //#define TopOfStack 0x08040000
                     476   ; #define TopOfStack 0x0C000000
                     477   ; /* DO NOT INITIALISE GLOBAL VARIABLES - DO IT in MAIN() */
                     478   ; unsigned int i, x, y, z, PortA_Count;
                     479   ; int     Trace, GoFlag, Echo;                       // used in tracing/single stepping
                     480   ; // 68000 register dump and preintialise value (these can be changed by the user program when it is running, e.g. stack pointer, registers etc
                     481   ; unsigned int d0,d1,d2,d3,d4,d5,d6,d7 ;
                     482   ; unsigned int a0,a1,a2,a3,a4,a5,a6 ;
                     483   ; unsigned int PC, SSP, USP ;
                     484   ; unsigned short int SR;
                     485   ; // Breakpoint variables
                     486   ; unsigned int BreakPointAddress[8];                      //array of 8 breakpoint addresses
                     487   ; unsigned short int BreakPointInstruction[8] ;           // to hold the instruction opcode at the breakpoint
                     488   ; unsigned int BreakPointSetOrCleared[8] ;
                     489   ; unsigned int InstructionSize ;
                     490   ; // watchpoint variables
                     491   ; unsigned int WatchPointAddress[8];                      //array of 8 breakpoint addresses
                     492   ; unsigned int WatchPointSetOrCleared[8] ;
                     493   ; char WatchPointString[8][100] ;
                     494   ; // for disassembly of program
                     495   ; char    Instruction[100] ;
                     496   ; char    TempString[100] ;
                     497   ; /************************************************************************************
                     498   ; *Subroutine to give the 68000 something useless to do to waste 1 mSec
                     499   ; ************************************************************************************/
                     500   ; void Wait1ms(void)
                     501   ; {
                     502   _Wait1ms:
00000932  2F02       503          move.l    D2,-(A7)
                     504   ; long int  i ;
                     505   ; for(i = 0; i < 1000; i ++)
00000934  4282       506          clr.l     D2
                     507   Wait1ms_1:
00000936  0C82 0000  508          cmp.l     #1000,D2
0000093A  03E8      
0000093C  6C04       509          bge.s     Wait1ms_3
0000093E  5282       510          addq.l    #1,D2
00000940  60F4       511          bra       Wait1ms_1
                     512   Wait1ms_3:
00000942  241F       513          move.l    (A7)+,D2
00000944  4E75       514          rts
                     515   ; ;
                     516   ; }
                     517   ; /************************************************************************************
                     518   ; *Subroutine to give the 68000 something useless to do to waste 3 mSec
                     519   ; **************************************************************************************/
                     520   ; void Wait3ms(void)
                     521   ; {
                     522   _Wait3ms:
00000946  2F02       523          move.l    D2,-(A7)
                     524   ; int i ;
                     525   ; for(i = 0; i < 3; i++)
00000948  4282       526          clr.l     D2
                     527   Wait3ms_1:
0000094A  0C82 0000  528          cmp.l     #3,D2
0000094E  0003      
00000950  6C08       529          bge.s     Wait3ms_3
                     530   ; Wait1ms() ;
00000952  4EB8 0932  531          jsr       _Wait1ms
00000956  5282       532          addq.l    #1,D2
00000958  60F0       533          bra       Wait3ms_1
                     534   Wait3ms_3:
0000095A  241F       535          move.l    (A7)+,D2
0000095C  4E75       536          rts
                     537   ; }
                     538   ; /*********************************************************************************************
                     539   ; *Subroutine to initialise the display by writing some commands to the LCD internal registers
                     540   ; *********************************************************************************************/
                     541   ; void Init_LCD(void)
                     542   ; {
                     543   _Init_LCD:
                     544   ; LCDcommand = (char)(0x0c) ;
0000095E  13FC 000C  545          move.b    #12,4194336
00000962  0040 0020 
                     546   ; Wait3ms() ;
00000966  4EB8 0946  547          jsr       _Wait3ms
                     548   ; LCDcommand = (char)(0x38) ;
0000096A  13FC 0038  549          move.b    #56,4194336
0000096E  0040 0020 
                     550   ; Wait3ms() ;
00000972  4EB8 0946  551          jsr       _Wait3ms
00000976  4E75       552          rts
                     553   ; }
                     554   ; /******************************************************************************
                     555   ; *subroutine to output a single character held in d1 to the LCD display
                     556   ; *it is assumed the character is an ASCII code and it will be displayed at the
                     557   ; *current cursor position
                     558   ; *******************************************************************************/
                     559   ; void Outchar(int c)
                     560   ; {
                     561   _Outchar:
00000978  4E56 0000  562          link      A6,#0
                     563   ; LCDdata = (char)(c);
0000097C  202E 0008  564          move.l    8(A6),D0
00000980  13C0 0040  565          move.b    D0,4194338
00000984  0022      
                     566   ; Wait1ms() ;
00000986  4EB8 0932  567          jsr       _Wait1ms
0000098A  4E5E       568          unlk      A6
0000098C  4E75       569          rts
                     570   ; }
                     571   ; /**********************************************************************************
                     572   ; *subroutine to output a message at the current cursor position of the LCD display
                     573   ; ************************************************************************************/
                     574   ; void OutMess(char *theMessage)
                     575   ; {
                     576   _OutMess:
0000098E  4E56 FFFC  577          link      A6,#-4
                     578   ; char c ;
                     579   ; while((c = *theMessage++) != (char)(0))
                     580   OutMess_1:
00000992  206E 0008  581          move.l    8(A6),A0
00000996  52AE 0008  582          addq.l    #1,8(A6)
0000099A  1D50 FFFF  583          move.b    (A0),-1(A6)
0000099E  1010       584          move.b    (A0),D0
000009A0  6712       585          beq.s     OutMess_3
                     586   ; Outchar(c) ;
000009A2  122E FFFF  587          move.b    -1(A6),D1
000009A6  4881       588          ext.w     D1
000009A8  48C1       589          ext.l     D1
000009AA  2F01       590          move.l    D1,-(A7)
000009AC  4EB8 0978  591          jsr       _Outchar
000009B0  584F       592          addq.w    #4,A7
000009B2  60DE       593          bra       OutMess_1
                     594   OutMess_3:
000009B4  4E5E       595          unlk      A6
000009B6  4E75       596          rts
                     597   ; }
                     598   ; /******************************************************************************
                     599   ; *subroutine to clear the line by issuing 24 space characters
                     600   ; *******************************************************************************/
                     601   ; void Clearln(void)
                     602   ; {
                     603   _Clearln:
000009B8  2F02       604          move.l    D2,-(A7)
                     605   ; unsigned char i ;
                     606   ; for(i = 0; i < 24; i ++)
000009BA  4202       607          clr.b     D2
                     608   Clearln_1:
000009BC  0C02 0018  609          cmp.b     #24,D2
000009C0  640E       610          bhs.s     Clearln_3
                     611   ; Outchar(' ') ;  /* write a space char to the LCD display */
000009C2  4878 0020  612          pea       32
000009C6  4EB8 0978  613          jsr       _Outchar
000009CA  584F       614          addq.w    #4,A7
000009CC  5202       615          addq.b    #1,D2
000009CE  60EC       616          bra       Clearln_1
                     617   Clearln_3:
000009D0  241F       618          move.l    (A7)+,D2
000009D2  4E75       619          rts
                     620   ; }
                     621   ; /******************************************************************************
                     622   ; *subroutine to move the cursor to the start of line 1 and clear that line
                     623   ; *******************************************************************************/
                     624   ; void Oline0(char *theMessage)
                     625   ; {
                     626   _Oline0:
000009D4  4E56 0000  627          link      A6,#0
                     628   ; LCDcommand = (char)(0x80) ;
000009D8  13FC 0080  629          move.b    #128,4194336
000009DC  0040 0020 
                     630   ; Wait3ms();
000009E0  4EB8 0946  631          jsr       _Wait3ms
                     632   ; Clearln() ;
000009E4  4EB8 09B8  633          jsr       _Clearln
                     634   ; LCDcommand = (char)(0x80) ;
000009E8  13FC 0080  635          move.b    #128,4194336
000009EC  0040 0020 
                     636   ; Wait3ms() ;
000009F0  4EB8 0946  637          jsr       _Wait3ms
                     638   ; OutMess(theMessage) ;
000009F4  2F2E 0008  639          move.l    8(A6),-(A7)
000009F8  4EB8 098E  640          jsr       _OutMess
000009FC  584F       641          addq.w    #4,A7
000009FE  4E5E       642          unlk      A6
00000A00  4E75       643          rts
                     644   ; }
                     645   ; /******************************************************************************
                     646   ; *subroutine to move the cursor to the start of line 2 and clear that line
                     647   ; *******************************************************************************/
                     648   ; void Oline1(char *theMessage)
                     649   ; {
                     650   _Oline1:
00000A02  4E56 0000  651          link      A6,#0
                     652   ; LCDcommand = (char)(0xC0) ;
00000A06  13FC 00C0  653          move.b    #192,4194336
00000A0A  0040 0020 
                     654   ; Wait3ms();
00000A0E  4EB8 0946  655          jsr       _Wait3ms
                     656   ; Clearln() ;
00000A12  4EB8 09B8  657          jsr       _Clearln
                     658   ; LCDcommand = (char)(0xC0) ;
00000A16  13FC 00C0  659          move.b    #192,4194336
00000A1A  0040 0020 
                     660   ; Wait3ms() ;
00000A1E  4EB8 0946  661          jsr       _Wait3ms
                     662   ; OutMess(theMessage) ;
00000A22  2F2E 0008  663          move.l    8(A6),-(A7)
00000A26  4EB8 098E  664          jsr       _OutMess
00000A2A  584F       665          addq.w    #4,A7
00000A2C  4E5E       666          unlk      A6
00000A2E  4E75       667          rts
                     668   ; }
                     669   ; void InstallExceptionHandler( void (*function_ptr)(), int level)
                     670   ; {
                     671   _InstallExceptionHandler:
00000A30  4E56 FFFC  672          link      A6,#-4
                     673   ; volatile long int *RamVectorAddress = (volatile long int *)(StartOfExceptionVectorTable) ;   // pointer to the Ram based interrupt vector table created in Cstart in debug monitor
00000A34  2D7C 0B00  674          move.l    #184549376,-4(A6)
00000A38  0000 FFFC 
                     675   ; RamVectorAddress[level] = (long int *)(function_ptr);
00000A3C  206E FFFC  676          move.l    -4(A6),A0
00000A40  202E 000C  677          move.l    12(A6),D0
00000A44  E588       678          lsl.l     #2,D0
00000A46  21AE 0008  679          move.l    8(A6),0(A0,D0.L)
00000A4A  0800      
00000A4C  4E5E       680          unlk      A6
00000A4E  4E75       681          rts
                     682   ; }
                     683   ; void TestLEDS(void)
                     684   ; {
                     685   _TestLEDS:
00000A50  48E7 3000  686          movem.l   D2/D3,-(A7)
                     687   ; int delay ;
                     688   ; unsigned char count = 0 ;
00000A54  4202       689          clr.b     D2
                     690   ; while(1)    {
                     691   TestLEDS_1:
                     692   ; PortA = PortB = PortC = PortD = HEX_A = HEX_B = HEX_C = HEX_D = ((count << 4) + (count & 0x0f)) ;
00000A56  1002       693          move.b    D2,D0
00000A58  E908       694          lsl.b     #4,D0
00000A5A  1202       695          move.b    D2,D1
00000A5C  C23C 000F  696          and.b     #15,D1
00000A60  D001       697          add.b     D1,D0
00000A62  13C0 0040  698          move.b    D0,4194326
00000A66  0016      
00000A68  13C0 0040  699          move.b    D0,4194324
00000A6C  0014      
00000A6E  13C0 0040  700          move.b    D0,4194322
00000A72  0012      
00000A74  13C0 0040  701          move.b    D0,4194320
00000A78  0010      
00000A7A  13C0 0040  702          move.b    D0,4194310
00000A7E  0006      
00000A80  13C0 0040  703          move.b    D0,4194308
00000A84  0004      
00000A86  13C0 0040  704          move.b    D0,4194306
00000A8A  0002      
00000A8C  13C0 0040  705          move.b    D0,4194304
00000A90  0000      
                     706   ; for(delay = 0; delay < 200000; delay ++)
00000A92  4283       707          clr.l     D3
                     708   TestLEDS_4:
00000A94  0C83 0003  709          cmp.l     #200000,D3
00000A98  0D40      
00000A9A  6C04       710          bge.s     TestLEDS_6
00000A9C  5283       711          addq.l    #1,D3
00000A9E  60F4       712          bra       TestLEDS_4
                     713   TestLEDS_6:
                     714   ; ;
                     715   ; count ++;
00000AA0  5202       716          addq.b    #1,D2
00000AA2  60B2       717          bra       TestLEDS_1
                     718   ; }
                     719   ; }
                     720   ; void SwitchTest(void)
                     721   ; {
                     722   _SwitchTest:
00000AA4  48E7 3020  723          movem.l   D2/D3/A2,-(A7)
00000AA8  45F9 0000  724          lea       _printf.L,A2
00000AAC  5756      
                     725   ; int i, switches = 0 ;
00000AAE  4283       726          clr.l     D3
                     727   ; printf("\r\n") ;
00000AB0  4879 0000  728          pea       @m68kde~2_1.L
00000AB4  60A6      
00000AB6  4E92       729          jsr       (A2)
00000AB8  584F       730          addq.w    #4,A7
                     731   ; while(1)    {
                     732   SwitchTest_1:
                     733   ; switches = (PortB << 8) | (PortA) ;
00000ABA  1039 0040  734          move.b    4194306,D0
00000ABE  0002      
00000AC0  C0BC 0000  735          and.l     #255,D0
00000AC4  00FF      
00000AC6  E188       736          lsl.l     #8,D0
00000AC8  1239 0040  737          move.b    4194304,D1
00000ACC  0000      
00000ACE  C2BC 0000  738          and.l     #255,D1
00000AD2  00FF      
00000AD4  8081       739          or.l      D1,D0
00000AD6  2600       740          move.l    D0,D3
                     741   ; printf("\rSwitches SW[7-0] = ") ;
00000AD8  4879 0000  742          pea       @m68kde~2_2.L
00000ADC  60AA      
00000ADE  4E92       743          jsr       (A2)
00000AE0  584F       744          addq.w    #4,A7
                     745   ; for( i = (int)(0x00000080); i > 0; i = i >> 1)  {
00000AE2  243C 0000  746          move.l    #128,D2
00000AE6  0080      
                     747   SwitchTest_4:
00000AE8  0C82 0000  748          cmp.l     #0,D2
00000AEC  0000      
00000AEE  6F20       749          ble.s     SwitchTest_6
                     750   ; if((switches & i) == 0)
00000AF0  2003       751          move.l    D3,D0
00000AF2  C082       752          and.l     D2,D0
00000AF4  660C       753          bne.s     SwitchTest_7
                     754   ; printf("0") ;
00000AF6  4879 0000  755          pea       @m68kde~2_3.L
00000AFA  60C0      
00000AFC  4E92       756          jsr       (A2)
00000AFE  584F       757          addq.w    #4,A7
00000B00  600A       758          bra.s     SwitchTest_8
                     759   SwitchTest_7:
                     760   ; else
                     761   ; printf("1") ;
00000B02  4879 0000  762          pea       @m68kde~2_4.L
00000B06  60C2      
00000B08  4E92       763          jsr       (A2)
00000B0A  584F       764          addq.w    #4,A7
                     765   SwitchTest_8:
00000B0C  E282       766          asr.l     #1,D2
00000B0E  60D8       767          bra       SwitchTest_4
                     768   SwitchTest_6:
00000B10  60A8       769          bra       SwitchTest_1
                     770   ; }
                     771   ; }
                     772   ; }
                     773   ; /*********************************************************************************************
                     774   ; *Subroutine to initialise the RS232 Port by writing some commands to the internal registers
                     775   ; *********************************************************************************************/
                     776   ; void Init_RS232(void)
                     777   ; {
                     778   _Init_RS232:
                     779   ; RS232_Control = (char)(0x15) ; //  %00010101    divide by 16 clock, set rts low, 8 bits no parity, 1 stop bit transmitter interrupt disabled
00000B12  13FC 0015  780          move.b    #21,4194368
00000B16  0040 0040 
                     781   ; RS232_Baud = (char)(0x1) ;      // program baud rate generator 000 = 230k, 001 = 115k, 010 = 57.6k, 011 = 38.4k, 100 = 19.2, all others = 9600
00000B1A  13FC 0001  782          move.b    #1,4194372
00000B1E  0040 0044 
00000B22  4E75       783          rts
                     784   ; }
                     785   ; int kbhit(void)
                     786   ; {
                     787   _kbhit:
                     788   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // wait for Rx bit in status register to be '1'
00000B24  1039 0040  789          move.b    4194368,D0
00000B28  0040      
00000B2A  C03C 0001  790          and.b     #1,D0
00000B2E  0C00 0001  791          cmp.b     #1,D0
00000B32  6604       792          bne.s     kbhit_1
                     793   ; return 1 ;
00000B34  7001       794          moveq     #1,D0
00000B36  6002       795          bra.s     kbhit_3
                     796   kbhit_1:
                     797   ; else
                     798   ; return 0 ;
00000B38  4280       799          clr.l     D0
                     800   kbhit_3:
00000B3A  4E75       801          rts
                     802   ; }
                     803   ; /*********************************************************************************************************
                     804   ; **  Subroutine to provide a low level output function to 6850 ACIA
                     805   ; **  This routine provides the basic functionality to output a single character to the serial Port
                     806   ; **  to allow the board to communicate with HyperTerminal Program
                     807   ; **
                     808   ; **  NOTE you do not call this function directly, instead you call the normal putchar() function
                     809   ; **  which in turn calls _putch() below). Other functions like puts(), printf() call putchar() so will
                     810   ; **  call _putch() also
                     811   ; *********************************************************************************************************/
                     812   ; int _putch( int c)
                     813   ; {
                     814   __putch:
00000B3C  4E56 0000  815          link      A6,#0
                     816   ; while(((char)(RS232_Status) & (char)(0x02)) != (char)(0x02))    // wait for Tx bit in status register or 6850 serial comms chip to be '1'
                     817   _putch_1:
00000B40  1039 0040  818          move.b    4194368,D0
00000B44  0040      
00000B46  C03C 0002  819          and.b     #2,D0
00000B4A  0C00 0002  820          cmp.b     #2,D0
00000B4E  6702       821          beq.s     _putch_3
00000B50  60EE       822          bra       _putch_1
                     823   _putch_3:
                     824   ; ;
                     825   ; (char)(RS232_TxData) = ((char)(c) & (char)(0x7f));                      // write to the data register to output the character (mask off bit 8 to keep it 7 bit ASCII)
00000B52  202E 0008  826          move.l    8(A6),D0
00000B56  C03C 007F  827          and.b     #127,D0
00000B5A  13C0 0040  828          move.b    D0,4194370
00000B5E  0042      
                     829   ; return c ;                                              // putchar() expects the character to be returned
00000B60  202E 0008  830          move.l    8(A6),D0
00000B64  4E5E       831          unlk      A6
00000B66  4E75       832          rts
                     833   ; }
                     834   ; /*********************************************************************************************************
                     835   ; **  Subroutine to provide a low level input function to 6850 ACIA
                     836   ; **  This routine provides the basic functionality to input a single character from the serial Port
                     837   ; **  to allow the board to communicate with HyperTerminal Program Keyboard (your PC)
                     838   ; **
                     839   ; **  NOTE you do not call this function directly, instead you call the normal _getch() function
                     840   ; **  which in turn calls _getch() below). Other functions like gets(), scanf() call _getch() so will
                     841   ; **  call _getch() also
                     842   ; *********************************************************************************************************/
                     843   ; int _getch( void )
                     844   ; {
                     845   __getch:
00000B68  2F02       846          move.l    D2,-(A7)
                     847   ; int c ;
                     848   ; while(((char)(RS232_Status) & (char)(0x01)) != (char)(0x01))    // wait for Rx bit in 6850 serial comms chip status register to be '1'
                     849   _getch_1:
00000B6A  1039 0040  850          move.b    4194368,D0
00000B6E  0040      
00000B70  C03C 0001  851          and.b     #1,D0
00000B74  0C00 0001  852          cmp.b     #1,D0
00000B78  6702       853          beq.s     _getch_3
00000B7A  60EE       854          bra       _getch_1
                     855   _getch_3:
                     856   ; ;
                     857   ; c = (RS232_RxData & (char)(0x7f));                   // read received character, mask off top bit and return as 7 bit ASCII character
00000B7C  1039 0040  858          move.b    4194370,D0
00000B80  0042      
00000B82  C0BC 0000  859          and.l     #255,D0
00000B86  00FF      
00000B88  C0BC 0000  860          and.l     #127,D0
00000B8C  007F      
00000B8E  2400       861          move.l    D0,D2
                     862   ; // shall we echo the character? Echo is set to TRUE at reset, but for speed we don't want to echo when downloading code with the 'L' debugger command
                     863   ; if(Echo)
00000B90  4AB9 0B00  864          tst.l     _Echo.L
00000B94  00E0      
00000B96  6708       865          beq.s     _getch_4
                     866   ; _putch(c);
00000B98  2F02       867          move.l    D2,-(A7)
00000B9A  4EB8 0B3C  868          jsr       __putch
00000B9E  584F       869          addq.w    #4,A7
                     870   _getch_4:
                     871   ; return c ;
00000BA0  2002       872          move.l    D2,D0
00000BA2  241F       873          move.l    (A7)+,D2
00000BA4  4E75       874          rts
                     875   ; }
                     876   ; // flush the input stream for any unread characters
                     877   ; void FlushKeyboard(void)
                     878   ; {
                     879   _FlushKeyboard:
00000BA6  4E56 FFFC  880          link      A6,#-4
                     881   ; char c ;
                     882   ; while(1)    {
                     883   FlushKeyboard_1:
                     884   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // if Rx bit in status register is '1'
00000BAA  1039 0040  885          move.b    4194368,D0
00000BAE  0040      
00000BB0  C03C 0001  886          and.b     #1,D0
00000BB4  0C00 0001  887          cmp.b     #1,D0
00000BB8  6610       888          bne.s     FlushKeyboard_4
                     889   ; c = ((char)(RS232_RxData) & (char)(0x7f)) ;
00000BBA  1039 0040  890          move.b    4194370,D0
00000BBE  0042      
00000BC0  C03C 007F  891          and.b     #127,D0
00000BC4  1D40 FFFF  892          move.b    D0,-1(A6)
00000BC8  6002       893          bra.s     FlushKeyboard_5
                     894   FlushKeyboard_4:
                     895   ; else
                     896   ; return ;
00000BCA  6002       897          bra.s     FlushKeyboard_6
                     898   FlushKeyboard_5:
00000BCC  60DC       899          bra       FlushKeyboard_1
                     900   FlushKeyboard_6:
00000BCE  4E5E       901          unlk      A6
00000BD0  4E75       902          rts
                     903   ; }
                     904   ; }
                     905   ; // converts hex char to 4 bit binary equiv in range 0000-1111 (0-F)
                     906   ; // char assumed to be a valid hex char 0-9, a-f, A-F
                     907   ; char xtod(int c)
                     908   ; {
                     909   _xtod:
00000BD2  4E56 0000  910          link      A6,#0
00000BD6  2F02       911          move.l    D2,-(A7)
00000BD8  242E 0008  912          move.l    8(A6),D2
                     913   ; if ((char)(c) <= (char)('9'))
00000BDC  0C02 0039  914          cmp.b     #57,D2
00000BE0  6E08       915          bgt.s     xtod_1
                     916   ; return c - (char)(0x30);    // 0 - 9 = 0x30 - 0x39 so convert to number by sutracting 0x30
00000BE2  1002       917          move.b    D2,D0
00000BE4  0400 0030  918          sub.b     #48,D0
00000BE8  6014       919          bra.s     xtod_3
                     920   xtod_1:
                     921   ; else if((char)(c) > (char)('F'))    // assume lower case
00000BEA  0C02 0046  922          cmp.b     #70,D2
00000BEE  6F08       923          ble.s     xtod_4
                     924   ; return c - (char)(0x57);    // a-f = 0x61-66 so needs to be converted to 0x0A - 0x0F so subtract 0x57
00000BF0  1002       925          move.b    D2,D0
00000BF2  0400 0057  926          sub.b     #87,D0
00000BF6  6006       927          bra.s     xtod_3
                     928   xtod_4:
                     929   ; else
                     930   ; return c - (char)(0x37);    // A-F = 0x41-46 so needs to be converted to 0x0A - 0x0F so subtract 0x37
00000BF8  1002       931          move.b    D2,D0
00000BFA  0400 0037  932          sub.b     #55,D0
                     933   xtod_3:
00000BFE  241F       934          move.l    (A7)+,D2
00000C00  4E5E       935          unlk      A6
00000C02  4E75       936          rts
                     937   ; }
                     938   ; int Get2HexDigits(char *CheckSumPtr)
                     939   ; {
                     940   _Get2HexDigits:
00000C04  4E56 0000  941          link      A6,#0
00000C08  2F02       942          move.l    D2,-(A7)
                     943   ; register int i = (xtod(_getch()) << 4) | (xtod(_getch()));
00000C0A  2F00       944          move.l    D0,-(A7)
00000C0C  4EB8 0B68  945          jsr       __getch
00000C10  2200       946          move.l    D0,D1
00000C12  201F       947          move.l    (A7)+,D0
00000C14  2F01       948          move.l    D1,-(A7)
00000C16  4EB8 0BD2  949          jsr       _xtod
00000C1A  584F       950          addq.w    #4,A7
00000C1C  C0BC 0000  951          and.l     #255,D0
00000C20  00FF      
00000C22  E980       952          asl.l     #4,D0
00000C24  2F00       953          move.l    D0,-(A7)
00000C26  2F01       954          move.l    D1,-(A7)
00000C28  4EB8 0B68  955          jsr       __getch
00000C2C  221F       956          move.l    (A7)+,D1
00000C2E  2F00       957          move.l    D0,-(A7)
00000C30  4EB8 0BD2  958          jsr       _xtod
00000C34  584F       959          addq.w    #4,A7
00000C36  2200       960          move.l    D0,D1
00000C38  201F       961          move.l    (A7)+,D0
00000C3A  C2BC 0000  962          and.l     #255,D1
00000C3E  00FF      
00000C40  8081       963          or.l      D1,D0
00000C42  2400       964          move.l    D0,D2
                     965   ; if(CheckSumPtr)
00000C44  4AAE 0008  966          tst.l     8(A6)
00000C48  6706       967          beq.s     Get2HexDigits_1
                     968   ; *CheckSumPtr += i ;
00000C4A  206E 0008  969          move.l    8(A6),A0
00000C4E  D510       970          add.b     D2,(A0)
                     971   Get2HexDigits_1:
                     972   ; return i ;
00000C50  2002       973          move.l    D2,D0
00000C52  241F       974          move.l    (A7)+,D2
00000C54  4E5E       975          unlk      A6
00000C56  4E75       976          rts
                     977   ; }
                     978   ; int Get4HexDigits(char *CheckSumPtr)
                     979   ; {
                     980   _Get4HexDigits:
00000C58  4E56 0000  981          link      A6,#0
                     982   ; return (Get2HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C5C  2F2E 0008  983          move.l    8(A6),-(A7)
00000C60  4EB8 0C04  984          jsr       _Get2HexDigits
00000C64  584F       985          addq.w    #4,A7
00000C66  E180       986          asl.l     #8,D0
00000C68  2F00       987          move.l    D0,-(A7)
00000C6A  2F2E 0008  988          move.l    8(A6),-(A7)
00000C6E  4EB8 0C04  989          jsr       _Get2HexDigits
00000C72  584F       990          addq.w    #4,A7
00000C74  2200       991          move.l    D0,D1
00000C76  201F       992          move.l    (A7)+,D0
00000C78  8081       993          or.l      D1,D0
00000C7A  4E5E       994          unlk      A6
00000C7C  4E75       995          rts
                     996   ; }
                     997   ; int Get6HexDigits(char *CheckSumPtr)
                     998   ; {
                     999   _Get6HexDigits:
00000C7E  4E56 0000 1000          link      A6,#0
                    1001   ; return (Get4HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C82  2F2E 0008 1002          move.l    8(A6),-(A7)
00000C86  4EB8 0C58 1003          jsr       _Get4HexDigits
00000C8A  584F      1004          addq.w    #4,A7
00000C8C  E180      1005          asl.l     #8,D0
00000C8E  2F00      1006          move.l    D0,-(A7)
00000C90  2F2E 0008 1007          move.l    8(A6),-(A7)
00000C94  4EB8 0C04 1008          jsr       _Get2HexDigits
00000C98  584F      1009          addq.w    #4,A7
00000C9A  2200      1010          move.l    D0,D1
00000C9C  201F      1011          move.l    (A7)+,D0
00000C9E  8081      1012          or.l      D1,D0
00000CA0  4E5E      1013          unlk      A6
00000CA2  4E75      1014          rts
                    1015   ; }
                    1016   ; int Get8HexDigits(char *CheckSumPtr)
                    1017   ; {
                    1018   _Get8HexDigits:
00000CA4  4E56 0000 1019          link      A6,#0
                    1020   ; return (Get4HexDigits(CheckSumPtr) << 16) | (Get4HexDigits(CheckSumPtr));
00000CA8  2F2E 0008 1021          move.l    8(A6),-(A7)
00000CAC  4EB8 0C58 1022          jsr       _Get4HexDigits
00000CB0  584F      1023          addq.w    #4,A7
00000CB2  E180      1024          asl.l     #8,D0
00000CB4  E180      1025          asl.l     #8,D0
00000CB6  2F00      1026          move.l    D0,-(A7)
00000CB8  2F2E 0008 1027          move.l    8(A6),-(A7)
00000CBC  4EB8 0C58 1028          jsr       _Get4HexDigits
00000CC0  584F      1029          addq.w    #4,A7
00000CC2  2200      1030          move.l    D0,D1
00000CC4  201F      1031          move.l    (A7)+,D0
00000CC6  8081      1032          or.l      D1,D0
00000CC8  4E5E      1033          unlk      A6
00000CCA  4E75      1034          rts
                    1035   ; }
                    1036   ; char *strcatInstruction(char *s) {    return strcat(Instruction,s) ; }
                    1037   _strcatInstruction:
00000CCC  4E56 0000 1038          link      A6,#0
00000CD0  2F2E 0008 1039          move.l    8(A6),-(A7)
00000CD4  4879 0B00 1040          pea       _Instruction.L
00000CD8  04E2      
00000CDA  4EB9 0000 1041          jsr       _strcat
00000CDE  56D6      
00000CE0  504F      1042          addq.w    #8,A7
00000CE2  4E5E      1043          unlk      A6
00000CE4  4E75      1044          rts
                    1045   ; char *strcpyInstruction(char *s) {    return strcpy(Instruction,s) ; }
                    1046   _strcpyInstruction:
00000CE6  4E56 0000 1047          link      A6,#0
00000CEA  2F2E 0008 1048          move.l    8(A6),-(A7)
00000CEE  4879 0B00 1049          pea       _Instruction.L
00000CF2  04E2      
00000CF4  4EB9 0000 1050          jsr       _strcpy
00000CF8  5558      
00000CFA  504F      1051          addq.w    #8,A7
00000CFC  4E5E      1052          unlk      A6
00000CFE  4E75      1053          rts
                    1054   ; void DisassembleProgram(void )
                    1055   ; {
                    1056   _DisassembleProgram:
00000D00  4E56 FFF8 1057          link      A6,#-8
00000D04  48E7 3038 1058          movem.l   D2/D3/A2/A3/A4,-(A7)
00000D08  45F9 0B00 1059          lea       _InstructionSize.L,A2
00000D0C  017E      
00000D0E  47F9 0000 1060          lea       _printf.L,A3
00000D12  5756      
00000D14  49F9 0B00 1061          lea       _Instruction.L,A4
00000D18  04E2      
                    1062   ; char c ;
                    1063   ; int i, j ;
                    1064   ; unsigned short int *ProgramPtr ; // pointer to where the program is stored
                    1065   ; printf("\r\nEnter Start Address: ") ;
00000D1A  4879 0000 1066          pea       @m68kde~2_5.L
00000D1E  60C4      
00000D20  4E93      1067          jsr       (A3)
00000D22  584F      1068          addq.w    #4,A7
                    1069   ; ProgramPtr = Get8HexDigits(0) ;
00000D24  42A7      1070          clr.l     -(A7)
00000D26  4EB8 0CA4 1071          jsr       _Get8HexDigits
00000D2A  584F      1072          addq.w    #4,A7
00000D2C  2400      1073          move.l    D0,D2
                    1074   ; printf("\r\n<ESC> = Abort, SPACE to Continue") ;
00000D2E  4879 0000 1075          pea       @m68kde~2_6.L
00000D32  60DC      
00000D34  4E93      1076          jsr       (A3)
00000D36  584F      1077          addq.w    #4,A7
                    1078   ; while(1)    {
                    1079   DisassembleProgram_1:
                    1080   ; for(i = 0; i < 20; i ++)
00000D38  4283      1081          clr.l     D3
                    1082   DisassembleProgram_4:
00000D3A  0C83 0000 1083          cmp.l     #20,D3
00000D3E  0014      
00000D40  6C00 017E 1084          bge       DisassembleProgram_6
                    1085   ; {
                    1086   ; InstructionSize = 1 ;                   // assume all instruction are at least 1 word
00000D44  24BC 0000 1087          move.l    #1,(A2)
00000D48  0001      
                    1088   ; DisassembleInstruction(ProgramPtr) ;    // build up string for disassembled instruction at address in programptr
00000D4A  2F02      1089          move.l    D2,-(A7)
00000D4C  4EB9 0000 1090          jsr       _DisassembleInstruction
00000D50  36B6      
00000D52  584F      1091          addq.w    #4,A7
                    1092   ; if(InstructionSize == 1)
00000D54  2012      1093          move.l    (A2),D0
00000D56  0C80 0000 1094          cmp.l     #1,D0
00000D5A  0001      
00000D5C  6620      1095          bne.s     DisassembleProgram_7
                    1096   ; printf("\r\n%08X  %04X                        %s", ProgramPtr, ProgramPtr[0], Instruction) ;
00000D5E  2F0C      1097          move.l    A4,-(A7)
00000D60  2042      1098          move.l    D2,A0
00000D62  3210      1099          move.w    (A0),D1
00000D64  C2BC 0000 1100          and.l     #65535,D1
00000D68  FFFF      
00000D6A  2F01      1101          move.l    D1,-(A7)
00000D6C  2F02      1102          move.l    D2,-(A7)
00000D6E  4879 0000 1103          pea       @m68kde~2_7.L
00000D72  6100      
00000D74  4E93      1104          jsr       (A3)
00000D76  DEFC 0010 1105          add.w     #16,A7
00000D7A  6000 0138 1106          bra       DisassembleProgram_15
                    1107   DisassembleProgram_7:
                    1108   ; else if(InstructionSize == 2)
00000D7E  2012      1109          move.l    (A2),D0
00000D80  0C80 0000 1110          cmp.l     #2,D0
00000D84  0002      
00000D86  662E      1111          bne.s     DisassembleProgram_9
                    1112   ; printf("\r\n%08X  %04X %04X                   %s", ProgramPtr, ProgramPtr[0], ProgramPtr[1], Instruction) ;
00000D88  2F0C      1113          move.l    A4,-(A7)
00000D8A  2042      1114          move.l    D2,A0
00000D8C  3228 0002 1115          move.w    2(A0),D1
00000D90  C2BC 0000 1116          and.l     #65535,D1
00000D94  FFFF      
00000D96  2F01      1117          move.l    D1,-(A7)
00000D98  2042      1118          move.l    D2,A0
00000D9A  3210      1119          move.w    (A0),D1
00000D9C  C2BC 0000 1120          and.l     #65535,D1
00000DA0  FFFF      
00000DA2  2F01      1121          move.l    D1,-(A7)
00000DA4  2F02      1122          move.l    D2,-(A7)
00000DA6  4879 0000 1123          pea       @m68kde~2_8.L
00000DAA  6128      
00000DAC  4E93      1124          jsr       (A3)
00000DAE  DEFC 0014 1125          add.w     #20,A7
00000DB2  6000 0100 1126          bra       DisassembleProgram_15
                    1127   DisassembleProgram_9:
                    1128   ; else if(InstructionSize == 3)
00000DB6  2012      1129          move.l    (A2),D0
00000DB8  0C80 0000 1130          cmp.l     #3,D0
00000DBC  0003      
00000DBE  6600 003E 1131          bne       DisassembleProgram_11
                    1132   ; printf("\r\n%08X  %04X %04X %04X              %s", ProgramPtr, ProgramPtr[0], ProgramPtr[1], ProgramPtr[2], Instruction) ;
00000DC2  2F0C      1133          move.l    A4,-(A7)
00000DC4  2042      1134          move.l    D2,A0
00000DC6  3228 0004 1135          move.w    4(A0),D1
00000DCA  C2BC 0000 1136          and.l     #65535,D1
00000DCE  FFFF      
00000DD0  2F01      1137          move.l    D1,-(A7)
00000DD2  2042      1138          move.l    D2,A0
00000DD4  3228 0002 1139          move.w    2(A0),D1
00000DD8  C2BC 0000 1140          and.l     #65535,D1
00000DDC  FFFF      
00000DDE  2F01      1141          move.l    D1,-(A7)
00000DE0  2042      1142          move.l    D2,A0
00000DE2  3210      1143          move.w    (A0),D1
00000DE4  C2BC 0000 1144          and.l     #65535,D1
00000DE8  FFFF      
00000DEA  2F01      1145          move.l    D1,-(A7)
00000DEC  2F02      1146          move.l    D2,-(A7)
00000DEE  4879 0000 1147          pea       @m68kde~2_9.L
00000DF2  6150      
00000DF4  4E93      1148          jsr       (A3)
00000DF6  DEFC 0018 1149          add.w     #24,A7
00000DFA  6000 00B8 1150          bra       DisassembleProgram_15
                    1151   DisassembleProgram_11:
                    1152   ; else if(InstructionSize == 4)
00000DFE  2012      1153          move.l    (A2),D0
00000E00  0C80 0000 1154          cmp.l     #4,D0
00000E04  0004      
00000E06  6600 004C 1155          bne       DisassembleProgram_13
                    1156   ; printf("\r\n%08X  %04X %04X %04X %04X         %s", ProgramPtr, ProgramPtr[0], ProgramPtr[1], ProgramPtr[2], ProgramPtr[3], Instruction) ;
00000E0A  2F0C      1157          move.l    A4,-(A7)
00000E0C  2042      1158          move.l    D2,A0
00000E0E  3228 0006 1159          move.w    6(A0),D1
00000E12  C2BC 0000 1160          and.l     #65535,D1
00000E16  FFFF      
00000E18  2F01      1161          move.l    D1,-(A7)
00000E1A  2042      1162          move.l    D2,A0
00000E1C  3228 0004 1163          move.w    4(A0),D1
00000E20  C2BC 0000 1164          and.l     #65535,D1
00000E24  FFFF      
00000E26  2F01      1165          move.l    D1,-(A7)
00000E28  2042      1166          move.l    D2,A0
00000E2A  3228 0002 1167          move.w    2(A0),D1
00000E2E  C2BC 0000 1168          and.l     #65535,D1
00000E32  FFFF      
00000E34  2F01      1169          move.l    D1,-(A7)
00000E36  2042      1170          move.l    D2,A0
00000E38  3210      1171          move.w    (A0),D1
00000E3A  C2BC 0000 1172          and.l     #65535,D1
00000E3E  FFFF      
00000E40  2F01      1173          move.l    D1,-(A7)
00000E42  2F02      1174          move.l    D2,-(A7)
00000E44  4879 0000 1175          pea       @m68kde~2_10.L
00000E48  6178      
00000E4A  4E93      1176          jsr       (A3)
00000E4C  DEFC 001C 1177          add.w     #28,A7
00000E50  6000 0062 1178          bra       DisassembleProgram_15
                    1179   DisassembleProgram_13:
                    1180   ; else if(InstructionSize == 5)
00000E54  2012      1181          move.l    (A2),D0
00000E56  0C80 0000 1182          cmp.l     #5,D0
00000E5A  0005      
00000E5C  6600 0056 1183          bne       DisassembleProgram_15
                    1184   ; printf("\r\n%08X  %04X %04X %04X %04X %04X    %s", ProgramPtr, ProgramPtr[0], ProgramPtr[1], ProgramPtr[2], ProgramPtr[3], ProgramPtr[4], Instruction) ;
00000E60  2F0C      1185          move.l    A4,-(A7)
00000E62  2042      1186          move.l    D2,A0
00000E64  3228 0008 1187          move.w    8(A0),D1
00000E68  C2BC 0000 1188          and.l     #65535,D1
00000E6C  FFFF      
00000E6E  2F01      1189          move.l    D1,-(A7)
00000E70  2042      1190          move.l    D2,A0
00000E72  3228 0006 1191          move.w    6(A0),D1
00000E76  C2BC 0000 1192          and.l     #65535,D1
00000E7A  FFFF      
00000E7C  2F01      1193          move.l    D1,-(A7)
00000E7E  2042      1194          move.l    D2,A0
00000E80  3228 0004 1195          move.w    4(A0),D1
00000E84  C2BC 0000 1196          and.l     #65535,D1
00000E88  FFFF      
00000E8A  2F01      1197          move.l    D1,-(A7)
00000E8C  2042      1198          move.l    D2,A0
00000E8E  3228 0002 1199          move.w    2(A0),D1
00000E92  C2BC 0000 1200          and.l     #65535,D1
00000E96  FFFF      
00000E98  2F01      1201          move.l    D1,-(A7)
00000E9A  2042      1202          move.l    D2,A0
00000E9C  3210      1203          move.w    (A0),D1
00000E9E  C2BC 0000 1204          and.l     #65535,D1
00000EA2  FFFF      
00000EA4  2F01      1205          move.l    D1,-(A7)
00000EA6  2F02      1206          move.l    D2,-(A7)
00000EA8  4879 0000 1207          pea       @m68kde~2_11.L
00000EAC  61A0      
00000EAE  4E93      1208          jsr       (A3)
00000EB0  DEFC 0020 1209          add.w     #32,A7
                    1210   DisassembleProgram_15:
                    1211   ; ProgramPtr += InstructionSize ;
00000EB4  2012      1212          move.l    (A2),D0
00000EB6  E388      1213          lsl.l     #1,D0
00000EB8  D480      1214          add.l     D0,D2
00000EBA  5283      1215          addq.l    #1,D3
00000EBC  6000 FE7C 1216          bra       DisassembleProgram_4
                    1217   DisassembleProgram_6:
                    1218   ; }
                    1219   ; c = _getch() ;
00000EC0  4EB8 0B68 1220          jsr       __getch
00000EC4  1D40 FFFB 1221          move.b    D0,-5(A6)
                    1222   ; if(c == 0x1b)          // break on ESC
00000EC8  102E FFFB 1223          move.b    -5(A6),D0
00000ECC  0C00 001B 1224          cmp.b     #27,D0
00000ED0  6602      1225          bne.s     DisassembleProgram_17
                    1226   ; return ;
00000ED2  6004      1227          bra.s     DisassembleProgram_19
                    1228   DisassembleProgram_17:
00000ED4  6000 FE62 1229          bra       DisassembleProgram_1
                    1230   DisassembleProgram_19:
00000ED8  4CDF 1C0C 1231          movem.l   (A7)+,D2/D3/A2/A3/A4
00000EDC  4E5E      1232          unlk      A6
00000EDE  4E75      1233          rts
                    1234   ; }
                    1235   ; }
                    1236   ; void DumpMemory(void)   // simple dump memory fn
                    1237   ; {
                    1238   _DumpMemory:
00000EE0  48E7 3C30 1239          movem.l   D2/D3/D4/D5/A2/A3,-(A7)
00000EE4  45F9 0000 1240          lea       _printf.L,A2
00000EE8  5756      
00000EEA  47F9 0000 1241          lea       _putch.L,A3
00000EEE  5646      
                    1242   ; int i, j ;
                    1243   ; unsigned char *RamPtr,c ; // pointer to where the program is download (assumed)
                    1244   ; printf("\r\nDump Memory Block: <ESC> to Abort, <SPACE> to Continue") ;
00000EF0  4879 0000 1245          pea       @m68kde~2_12.L
00000EF4  61C8      
00000EF6  4E92      1246          jsr       (A2)
00000EF8  584F      1247          addq.w    #4,A7
                    1248   ; printf("\r\nEnter Start Address: ") ;
00000EFA  4879 0000 1249          pea       @m68kde~2_5.L
00000EFE  60C4      
00000F00  4E92      1250          jsr       (A2)
00000F02  584F      1251          addq.w    #4,A7
                    1252   ; RamPtr = Get8HexDigits(0) ;
00000F04  42A7      1253          clr.l     -(A7)
00000F06  4EB8 0CA4 1254          jsr       _Get8HexDigits
00000F0A  584F      1255          addq.w    #4,A7
00000F0C  2600      1256          move.l    D0,D3
                    1257   ; while(1)    {
                    1258   DumpMemory_1:
                    1259   ; for(i = 0; i < 16; i ++)    {
00000F0E  4285      1260          clr.l     D5
                    1261   DumpMemory_4:
00000F10  0C85 0000 1262          cmp.l     #16,D5
00000F14  0010      
00000F16  6C00 0096 1263          bge       DumpMemory_6
                    1264   ; printf("\r\n%08x ", RamPtr) ;
00000F1A  2F03      1265          move.l    D3,-(A7)
00000F1C  4879 0000 1266          pea       @m68kde~2_13.L
00000F20  6202      
00000F22  4E92      1267          jsr       (A2)
00000F24  504F      1268          addq.w    #8,A7
                    1269   ; for(j=0; j < 16; j ++)  {
00000F26  4282      1270          clr.l     D2
                    1271   DumpMemory_7:
00000F28  0C82 0000 1272          cmp.l     #16,D2
00000F2C  0010      
00000F2E  6C24      1273          bge.s     DumpMemory_9
                    1274   ; printf("%02X",RamPtr[j]) ;
00000F30  2043      1275          move.l    D3,A0
00000F32  1230 2800 1276          move.b    0(A0,D2.L),D1
00000F36  C2BC 0000 1277          and.l     #255,D1
00000F3A  00FF      
00000F3C  2F01      1278          move.l    D1,-(A7)
00000F3E  4879 0000 1279          pea       @m68kde~2_14.L
00000F42  620A      
00000F44  4E92      1280          jsr       (A2)
00000F46  504F      1281          addq.w    #8,A7
                    1282   ; putchar(' ') ;
00000F48  4878 0020 1283          pea       32
00000F4C  4E93      1284          jsr       (A3)
00000F4E  584F      1285          addq.w    #4,A7
00000F50  5282      1286          addq.l    #1,D2
00000F52  60D4      1287          bra       DumpMemory_7
                    1288   DumpMemory_9:
                    1289   ; }
                    1290   ; // now display the data as ASCII at the end
                    1291   ; printf("  ") ;
00000F54  4879 0000 1292          pea       @m68kde~2_15.L
00000F58  6210      
00000F5A  4E92      1293          jsr       (A2)
00000F5C  584F      1294          addq.w    #4,A7
                    1295   ; for(j = 0; j < 16; j++) {
00000F5E  4282      1296          clr.l     D2
                    1297   DumpMemory_10:
00000F60  0C82 0000 1298          cmp.l     #16,D2
00000F64  0010      
00000F66  6C00 003A 1299          bge       DumpMemory_12
                    1300   ; c = ((char)(RamPtr[j]) & 0x7f) ;
00000F6A  2043      1301          move.l    D3,A0
00000F6C  1030 2800 1302          move.b    0(A0,D2.L),D0
00000F70  C03C 007F 1303          and.b     #127,D0
00000F74  1800      1304          move.b    D0,D4
                    1305   ; if((c > (char)(0x7f)) || (c < ' '))
00000F76  0C04 007F 1306          cmp.b     #127,D4
00000F7A  6206      1307          bhi.s     DumpMemory_15
00000F7C  0C04 0020 1308          cmp.b     #32,D4
00000F80  640A      1309          bhs.s     DumpMemory_13
                    1310   DumpMemory_15:
                    1311   ; putchar('.') ;
00000F82  4878 002E 1312          pea       46
00000F86  4E93      1313          jsr       (A3)
00000F88  584F      1314          addq.w    #4,A7
00000F8A  6012      1315          bra.s     DumpMemory_14
                    1316   DumpMemory_13:
                    1317   ; else
                    1318   ; putchar(RamPtr[j]) ;
00000F8C  2043      1319          move.l    D3,A0
00000F8E  1230 2800 1320          move.b    0(A0,D2.L),D1
00000F92  C2BC 0000 1321          and.l     #255,D1
00000F96  00FF      
00000F98  2F01      1322          move.l    D1,-(A7)
00000F9A  4E93      1323          jsr       (A3)
00000F9C  584F      1324          addq.w    #4,A7
                    1325   DumpMemory_14:
00000F9E  5282      1326          addq.l    #1,D2
00000FA0  60BE      1327          bra       DumpMemory_10
                    1328   DumpMemory_12:
                    1329   ; }
                    1330   ; RamPtr = RamPtr + 16 ;
00000FA2  0683 0000 1331          add.l     #16,D3
00000FA6  0010      
00000FA8  5285      1332          addq.l    #1,D5
00000FAA  6000 FF64 1333          bra       DumpMemory_4
                    1334   DumpMemory_6:
                    1335   ; }
                    1336   ; printf("\r\n") ;
00000FAE  4879 0000 1337          pea       @m68kde~2_1.L
00000FB2  60A6      
00000FB4  4E92      1338          jsr       (A2)
00000FB6  584F      1339          addq.w    #4,A7
                    1340   ; c = _getch() ;
00000FB8  4EB8 0B68 1341          jsr       __getch
00000FBC  1800      1342          move.b    D0,D4
                    1343   ; if(c == 0x1b)          // break on ESC
00000FBE  0C04 001B 1344          cmp.b     #27,D4
00000FC2  6602      1345          bne.s     DumpMemory_16
                    1346   ; break ;
00000FC4  6004      1347          bra.s     DumpMemory_3
                    1348   DumpMemory_16:
00000FC6  6000 FF46 1349          bra       DumpMemory_1
                    1350   DumpMemory_3:
00000FCA  4CDF 0C3C 1351          movem.l   (A7)+,D2/D3/D4/D5/A2/A3
00000FCE  4E75      1352          rts
                    1353   ; }
                    1354   ; }
                    1355   ; void FillMemory()
                    1356   ; {
                    1357   _FillMemory:
00000FD0  48E7 3820 1358          movem.l   D2/D3/D4/A2,-(A7)
00000FD4  45F9 0000 1359          lea       _printf.L,A2
00000FD8  5756      
                    1360   ; char *StartRamPtr, *EndRamPtr ;
                    1361   ; unsigned char FillData ;
                    1362   ; printf("\r\nFill Memory Block") ;
00000FDA  4879 0000 1363          pea       @m68kde~2_16.L
00000FDE  6214      
00000FE0  4E92      1364          jsr       (A2)
00000FE2  584F      1365          addq.w    #4,A7
                    1366   ; printf("\r\nEnter Start Address: ") ;
00000FE4  4879 0000 1367          pea       @m68kde~2_5.L
00000FE8  60C4      
00000FEA  4E92      1368          jsr       (A2)
00000FEC  584F      1369          addq.w    #4,A7
                    1370   ; StartRamPtr = Get8HexDigits(0) ;
00000FEE  42A7      1371          clr.l     -(A7)
00000FF0  4EB8 0CA4 1372          jsr       _Get8HexDigits
00000FF4  584F      1373          addq.w    #4,A7
00000FF6  2400      1374          move.l    D0,D2
                    1375   ; printf("\r\nEnter End Address: ") ;
00000FF8  4879 0000 1376          pea       @m68kde~2_17.L
00000FFC  6228      
00000FFE  4E92      1377          jsr       (A2)
00001000  584F      1378          addq.w    #4,A7
                    1379   ; EndRamPtr = Get8HexDigits(0) ;
00001002  42A7      1380          clr.l     -(A7)
00001004  4EB8 0CA4 1381          jsr       _Get8HexDigits
00001008  584F      1382          addq.w    #4,A7
0000100A  2800      1383          move.l    D0,D4
                    1384   ; printf("\r\nEnter Fill Data: ") ;
0000100C  4879 0000 1385          pea       @m68kde~2_18.L
00001010  623E      
00001012  4E92      1386          jsr       (A2)
00001014  584F      1387          addq.w    #4,A7
                    1388   ; FillData = Get2HexDigits(0) ;
00001016  42A7      1389          clr.l     -(A7)
00001018  4EB8 0C04 1390          jsr       _Get2HexDigits
0000101C  584F      1391          addq.w    #4,A7
0000101E  1600      1392          move.b    D0,D3
                    1393   ; printf("\r\nFilling Addresses [$%08X - $%08X] with $%02X", StartRamPtr, EndRamPtr, FillData) ;
00001020  C6BC 0000 1394          and.l     #255,D3
00001024  00FF      
00001026  2F03      1395          move.l    D3,-(A7)
00001028  2F04      1396          move.l    D4,-(A7)
0000102A  2F02      1397          move.l    D2,-(A7)
0000102C  4879 0000 1398          pea       @m68kde~2_19.L
00001030  6252      
00001032  4E92      1399          jsr       (A2)
00001034  DEFC 0010 1400          add.w     #16,A7
                    1401   ; while(StartRamPtr < EndRamPtr)
                    1402   FillMemory_1:
00001038  B484      1403          cmp.l     D4,D2
0000103A  6408      1404          bhs.s     FillMemory_3
                    1405   ; *StartRamPtr++ = FillData ;
0000103C  2042      1406          move.l    D2,A0
0000103E  5282      1407          addq.l    #1,D2
00001040  1083      1408          move.b    D3,(A0)
00001042  60F4      1409          bra       FillMemory_1
                    1410   FillMemory_3:
00001044  4CDF 041C 1411          movem.l   (A7)+,D2/D3/D4/A2
00001048  4E75      1412          rts
                    1413   ; }
                    1414   ; void Load_SRecordFile()
                    1415   ; {
                    1416   _Load_SRecordFile:
0000104A  4E56 FFDC 1417          link      A6,#-36
0000104E  48E7 3F3C 1418          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00001052  45EE FFFA 1419          lea       -6(A6),A2
00001056  47F8 0C04 1420          lea       _Get2HexDigits.L,A3
0000105A  49F9 0000 1421          lea       _printf.L,A4
0000105E  5756      
                    1422   ; int i, Address, AddressSize, DataByte, NumDataBytesToRead, LoadFailed, FailedAddress, AddressFail, SRecordCount = 0, ByteTotal = 0 ;
00001060  42AE FFEE 1423          clr.l     -18(A6)
00001064  3A7C 0000 1424          move.w    #0,A5
                    1425   ; int result, ByteCount ;
                    1426   ; char c, CheckSum, ReadCheckSum, HeaderType ;
                    1427   ; char *RamPtr ;                          // pointer to Memory where downloaded program will be stored
                    1428   ; LoadFailed = 0 ;                        //assume LOAD operation will pass
00001068  7E00      1429          moveq     #0,D7
                    1430   ; AddressFail = 0 ;
0000106A  42AE FFEA 1431          clr.l     -22(A6)
                    1432   ; Echo = 0 ;                              // don't echo S records during download
0000106E  42B9 0B00 1433          clr.l     _Echo.L
00001072  00E0      
                    1434   ; printf("\r\nUse HyperTerminal to Send Text File (.hex)\r\n") ;
00001074  4879 0000 1435          pea       @m68kde~2_20.L
00001078  6282      
0000107A  4E94      1436          jsr       (A4)
0000107C  584F      1437          addq.w    #4,A7
                    1438   ; while(1)    {
                    1439   Load_SRecordFile_1:
                    1440   ; CheckSum = 0 ;
0000107E  4212      1441          clr.b     (A2)
                    1442   ; do {
                    1443   Load_SRecordFile_4:
                    1444   ; c = toupper(_getch()) ;
00001080  2F00      1445          move.l    D0,-(A7)
00001082  4EB8 0B68 1446          jsr       __getch
00001086  2200      1447          move.l    D0,D1
00001088  201F      1448          move.l    (A7)+,D0
0000108A  2F01      1449          move.l    D1,-(A7)
0000108C  4EB9 0000 1450          jsr       _toupper
00001090  56EC      
00001092  584F      1451          addq.w    #4,A7
00001094  1C00      1452          move.b    D0,D6
                    1453   ; if(c == 0x1b )      // if break
00001096  0C06 001B 1454          cmp.b     #27,D6
0000109A  6604      1455          bne.s     Load_SRecordFile_6
                    1456   ; return;
0000109C  6000 0132 1457          bra       Load_SRecordFile_8
                    1458   Load_SRecordFile_6:
000010A0  0C06 0053 1459          cmp.b     #83,D6
000010A4  66DA      1460          bne       Load_SRecordFile_4
                    1461   ; }while(c != (char)('S'));   // wait for S start of header
                    1462   ; HeaderType = _getch() ;
000010A6  4EB8 0B68 1463          jsr       __getch
000010AA  1600      1464          move.b    D0,D3
                    1465   ; if(HeaderType == (char)('0') || HeaderType == (char)('5'))       // ignore s0, s5 records
000010AC  0C03 0030 1466          cmp.b     #48,D3
000010B0  6706      1467          beq.s     Load_SRecordFile_11
000010B2  0C03 0035 1468          cmp.b     #53,D3
000010B6  6604      1469          bne.s     Load_SRecordFile_9
                    1470   Load_SRecordFile_11:
                    1471   ; continue ;
000010B8  6000 00D2 1472          bra       Load_SRecordFile_23
                    1473   Load_SRecordFile_9:
                    1474   ; if(HeaderType >= (char)('7'))
000010BC  0C03 0037 1475          cmp.b     #55,D3
000010C0  6D04      1476          blt.s     Load_SRecordFile_12
                    1477   ; break ;                 // end load on s7,s8,s9 records
000010C2  6000 00CC 1478          bra       Load_SRecordFile_3
                    1479   Load_SRecordFile_12:
                    1480   ; // get the bytecount
                    1481   ; ByteCount = Get2HexDigits(&CheckSum) ;
000010C6  2F0A      1482          move.l    A2,-(A7)
000010C8  4E93      1483          jsr       (A3)
000010CA  584F      1484          addq.w    #4,A7
000010CC  2D40 FFF6 1485          move.l    D0,-10(A6)
                    1486   ; // get the address, 4 digits for s1, 6 digits for s2, and 8 digits for s3 record
                    1487   ; if(HeaderType == (char)('1')) {
000010D0  0C03 0031 1488          cmp.b     #49,D3
000010D4  660E      1489          bne.s     Load_SRecordFile_14
                    1490   ; AddressSize = 2 ;       // 2 byte address
000010D6  7A02      1491          moveq     #2,D5
                    1492   ; Address = Get4HexDigits(&CheckSum);
000010D8  2F0A      1493          move.l    A2,-(A7)
000010DA  4EB8 0C58 1494          jsr       _Get4HexDigits
000010DE  584F      1495          addq.w    #4,A7
000010E0  2800      1496          move.l    D0,D4
000010E2  6020      1497          bra.s     Load_SRecordFile_17
                    1498   Load_SRecordFile_14:
                    1499   ; }
                    1500   ; else if (HeaderType == (char)('2')) {
000010E4  0C03 0032 1501          cmp.b     #50,D3
000010E8  660E      1502          bne.s     Load_SRecordFile_16
                    1503   ; AddressSize = 3 ;       // 3 byte address
000010EA  7A03      1504          moveq     #3,D5
                    1505   ; Address = Get6HexDigits(&CheckSum) ;
000010EC  2F0A      1506          move.l    A2,-(A7)
000010EE  4EB8 0C7E 1507          jsr       _Get6HexDigits
000010F2  584F      1508          addq.w    #4,A7
000010F4  2800      1509          move.l    D0,D4
000010F6  600C      1510          bra.s     Load_SRecordFile_17
                    1511   Load_SRecordFile_16:
                    1512   ; }
                    1513   ; else    {
                    1514   ; AddressSize = 4 ;       // 4 byte address
000010F8  7A04      1515          moveq     #4,D5
                    1516   ; Address = Get8HexDigits(&CheckSum) ;
000010FA  2F0A      1517          move.l    A2,-(A7)
000010FC  4EB8 0CA4 1518          jsr       _Get8HexDigits
00001100  584F      1519          addq.w    #4,A7
00001102  2800      1520          move.l    D0,D4
                    1521   Load_SRecordFile_17:
                    1522   ; }
                    1523   ; RamPtr = (char *)(Address) ;                            // point to download area
00001104  2D44 FFFC 1524          move.l    D4,-4(A6)
                    1525   ; NumDataBytesToRead = ByteCount - AddressSize - 1 ;
00001108  202E FFF6 1526          move.l    -10(A6),D0
0000110C  9085      1527          sub.l     D5,D0
0000110E  5380      1528          subq.l    #1,D0
00001110  2D40 FFE2 1529          move.l    D0,-30(A6)
                    1530   ; for(i = 0; i < NumDataBytesToRead; i ++) {     // read in remaining data bytes (ignore address and checksum at the end
00001114  4282      1531          clr.l     D2
                    1532   Load_SRecordFile_18:
00001116  B4AE FFE2 1533          cmp.l     -30(A6),D2
0000111A  6C1E      1534          bge.s     Load_SRecordFile_20
                    1535   ; DataByte = Get2HexDigits(&CheckSum) ;
0000111C  2F0A      1536          move.l    A2,-(A7)
0000111E  4E93      1537          jsr       (A3)
00001120  584F      1538          addq.w    #4,A7
00001122  2D40 FFDE 1539          move.l    D0,-34(A6)
                    1540   ; *RamPtr++ = DataByte ;                      // store downloaded byte in Ram at specified address
00001126  202E FFDE 1541          move.l    -34(A6),D0
0000112A  206E FFFC 1542          move.l    -4(A6),A0
0000112E  52AE FFFC 1543          addq.l    #1,-4(A6)
00001132  1080      1544          move.b    D0,(A0)
                    1545   ; ByteTotal++;
00001134  524D      1546          addq.w    #1,A5
00001136  5282      1547          addq.l    #1,D2
00001138  60DC      1548          bra       Load_SRecordFile_18
                    1549   Load_SRecordFile_20:
                    1550   ; }
                    1551   ; // checksum is the 1's complement of the sum of all data pairs following the bytecount, i.e. it includes the address and the data itself
                    1552   ; ReadCheckSum = Get2HexDigits(0) ;
0000113A  42A7      1553          clr.l     -(A7)
0000113C  4E93      1554          jsr       (A3)
0000113E  584F      1555          addq.w    #4,A7
00001140  1D40 FFFB 1556          move.b    D0,-5(A6)
                    1557   ; if((~CheckSum&0Xff) != (ReadCheckSum&0Xff))   {
00001144  1012      1558          move.b    (A2),D0
00001146  4600      1559          not.b     D0
00001148  4880      1560          ext.w     D0
0000114A  C07C 00FF 1561          and.w     #255,D0
0000114E  122E FFFB 1562          move.b    -5(A6),D1
00001152  4881      1563          ext.w     D1
00001154  C27C 00FF 1564          and.w     #255,D1
00001158  B041      1565          cmp.w     D1,D0
0000115A  6708      1566          beq.s     Load_SRecordFile_21
                    1567   ; LoadFailed = 1 ;
0000115C  7E01      1568          moveq     #1,D7
                    1569   ; FailedAddress = Address ;
0000115E  2D44 FFE6 1570          move.l    D4,-26(A6)
                    1571   ; break;
00001162  602C      1572          bra.s     Load_SRecordFile_3
                    1573   Load_SRecordFile_21:
                    1574   ; }
                    1575   ; SRecordCount++ ;
00001164  52AE FFEE 1576          addq.l    #1,-18(A6)
                    1577   ; // display feedback on progress
                    1578   ; if(SRecordCount % 25 == 0)
00001168  2F2E FFEE 1579          move.l    -18(A6),-(A7)
0000116C  4878 0019 1580          pea       25
00001170  4EB9 0000 1581          jsr       LDIV
00001174  557A      
00001176  202F 0004 1582          move.l    4(A7),D0
0000117A  504F      1583          addq.w    #8,A7
0000117C  4A80      1584          tst.l     D0
0000117E  660C      1585          bne.s     Load_SRecordFile_23
                    1586   ; putchar('.') ;
00001180  4878 002E 1587          pea       46
00001184  4EB9 0000 1588          jsr       _putch
00001188  5646      
0000118A  584F      1589          addq.w    #4,A7
                    1590   Load_SRecordFile_23:
0000118C  6000 FEF0 1591          bra       Load_SRecordFile_1
                    1592   Load_SRecordFile_3:
                    1593   ; }
                    1594   ; if(LoadFailed == 1) {
00001190  0C87 0000 1595          cmp.l     #1,D7
00001194  0001      
00001196  6610      1596          bne.s     Load_SRecordFile_25
                    1597   ; printf("\r\nLoad Failed at Address = [$%08X]\r\n", FailedAddress) ;
00001198  2F2E FFE6 1598          move.l    -26(A6),-(A7)
0000119C  4879 0000 1599          pea       @m68kde~2_21.L
000011A0  62B2      
000011A2  4E94      1600          jsr       (A4)
000011A4  504F      1601          addq.w    #8,A7
000011A6  600C      1602          bra.s     Load_SRecordFile_26
                    1603   Load_SRecordFile_25:
                    1604   ; }
                    1605   ; else
                    1606   ; printf("\r\nSuccess: Downloaded %d bytes\r\n", ByteTotal) ;
000011A8  2F0D      1607          move.l    A5,-(A7)
000011AA  4879 0000 1608          pea       @m68kde~2_22.L
000011AE  62D8      
000011B0  4E94      1609          jsr       (A4)
000011B2  504F      1610          addq.w    #8,A7
                    1611   Load_SRecordFile_26:
                    1612   ; // pause at the end to wait for download to finish transmitting at the end of S8 etc
                    1613   ; for(i = 0; i < 400000; i ++)
000011B4  4282      1614          clr.l     D2
                    1615   Load_SRecordFile_27:
000011B6  0C82 0006 1616          cmp.l     #400000,D2
000011BA  1A80      
000011BC  6C04      1617          bge.s     Load_SRecordFile_29
000011BE  5282      1618          addq.l    #1,D2
000011C0  60F4      1619          bra       Load_SRecordFile_27
                    1620   Load_SRecordFile_29:
                    1621   ; ;
                    1622   ; FlushKeyboard() ;
000011C2  4EB8 0BA6 1623          jsr       _FlushKeyboard
                    1624   ; Echo = 1;
000011C6  23FC 0000 1625          move.l    #1,_Echo.L
000011CA  0001 0B00 
000011CE  00E0      
                    1626   Load_SRecordFile_8:
000011D0  4CDF 3CFC 1627          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
000011D4  4E5E      1628          unlk      A6
000011D6  4E75      1629          rts
                    1630   ; }
                    1631   ; void MemoryChange(void)
                    1632   ; {
                    1633   _MemoryChange:
000011D8  48E7 3820 1634          movem.l   D2/D3/D4/A2,-(A7)
000011DC  45F9 0000 1635          lea       _printf.L,A2
000011E0  5756      
                    1636   ; unsigned char *RamPtr,c ; // pointer to memory
                    1637   ; int Data ;
                    1638   ; printf("\r\nExamine and Change Memory") ;
000011E2  4879 0000 1639          pea       @m68kde~2_23.L
000011E6  62FA      
000011E8  4E92      1640          jsr       (A2)
000011EA  584F      1641          addq.w    #4,A7
                    1642   ; printf("\r\n<ESC> to Stop, <SPACE> to Advance, '-' to Go Back, <DATA> to change") ;
000011EC  4879 0000 1643          pea       @m68kde~2_24.L
000011F0  6316      
000011F2  4E92      1644          jsr       (A2)
000011F4  584F      1645          addq.w    #4,A7
                    1646   ; printf("\r\nEnter Address: ") ;
000011F6  4879 0000 1647          pea       @m68kde~2_25.L
000011FA  635C      
000011FC  4E92      1648          jsr       (A2)
000011FE  584F      1649          addq.w    #4,A7
                    1650   ; RamPtr = Get8HexDigits(0) ;
00001200  42A7      1651          clr.l     -(A7)
00001202  4EB8 0CA4 1652          jsr       _Get8HexDigits
00001206  584F      1653          addq.w    #4,A7
00001208  2600      1654          move.l    D0,D3
                    1655   ; while(1)    {
                    1656   MemoryChange_1:
                    1657   ; printf("\r\n[%08x] : %02x  ", RamPtr, *RamPtr) ;
0000120A  2043      1658          move.l    D3,A0
0000120C  1210      1659          move.b    (A0),D1
0000120E  C2BC 0000 1660          and.l     #255,D1
00001212  00FF      
00001214  2F01      1661          move.l    D1,-(A7)
00001216  2F03      1662          move.l    D3,-(A7)
00001218  4879 0000 1663          pea       @m68kde~2_26.L
0000121C  636E      
0000121E  4E92      1664          jsr       (A2)
00001220  DEFC 000C 1665          add.w     #12,A7
                    1666   ; c = tolower(_getch()) ;
00001224  2F00      1667          move.l    D0,-(A7)
00001226  4EB8 0B68 1668          jsr       __getch
0000122A  2200      1669          move.l    D0,D1
0000122C  201F      1670          move.l    (A7)+,D0
0000122E  2F01      1671          move.l    D1,-(A7)
00001230  4EB9 0000 1672          jsr       _tolower
00001234  5676      
00001236  584F      1673          addq.w    #4,A7
00001238  1400      1674          move.b    D0,D2
                    1675   ; if(c == (char)(0x1b))
0000123A  0C02 001B 1676          cmp.b     #27,D2
0000123E  6604      1677          bne.s     MemoryChange_4
                    1678   ; return ;                                // abort on escape
00001240  6000 0090 1679          bra       MemoryChange_6
                    1680   MemoryChange_4:
                    1681   ; else if((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f')) {  // are we trying to change data at this location by entering a hex char
00001244  0C02 0030 1682          cmp.b     #48,D2
00001248  6506      1683          blo.s     MemoryChange_10
0000124A  0C02 0039 1684          cmp.b     #57,D2
0000124E  6310      1685          bls.s     MemoryChange_9
                    1686   MemoryChange_10:
00001250  0C02 0061 1687          cmp.b     #97,D2
00001254  6500 006E 1688          blo       MemoryChange_7
00001258  0C02 0066 1689          cmp.b     #102,D2
0000125C  6200 0066 1690          bhi       MemoryChange_7
                    1691   MemoryChange_9:
                    1692   ; Data = (xtod(c) << 4) | (xtod(_getch()));
00001260  C4BC 0000 1693          and.l     #255,D2
00001264  00FF      
00001266  2F02      1694          move.l    D2,-(A7)
00001268  4EB8 0BD2 1695          jsr       _xtod
0000126C  584F      1696          addq.w    #4,A7
0000126E  C0BC 0000 1697          and.l     #255,D0
00001272  00FF      
00001274  E980      1698          asl.l     #4,D0
00001276  2F00      1699          move.l    D0,-(A7)
00001278  2F01      1700          move.l    D1,-(A7)
0000127A  4EB8 0B68 1701          jsr       __getch
0000127E  221F      1702          move.l    (A7)+,D1
00001280  2F00      1703          move.l    D0,-(A7)
00001282  4EB8 0BD2 1704          jsr       _xtod
00001286  584F      1705          addq.w    #4,A7
00001288  2200      1706          move.l    D0,D1
0000128A  201F      1707          move.l    (A7)+,D0
0000128C  C2BC 0000 1708          and.l     #255,D1
00001290  00FF      
00001292  8081      1709          or.l      D1,D0
00001294  2800      1710          move.l    D0,D4
                    1711   ; *RamPtr = (char)(Data) ;
00001296  2043      1712          move.l    D3,A0
00001298  1084      1713          move.b    D4,(A0)
                    1714   ; if(*RamPtr != Data) {
0000129A  2043      1715          move.l    D3,A0
0000129C  1010      1716          move.b    (A0),D0
0000129E  C0BC 0000 1717          and.l     #255,D0
000012A2  00FF      
000012A4  B084      1718          cmp.l     D4,D0
000012A6  671A      1719          beq.s     MemoryChange_11
                    1720   ; printf("\r\nWarning Change Failed: Wrote [%02x], Read [%02x]", Data, *RamPtr) ;
000012A8  2043      1721          move.l    D3,A0
000012AA  1210      1722          move.b    (A0),D1
000012AC  C2BC 0000 1723          and.l     #255,D1
000012B0  00FF      
000012B2  2F01      1724          move.l    D1,-(A7)
000012B4  2F04      1725          move.l    D4,-(A7)
000012B6  4879 0000 1726          pea       @m68kde~2_27.L
000012BA  6380      
000012BC  4E92      1727          jsr       (A2)
000012BE  DEFC 000C 1728          add.w     #12,A7
                    1729   MemoryChange_11:
000012C2  6008      1730          bra.s     MemoryChange_13
                    1731   MemoryChange_7:
                    1732   ; }
                    1733   ; }
                    1734   ; else if(c == (char)('-'))
000012C4  0C02 002D 1735          cmp.b     #45,D2
000012C8  6602      1736          bne.s     MemoryChange_13
                    1737   ; RamPtr -= 2 ; ;
000012CA  5583      1738          subq.l    #2,D3
                    1739   MemoryChange_13:
                    1740   ; RamPtr ++ ;
000012CC  5283      1741          addq.l    #1,D3
000012CE  6000 FF3A 1742          bra       MemoryChange_1
                    1743   MemoryChange_6:
000012D2  4CDF 041C 1744          movem.l   (A7)+,D2/D3/D4/A2
000012D6  4E75      1745          rts
                    1746   ; }
                    1747   ; }
                    1748   ; /*******************************************************************
                    1749   ; ** Write a program to SPI Flash Chip from memory and verify by reading back
                    1750   ; ********************************************************************/
                    1751   ; void ProgramFlashChip(void)
                    1752   ; {
                    1753   _ProgramFlashChip:
000012D8  4E75      1754          rts
                    1755   ; //
                    1756   ; // TODO : put your code here to program the 1st 256k of ram (where user program is held at hex 08000000) to SPI flash chip
                    1757   ; // TODO : then verify by reading it back and comparing to memory
                    1758   ; //
                    1759   ; }
                    1760   ; /*************************************************************************
                    1761   ; ** Load a program from SPI Flash Chip and copy to Dram
                    1762   ; **************************************************************************/
                    1763   ; void LoadFromFlashChip(void)
                    1764   ; {
                    1765   _LoadFromFlashChip:
                    1766   ; printf("\r\nLoading Program From SPI Flash....") ;
000012DA  4879 0000 1767          pea       @m68kde~2_28.L
000012DE  63B4      
000012E0  4EB9 0000 1768          jsr       _printf
000012E4  5756      
000012E6  584F      1769          addq.w    #4,A7
000012E8  4E75      1770          rts
                    1771   ; //
                    1772   ; // TODO : put your code here to read 256k of data from SPI flash chip and store in user ram starting at hex 08000000
                    1773   ; //
                    1774   ; }
                    1775   ; // get rid of excess spaces
                    1776   ; void FormatInstructionForTrace(void)
                    1777   ; {
                    1778   _FormatInstructionForTrace:
000012EA  4E56 FF9C 1779          link      A6,#-100
000012EE  48E7 3C20 1780          movem.l   D2/D3/D4/D5/A2,-(A7)
000012F2  45EE FF9C 1781          lea       -100(A6),A2
                    1782   ; unsigned short int i ;
                    1783   ; char c, temp[100], *iptr, *tempptr ;
                    1784   ; for(i=0; i < 100; i++)
000012F6  4244      1785          clr.w     D4
                    1786   FormatInstructionForTrace_1:
000012F8  0C44 0064 1787          cmp.w     #100,D4
000012FC  640E      1788          bhs.s     FormatInstructionForTrace_3
                    1789   ; temp[i] = 0 ;
000012FE  C8BC 0000 1790          and.l     #65535,D4
00001302  FFFF      
00001304  4232 4800 1791          clr.b     0(A2,D4.L)
00001308  5244      1792          addq.w    #1,D4
0000130A  60EC      1793          bra       FormatInstructionForTrace_1
                    1794   FormatInstructionForTrace_3:
                    1795   ; iptr = Instruction ;
0000130C  41F9 0B00 1796          lea       _Instruction.L,A0
00001310  04E2      
00001312  2408      1797          move.l    A0,D2
                    1798   ; tempptr = temp ;
00001314  2A0A      1799          move.l    A2,D5
                    1800   ; do{
                    1801   FormatInstructionForTrace_4:
                    1802   ; c = *iptr++ ;
00001316  2042      1803          move.l    D2,A0
00001318  5282      1804          addq.l    #1,D2
0000131A  1610      1805          move.b    (A0),D3
                    1806   ; *tempptr++ = c ;  // copy chars over
0000131C  2045      1807          move.l    D5,A0
0000131E  5285      1808          addq.l    #1,D5
00001320  1083      1809          move.b    D3,(A0)
                    1810   ; if(c == ' ')  {   // if copied space
00001322  0C03 0020 1811          cmp.b     #32,D3
00001326  6622      1812          bne.s     FormatInstructionForTrace_6
                    1813   ; while(*iptr == ' ') {
                    1814   FormatInstructionForTrace_8:
00001328  2042      1815          move.l    D2,A0
0000132A  1010      1816          move.b    (A0),D0
0000132C  0C00 0020 1817          cmp.b     #32,D0
00001330  660C      1818          bne.s     FormatInstructionForTrace_10
                    1819   ; if(*iptr == 0)  // if end of string then done
00001332  2042      1820          move.l    D2,A0
00001334  1010      1821          move.b    (A0),D0
00001336  6602      1822          bne.s     FormatInstructionForTrace_11
                    1823   ; break ;
00001338  6004      1824          bra.s     FormatInstructionForTrace_10
                    1825   FormatInstructionForTrace_11:
                    1826   ; iptr++ ; // skip over remaining spaces
0000133A  5282      1827          addq.l    #1,D2
0000133C  60EA      1828          bra       FormatInstructionForTrace_8
                    1829   FormatInstructionForTrace_10:
                    1830   ; }
                    1831   ; strcat(tempptr,iptr) ;
0000133E  2F02      1832          move.l    D2,-(A7)
00001340  2F05      1833          move.l    D5,-(A7)
00001342  4EB9 0000 1834          jsr       _strcat
00001346  56D6      
00001348  504F      1835          addq.w    #8,A7
                    1836   FormatInstructionForTrace_6:
0000134A  4A03      1837          tst.b     D3
0000134C  66C8      1838          bne       FormatInstructionForTrace_4
                    1839   ; }
                    1840   ; }while(c != 0) ;
                    1841   ; strcpyInstruction(temp) ;
0000134E  2F0A      1842          move.l    A2,-(A7)
00001350  4EB8 0CE6 1843          jsr       _strcpyInstruction
00001354  584F      1844          addq.w    #4,A7
00001356  4CDF 043C 1845          movem.l   (A7)+,D2/D3/D4/D5/A2
0000135A  4E5E      1846          unlk      A6
0000135C  4E75      1847          rts
                    1848   ; }
                    1849   ; //////////////////////////////////////////////////////////////////////////////////////////////////
                    1850   ; // IMPORTANT
                    1851   ; // TG68 does not support the Native Trace mode of the original 68000 so tracing
                    1852   ; // has to be done with an interrupt (IRQ Level 6)
                    1853   ; //
                    1854   ; // To allow the 68000 to execute one more instruction after each pseudo trace (IRQ6)
                    1855   ; // the IRQ is removed in hardware once the TG68 reads the IRQ autovector (i.e. acknowledges the IRQ)
                    1856   ; //
                    1857   ; // on return from the IRQ service handler, the first access to the user memory program space
                    1858   ; // generates a fresh IRQ (in hardware) to generate a new trace, this allows the tg68 to
                    1859   ; // execute one more new instruction (without it the TG68 would trace on the same instruction
                    1860   ; // each time and not after the next one). It also means it doesn't simgle step outside the user
                    1861   ; // program area
                    1862   ; //
                    1863   ; // The bottom line is the Trace handler, which includes the Dump registers below
                    1864   ; // cannot access the user memory to display for example the Instruction Opcode or to disassemble etc
                    1865   ; // as this would lead to a new IRQ being reset and the TG68 would trace on same instruction
                    1866   ; // NOT SURE THIS IS TRUE NOW THAT TRACE HANDLER HAS BEEN MODIVIED TO NOT AUTOMATICALLY GENERATE A TRACE EXCEPTION
                    1867   ; // INSTEAD IT IS DONE IN THE 'N' COMMAND FOR NEXT
                    1868   ; /////////////////////////////////////////////////////////////////////////////////////////////////////
                    1869   ; void DumpRegisters()
                    1870   ; {
                    1871   _DumpRegisters:
0000135E  48E7 3F3C 1872          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00001362  45F9 0000 1873          lea       _putch.L,A2
00001366  5646      
00001368  47F9 0000 1874          lea       _printf.L,A3
0000136C  5756      
0000136E  49F9 0B00 1875          lea       _SR.L,A4
00001372  012C      
00001374  4BF9 0B00 1876          lea       _WatchPointString.L,A5
00001378  01C2      
                    1877   ; short i, x, j, k ;
                    1878   ; unsigned char c, *BytePointer;
                    1879   ; // buld up strings for displaying watchpoints
                    1880   ; for(x = 0; x < (short)(8); x++)
0000137A  4242      1881          clr.w     D2
                    1882   DumpRegisters_1:
0000137C  0C42 0008 1883          cmp.w     #8,D2
00001380  6C00 01C6 1884          bge       DumpRegisters_3
                    1885   ; {
                    1886   ; if(WatchPointSetOrCleared[x] == 1)
00001384  48C2      1887          ext.l     D2
00001386  2002      1888          move.l    D2,D0
00001388  E588      1889          lsl.l     #2,D0
0000138A  41F9 0B00 1890          lea       _WatchPointSetOrCleared.L,A0
0000138E  01A2      
00001390  2030 0800 1891          move.l    0(A0,D0.L),D0
00001394  0C80 0000 1892          cmp.l     #1,D0
00001398  0001      
0000139A  6600 0186 1893          bne       DumpRegisters_4
                    1894   ; {
                    1895   ; sprintf(WatchPointString[x], "$%08X  ", WatchPointAddress[x]) ;
0000139E  48C2      1896          ext.l     D2
000013A0  2202      1897          move.l    D2,D1
000013A2  E589      1898          lsl.l     #2,D1
000013A4  41F9 0B00 1899          lea       _WatchPointAddress.L,A0
000013A8  0182      
000013AA  2F30 1800 1900          move.l    0(A0,D1.L),-(A7)
000013AE  4879 0000 1901          pea       @m68kde~2_29.L
000013B2  63DA      
000013B4  220D      1902          move.l    A5,D1
000013B6  48C2      1903          ext.l     D2
000013B8  2F00      1904          move.l    D0,-(A7)
000013BA  2002      1905          move.l    D2,D0
000013BC  C1FC 0064 1906          muls      #100,D0
000013C0  D280      1907          add.l     D0,D1
000013C2  201F      1908          move.l    (A7)+,D0
000013C4  2F01      1909          move.l    D1,-(A7)
000013C6  4EB9 0000 1910          jsr       _sprintf
000013CA  56A2      
000013CC  DEFC 000C 1911          add.w     #12,A7
                    1912   ; BytePointer = (char *)(WatchPointAddress[x]) ;
000013D0  48C2      1913          ext.l     D2
000013D2  2002      1914          move.l    D2,D0
000013D4  E588      1915          lsl.l     #2,D0
000013D6  41F9 0B00 1916          lea       _WatchPointAddress.L,A0
000013DA  0182      
000013DC  2A30 0800 1917          move.l    0(A0,D0.L),D5
                    1918   ; for(j = 0; j < (short)(16); j+=2)
000013E0  4243      1919          clr.w     D3
                    1920   DumpRegisters_6:
000013E2  0C43 0010 1921          cmp.w     #16,D3
000013E6  6C00 0082 1922          bge       DumpRegisters_8
                    1923   ; {
                    1924   ; for(k = 0; k < (short)(2); k++)
000013EA  4246      1925          clr.w     D6
                    1926   DumpRegisters_9:
000013EC  0C46 0002 1927          cmp.w     #2,D6
000013F0  6C00 0052 1928          bge       DumpRegisters_11
                    1929   ; {
                    1930   ; sprintf(TempString, "%02X", BytePointer[j+k]) ;
000013F4  2045      1931          move.l    D5,A0
000013F6  48C3      1932          ext.l     D3
000013F8  2203      1933          move.l    D3,D1
000013FA  48C6      1934          ext.l     D6
000013FC  D286      1935          add.l     D6,D1
000013FE  1230 1800 1936          move.b    0(A0,D1.L),D1
00001402  C2BC 0000 1937          and.l     #255,D1
00001406  00FF      
00001408  2F01      1938          move.l    D1,-(A7)
0000140A  4879 0000 1939          pea       @m68kde~2_14.L
0000140E  620A      
00001410  4879 0B00 1940          pea       _TempString.L
00001414  0546      
00001416  4EB9 0000 1941          jsr       _sprintf
0000141A  56A2      
0000141C  DEFC 000C 1942          add.w     #12,A7
                    1943   ; strcat(WatchPointString[x], TempString) ;
00001420  4879 0B00 1944          pea       _TempString.L
00001424  0546      
00001426  220D      1945          move.l    A5,D1
00001428  48C2      1946          ext.l     D2
0000142A  2F00      1947          move.l    D0,-(A7)
0000142C  2002      1948          move.l    D2,D0
0000142E  C1FC 0064 1949          muls      #100,D0
00001432  D280      1950          add.l     D0,D1
00001434  201F      1951          move.l    (A7)+,D0
00001436  2F01      1952          move.l    D1,-(A7)
00001438  4EB9 0000 1953          jsr       _strcat
0000143C  56D6      
0000143E  504F      1954          addq.w    #8,A7
00001440  5246      1955          addq.w    #1,D6
00001442  60A8      1956          bra       DumpRegisters_9
                    1957   DumpRegisters_11:
                    1958   ; }
                    1959   ; strcat(WatchPointString[x]," ") ;
00001444  4879 0000 1960          pea       @m68kde~2_30.L
00001448  63E2      
0000144A  220D      1961          move.l    A5,D1
0000144C  48C2      1962          ext.l     D2
0000144E  2F00      1963          move.l    D0,-(A7)
00001450  2002      1964          move.l    D2,D0
00001452  C1FC 0064 1965          muls      #100,D0
00001456  D280      1966          add.l     D0,D1
00001458  201F      1967          move.l    (A7)+,D0
0000145A  2F01      1968          move.l    D1,-(A7)
0000145C  4EB9 0000 1969          jsr       _strcat
00001460  56D6      
00001462  504F      1970          addq.w    #8,A7
00001464  5443      1971          addq.w    #2,D3
00001466  6000 FF7A 1972          bra       DumpRegisters_6
                    1973   DumpRegisters_8:
                    1974   ; }
                    1975   ; strcat(WatchPointString[x], "  ") ;
0000146A  4879 0000 1976          pea       @m68kde~2_15.L
0000146E  6210      
00001470  220D      1977          move.l    A5,D1
00001472  48C2      1978          ext.l     D2
00001474  2F00      1979          move.l    D0,-(A7)
00001476  2002      1980          move.l    D2,D0
00001478  C1FC 0064 1981          muls      #100,D0
0000147C  D280      1982          add.l     D0,D1
0000147E  201F      1983          move.l    (A7)+,D0
00001480  2F01      1984          move.l    D1,-(A7)
00001482  4EB9 0000 1985          jsr       _strcat
00001486  56D6      
00001488  504F      1986          addq.w    #8,A7
                    1987   ; BytePointer = (char *)(WatchPointAddress[x]) ;
0000148A  48C2      1988          ext.l     D2
0000148C  2002      1989          move.l    D2,D0
0000148E  E588      1990          lsl.l     #2,D0
00001490  41F9 0B00 1991          lea       _WatchPointAddress.L,A0
00001494  0182      
00001496  2A30 0800 1992          move.l    0(A0,D0.L),D5
                    1993   ; for(j = 0; j < (short)(16); j++)
0000149A  4243      1994          clr.w     D3
                    1995   DumpRegisters_12:
0000149C  0C43 0010 1996          cmp.w     #16,D3
000014A0  6C00 007E 1997          bge       DumpRegisters_14
                    1998   ; {
                    1999   ; c = ((char)(BytePointer[j]) & 0x7f) ;
000014A4  2045      2000          move.l    D5,A0
000014A6  48C3      2001          ext.l     D3
000014A8  1030 3800 2002          move.b    0(A0,D3.L),D0
000014AC  C03C 007F 2003          and.b     #127,D0
000014B0  1E00      2004          move.b    D0,D7
                    2005   ; if((c > (char)(0x7f)) || (c < (char)(' ')))
000014B2  0C07 007F 2006          cmp.b     #127,D7
000014B6  6206      2007          bhi.s     DumpRegisters_17
000014B8  0C07 0020 2008          cmp.b     #32,D7
000014BC  6416      2009          bhs.s     DumpRegisters_15
                    2010   DumpRegisters_17:
                    2011   ; sprintf(TempString, ".") ;
000014BE  4879 0000 2012          pea       @m68kde~2_31.L
000014C2  63E4      
000014C4  4879 0B00 2013          pea       _TempString.L
000014C8  0546      
000014CA  4EB9 0000 2014          jsr       _sprintf
000014CE  56A2      
000014D0  504F      2015          addq.w    #8,A7
000014D2  6026      2016          bra.s     DumpRegisters_16
                    2017   DumpRegisters_15:
                    2018   ; else
                    2019   ; sprintf(TempString, "%c", BytePointer[j]) ;
000014D4  2045      2020          move.l    D5,A0
000014D6  48C3      2021          ext.l     D3
000014D8  1230 3800 2022          move.b    0(A0,D3.L),D1
000014DC  C2BC 0000 2023          and.l     #255,D1
000014E0  00FF      
000014E2  2F01      2024          move.l    D1,-(A7)
000014E4  4879 0000 2025          pea       @m68kde~2_32.L
000014E8  63E6      
000014EA  4879 0B00 2026          pea       _TempString.L
000014EE  0546      
000014F0  4EB9 0000 2027          jsr       _sprintf
000014F4  56A2      
000014F6  DEFC 000C 2028          add.w     #12,A7
                    2029   DumpRegisters_16:
                    2030   ; strcat(WatchPointString[x], TempString) ;
000014FA  4879 0B00 2031          pea       _TempString.L
000014FE  0546      
00001500  220D      2032          move.l    A5,D1
00001502  48C2      2033          ext.l     D2
00001504  2F00      2034          move.l    D0,-(A7)
00001506  2002      2035          move.l    D2,D0
00001508  C1FC 0064 2036          muls      #100,D0
0000150C  D280      2037          add.l     D0,D1
0000150E  201F      2038          move.l    (A7)+,D0
00001510  2F01      2039          move.l    D1,-(A7)
00001512  4EB9 0000 2040          jsr       _strcat
00001516  56D6      
00001518  504F      2041          addq.w    #8,A7
0000151A  5243      2042          addq.w    #1,D3
0000151C  6000 FF7E 2043          bra       DumpRegisters_12
                    2044   DumpRegisters_14:
00001520  6020      2045          bra.s     DumpRegisters_5
                    2046   DumpRegisters_4:
                    2047   ; }
                    2048   ; }
                    2049   ; else
                    2050   ; strcpy(WatchPointString[x], "") ;
00001522  4879 0000 2051          pea       @m68kde~2_33.L
00001526  63EA      
00001528  220D      2052          move.l    A5,D1
0000152A  48C2      2053          ext.l     D2
0000152C  2F00      2054          move.l    D0,-(A7)
0000152E  2002      2055          move.l    D2,D0
00001530  C1FC 0064 2056          muls      #100,D0
00001534  D280      2057          add.l     D0,D1
00001536  201F      2058          move.l    (A7)+,D0
00001538  2F01      2059          move.l    D1,-(A7)
0000153A  4EB9 0000 2060          jsr       _strcpy
0000153E  5558      
00001540  504F      2061          addq.w    #8,A7
                    2062   DumpRegisters_5:
00001542  5242      2063          addq.w    #1,D2
00001544  6000 FE36 2064          bra       DumpRegisters_1
                    2065   DumpRegisters_3:
                    2066   ; }
                    2067   ; printf("\r\n\r\n D0 = $%08X  A0 = $%08X",d0,a0) ;
00001548  2F39 0B00 2068          move.l    _a0.L,-(A7)
0000154C  0104      
0000154E  2F39 0B00 2069          move.l    _d0.L,-(A7)
00001552  00E4      
00001554  4879 0000 2070          pea       @m68kde~2_34.L
00001558  63EC      
0000155A  4E93      2071          jsr       (A3)
0000155C  DEFC 000C 2072          add.w     #12,A7
                    2073   ; printf("\r\n D1 = $%08X  A1 = $%08X",d1,a1) ;
00001560  2F39 0B00 2074          move.l    _a1.L,-(A7)
00001564  0108      
00001566  2F39 0B00 2075          move.l    _d1.L,-(A7)
0000156A  00E8      
0000156C  4879 0000 2076          pea       @m68kde~2_35.L
00001570  6408      
00001572  4E93      2077          jsr       (A3)
00001574  DEFC 000C 2078          add.w     #12,A7
                    2079   ; printf("\r\n D2 = $%08X  A2 = $%08X",d2,a2) ;
00001578  2F39 0B00 2080          move.l    _a2.L,-(A7)
0000157C  010C      
0000157E  2F39 0B00 2081          move.l    _d2.L,-(A7)
00001582  00EC      
00001584  4879 0000 2082          pea       @m68kde~2_36.L
00001588  6422      
0000158A  4E93      2083          jsr       (A3)
0000158C  DEFC 000C 2084          add.w     #12,A7
                    2085   ; printf("\r\n D3 = $%08X  A3 = $%08X",d3,a3) ;
00001590  2F39 0B00 2086          move.l    _a3.L,-(A7)
00001594  0110      
00001596  2F39 0B00 2087          move.l    _d3.L,-(A7)
0000159A  00F0      
0000159C  4879 0000 2088          pea       @m68kde~2_37.L
000015A0  643C      
000015A2  4E93      2089          jsr       (A3)
000015A4  DEFC 000C 2090          add.w     #12,A7
                    2091   ; printf("\r\n D4 = $%08X  A4 = $%08X",d4,a4) ;
000015A8  2F39 0B00 2092          move.l    _a4.L,-(A7)
000015AC  0114      
000015AE  2F39 0B00 2093          move.l    _d4.L,-(A7)
000015B2  00F4      
000015B4  4879 0000 2094          pea       @m68kde~2_38.L
000015B8  6456      
000015BA  4E93      2095          jsr       (A3)
000015BC  DEFC 000C 2096          add.w     #12,A7
                    2097   ; printf("\r\n D5 = $%08X  A5 = $%08X",d5,a5) ;
000015C0  2F39 0B00 2098          move.l    _a5.L,-(A7)
000015C4  0118      
000015C6  2F39 0B00 2099          move.l    _d5.L,-(A7)
000015CA  00F8      
000015CC  4879 0000 2100          pea       @m68kde~2_39.L
000015D0  6470      
000015D2  4E93      2101          jsr       (A3)
000015D4  DEFC 000C 2102          add.w     #12,A7
                    2103   ; printf("\r\n D6 = $%08X  A6 = $%08X",d6,a6) ;
000015D8  2F39 0B00 2104          move.l    _a6.L,-(A7)
000015DC  011C      
000015DE  2F39 0B00 2105          move.l    _d6.L,-(A7)
000015E2  00FC      
000015E4  4879 0000 2106          pea       @m68kde~2_40.L
000015E8  648A      
000015EA  4E93      2107          jsr       (A3)
000015EC  DEFC 000C 2108          add.w     #12,A7
                    2109   ; printf("\r\n D7 = $%08X  A7 = $%08X",d7,((SR & (unsigned short int)(0x2000)) == ((unsigned short int)(0x2000))) ? SSP : USP) ;
000015F0  3214      2110          move.w    (A4),D1
000015F2  C27C 2000 2111          and.w     #8192,D1
000015F6  0C41 2000 2112          cmp.w     #8192,D1
000015FA  6608      2113          bne.s     DumpRegisters_18
000015FC  2239 0B00 2114          move.l    _SSP.L,D1
00001600  0124      
00001602  6006      2115          bra.s     DumpRegisters_19
                    2116   DumpRegisters_18:
00001604  2239 0B00 2117          move.l    _USP.L,D1
00001608  0128      
                    2118   DumpRegisters_19:
0000160A  2F01      2119          move.l    D1,-(A7)
0000160C  2F39 0B00 2120          move.l    _d7.L,-(A7)
00001610  0100      
00001612  4879 0000 2121          pea       @m68kde~2_41.L
00001616  64A4      
00001618  4E93      2122          jsr       (A3)
0000161A  DEFC 000C 2123          add.w     #12,A7
                    2124   ; printf("\r\n\r\nUSP = $%08X  (A7) User SP", USP ) ;
0000161E  2F39 0B00 2125          move.l    _USP.L,-(A7)
00001622  0128      
00001624  4879 0000 2126          pea       @m68kde~2_42.L
00001628  64BE      
0000162A  4E93      2127          jsr       (A3)
0000162C  504F      2128          addq.w    #8,A7
                    2129   ; printf("\r\nSSP = $%08X  (A7) Supervisor SP", SSP) ;
0000162E  2F39 0B00 2130          move.l    _SSP.L,-(A7)
00001632  0124      
00001634  4879 0000 2131          pea       @m68kde~2_43.L
00001638  64DC      
0000163A  4E93      2132          jsr       (A3)
0000163C  504F      2133          addq.w    #8,A7
                    2134   ; printf("\r\n SR = $%04X   ",SR) ;
0000163E  3214      2135          move.w    (A4),D1
00001640  C2BC 0000 2136          and.l     #65535,D1
00001644  FFFF      
00001646  2F01      2137          move.l    D1,-(A7)
00001648  4879 0000 2138          pea       @m68kde~2_44.L
0000164C  64FE      
0000164E  4E93      2139          jsr       (A3)
00001650  504F      2140          addq.w    #8,A7
                    2141   ; // display the status word in characters etc.
                    2142   ; printf("   [") ;
00001652  4879 0000 2143          pea       @m68kde~2_45.L
00001656  6510      
00001658  4E93      2144          jsr       (A3)
0000165A  584F      2145          addq.w    #4,A7
                    2146   ; if((SR & (unsigned short int)(0x8000)) == (unsigned short int)(0x8000)) putchar('T') ; else putchar('-') ;      // Trace bit(bit 15)
0000165C  3014      2147          move.w    (A4),D0
0000165E  C07C 8000 2148          and.w     #32768,D0
00001662  0C40 8000 2149          cmp.w     #32768,D0
00001666  660A      2150          bne.s     DumpRegisters_20
00001668  4878 0054 2151          pea       84
0000166C  4E92      2152          jsr       (A2)
0000166E  584F      2153          addq.w    #4,A7
00001670  6008      2154          bra.s     DumpRegisters_21
                    2155   DumpRegisters_20:
00001672  4878 002D 2156          pea       45
00001676  4E92      2157          jsr       (A2)
00001678  584F      2158          addq.w    #4,A7
                    2159   DumpRegisters_21:
                    2160   ; if((SR & (unsigned short int)(0x2000)) == (unsigned short int)(0x2000)) putchar('S') ; else putchar('U') ;      // supervisor bit  (bit 13)
0000167A  3014      2161          move.w    (A4),D0
0000167C  C07C 2000 2162          and.w     #8192,D0
00001680  0C40 2000 2163          cmp.w     #8192,D0
00001684  660A      2164          bne.s     DumpRegisters_22
00001686  4878 0053 2165          pea       83
0000168A  4E92      2166          jsr       (A2)
0000168C  584F      2167          addq.w    #4,A7
0000168E  6008      2168          bra.s     DumpRegisters_23
                    2169   DumpRegisters_22:
00001690  4878 0055 2170          pea       85
00001694  4E92      2171          jsr       (A2)
00001696  584F      2172          addq.w    #4,A7
                    2173   DumpRegisters_23:
                    2174   ; if((SR & (unsigned short int)(0x0400)) == (unsigned short int)(0x0400)) putchar('1') ; else putchar('0') ;      // IRQ2 Bit (bit 10)
00001698  3014      2175          move.w    (A4),D0
0000169A  C07C 0400 2176          and.w     #1024,D0
0000169E  0C40 0400 2177          cmp.w     #1024,D0
000016A2  660A      2178          bne.s     DumpRegisters_24
000016A4  4878 0031 2179          pea       49
000016A8  4E92      2180          jsr       (A2)
000016AA  584F      2181          addq.w    #4,A7
000016AC  6008      2182          bra.s     DumpRegisters_25
                    2183   DumpRegisters_24:
000016AE  4878 0030 2184          pea       48
000016B2  4E92      2185          jsr       (A2)
000016B4  584F      2186          addq.w    #4,A7
                    2187   DumpRegisters_25:
                    2188   ; if((SR & (unsigned short int)(0x0200)) == (unsigned short int)(0x0200)) putchar('1') ; else putchar('0') ;      // IRQ1 Bit (bit 9)
000016B6  3014      2189          move.w    (A4),D0
000016B8  C07C 0200 2190          and.w     #512,D0
000016BC  0C40 0200 2191          cmp.w     #512,D0
000016C0  660A      2192          bne.s     DumpRegisters_26
000016C2  4878 0031 2193          pea       49
000016C6  4E92      2194          jsr       (A2)
000016C8  584F      2195          addq.w    #4,A7
000016CA  6008      2196          bra.s     DumpRegisters_27
                    2197   DumpRegisters_26:
000016CC  4878 0030 2198          pea       48
000016D0  4E92      2199          jsr       (A2)
000016D2  584F      2200          addq.w    #4,A7
                    2201   DumpRegisters_27:
                    2202   ; if((SR & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100)) putchar('1') ; else putchar('0') ;      // IRQ0 Bit (bit 8)
000016D4  3014      2203          move.w    (A4),D0
000016D6  C07C 0100 2204          and.w     #256,D0
000016DA  0C40 0100 2205          cmp.w     #256,D0
000016DE  660A      2206          bne.s     DumpRegisters_28
000016E0  4878 0031 2207          pea       49
000016E4  4E92      2208          jsr       (A2)
000016E6  584F      2209          addq.w    #4,A7
000016E8  6008      2210          bra.s     DumpRegisters_29
                    2211   DumpRegisters_28:
000016EA  4878 0030 2212          pea       48
000016EE  4E92      2213          jsr       (A2)
000016F0  584F      2214          addq.w    #4,A7
                    2215   DumpRegisters_29:
                    2216   ; if((SR & (unsigned short int)(0x0010)) == (unsigned short int)(0x0010)) putchar('X') ; else putchar('-') ;      // X Bit (bit 4)
000016F2  3014      2217          move.w    (A4),D0
000016F4  C07C 0010 2218          and.w     #16,D0
000016F8  0C40 0010 2219          cmp.w     #16,D0
000016FC  660A      2220          bne.s     DumpRegisters_30
000016FE  4878 0058 2221          pea       88
00001702  4E92      2222          jsr       (A2)
00001704  584F      2223          addq.w    #4,A7
00001706  6008      2224          bra.s     DumpRegisters_31
                    2225   DumpRegisters_30:
00001708  4878 002D 2226          pea       45
0000170C  4E92      2227          jsr       (A2)
0000170E  584F      2228          addq.w    #4,A7
                    2229   DumpRegisters_31:
                    2230   ; if((SR & (unsigned short int)(0x0008)) == (unsigned short int)(0x0008)) putchar('N') ; else putchar('-') ;      // N Bit (bit 3)
00001710  3014      2231          move.w    (A4),D0
00001712  C07C 0008 2232          and.w     #8,D0
00001716  0C40 0008 2233          cmp.w     #8,D0
0000171A  660A      2234          bne.s     DumpRegisters_32
0000171C  4878 004E 2235          pea       78
00001720  4E92      2236          jsr       (A2)
00001722  584F      2237          addq.w    #4,A7
00001724  6008      2238          bra.s     DumpRegisters_33
                    2239   DumpRegisters_32:
00001726  4878 002D 2240          pea       45
0000172A  4E92      2241          jsr       (A2)
0000172C  584F      2242          addq.w    #4,A7
                    2243   DumpRegisters_33:
                    2244   ; if((SR & (unsigned short int)(0x0004)) == (unsigned short int)(0x0004)) putchar('Z') ; else putchar('-') ;      // Z Bit (bit 2)
0000172E  3014      2245          move.w    (A4),D0
00001730  C07C 0004 2246          and.w     #4,D0
00001734  0C40 0004 2247          cmp.w     #4,D0
00001738  660A      2248          bne.s     DumpRegisters_34
0000173A  4878 005A 2249          pea       90
0000173E  4E92      2250          jsr       (A2)
00001740  584F      2251          addq.w    #4,A7
00001742  6008      2252          bra.s     DumpRegisters_35
                    2253   DumpRegisters_34:
00001744  4878 002D 2254          pea       45
00001748  4E92      2255          jsr       (A2)
0000174A  584F      2256          addq.w    #4,A7
                    2257   DumpRegisters_35:
                    2258   ; if((SR & (unsigned short int)(0x0002)) == (unsigned short int)(0x0002)) putchar('V') ; else putchar('-') ;      // V Bit (bit 1)
0000174C  3014      2259          move.w    (A4),D0
0000174E  C07C 0002 2260          and.w     #2,D0
00001752  0C40 0002 2261          cmp.w     #2,D0
00001756  660A      2262          bne.s     DumpRegisters_36
00001758  4878 0056 2263          pea       86
0000175C  4E92      2264          jsr       (A2)
0000175E  584F      2265          addq.w    #4,A7
00001760  6008      2266          bra.s     DumpRegisters_37
                    2267   DumpRegisters_36:
00001762  4878 002D 2268          pea       45
00001766  4E92      2269          jsr       (A2)
00001768  584F      2270          addq.w    #4,A7
                    2271   DumpRegisters_37:
                    2272   ; if((SR & (unsigned short int)(0x0001)) == (unsigned short int)(0x0001)) putchar('C') ; else putchar('-') ;      // C Bit (bit 0)
0000176A  3014      2273          move.w    (A4),D0
0000176C  C07C 0001 2274          and.w     #1,D0
00001770  0C40 0001 2275          cmp.w     #1,D0
00001774  660A      2276          bne.s     DumpRegisters_38
00001776  4878 0043 2277          pea       67
0000177A  4E92      2278          jsr       (A2)
0000177C  584F      2279          addq.w    #4,A7
0000177E  6008      2280          bra.s     DumpRegisters_39
                    2281   DumpRegisters_38:
00001780  4878 002D 2282          pea       45
00001784  4E92      2283          jsr       (A2)
00001786  584F      2284          addq.w    #4,A7
                    2285   DumpRegisters_39:
                    2286   ; putchar(']') ;
00001788  4878 005D 2287          pea       93
0000178C  4E92      2288          jsr       (A2)
0000178E  584F      2289          addq.w    #4,A7
                    2290   ; printf("\r\n PC = $%08X  ", PC) ;
00001790  2F39 0B00 2291          move.l    _PC.L,-(A7)
00001794  0120      
00001796  4879 0000 2292          pea       @m68kde~2_46.L
0000179A  6516      
0000179C  4E93      2293          jsr       (A3)
0000179E  504F      2294          addq.w    #8,A7
                    2295   ; if(*(unsigned short int *)(PC) != 0x4e4e)   {
000017A0  2039 0B00 2296          move.l    _PC.L,D0
000017A4  0120      
000017A6  2040      2297          move.l    D0,A0
000017A8  3010      2298          move.w    (A0),D0
000017AA  0C40 4E4E 2299          cmp.w     #20046,D0
000017AE  6724      2300          beq.s     DumpRegisters_40
                    2301   ; DisassembleInstruction(PC) ;
000017B0  2F39 0B00 2302          move.l    _PC.L,-(A7)
000017B4  0120      
000017B6  4EB9 0000 2303          jsr       _DisassembleInstruction
000017BA  36B6      
000017BC  584F      2304          addq.w    #4,A7
                    2305   ; FormatInstructionForTrace() ;
000017BE  4EB8 12EA 2306          jsr       _FormatInstructionForTrace
                    2307   ; printf("%s", Instruction) ;
000017C2  4879 0B00 2308          pea       _Instruction.L
000017C6  04E2      
000017C8  4879 0000 2309          pea       @m68kde~2_47.L
000017CC  6526      
000017CE  4E93      2310          jsr       (A3)
000017D0  504F      2311          addq.w    #8,A7
000017D2  600A      2312          bra.s     DumpRegisters_41
                    2313   DumpRegisters_40:
                    2314   ; }
                    2315   ; else
                    2316   ; printf("[BREAKPOINT]") ;
000017D4  4879 0000 2317          pea       @m68kde~2_48.L
000017D8  652A      
000017DA  4E93      2318          jsr       (A3)
000017DC  584F      2319          addq.w    #4,A7
                    2320   DumpRegisters_41:
                    2321   ; printf("\r\n") ;
000017DE  4879 0000 2322          pea       @m68kde~2_1.L
000017E2  60A6      
000017E4  4E93      2323          jsr       (A3)
000017E6  584F      2324          addq.w    #4,A7
                    2325   ; for(i=0; i < 8; i++)    {
000017E8  4244      2326          clr.w     D4
                    2327   DumpRegisters_42:
000017EA  0C44 0008 2328          cmp.w     #8,D4
000017EE  6C00 0040 2329          bge       DumpRegisters_44
                    2330   ; if(WatchPointSetOrCleared[i] == 1)
000017F2  48C4      2331          ext.l     D4
000017F4  2004      2332          move.l    D4,D0
000017F6  E588      2333          lsl.l     #2,D0
000017F8  41F9 0B00 2334          lea       _WatchPointSetOrCleared.L,A0
000017FC  01A2      
000017FE  2030 0800 2335          move.l    0(A0,D0.L),D0
00001802  0C80 0000 2336          cmp.l     #1,D0
00001806  0001      
00001808  6622      2337          bne.s     DumpRegisters_45
                    2338   ; printf("\r\nWP%d = %s", i, WatchPointString[i]) ;
0000180A  220D      2339          move.l    A5,D1
0000180C  48C4      2340          ext.l     D4
0000180E  2F00      2341          move.l    D0,-(A7)
00001810  2004      2342          move.l    D4,D0
00001812  C1FC 0064 2343          muls      #100,D0
00001816  D280      2344          add.l     D0,D1
00001818  201F      2345          move.l    (A7)+,D0
0000181A  2F01      2346          move.l    D1,-(A7)
0000181C  48C4      2347          ext.l     D4
0000181E  2F04      2348          move.l    D4,-(A7)
00001820  4879 0000 2349          pea       @m68kde~2_49.L
00001824  6538      
00001826  4E93      2350          jsr       (A3)
00001828  DEFC 000C 2351          add.w     #12,A7
                    2352   DumpRegisters_45:
0000182C  5244      2353          addq.w    #1,D4
0000182E  60BA      2354          bra       DumpRegisters_42
                    2355   DumpRegisters_44:
00001830  4CDF 3CFC 2356          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00001834  4E75      2357          rts
                    2358   ; }
                    2359   ; }
                    2360   ; // Trace Exception Handler
                    2361   ; void DumpRegistersandPause(void)
                    2362   ; {
                    2363   _DumpRegistersandPause:
00001836  2F0A      2364          move.l    A2,-(A7)
00001838  45F9 0000 2365          lea       _printf.L,A2
0000183C  5756      
                    2366   ; printf("\r\n\r\n\r\n\r\n\r\n\r\nSingle Step  :[ON]") ;
0000183E  4879 0000 2367          pea       @m68kde~2_50.L
00001842  6544      
00001844  4E92      2368          jsr       (A2)
00001846  584F      2369          addq.w    #4,A7
                    2370   ; printf("\r\nBreak Points :[Disabled]") ;
00001848  4879 0000 2371          pea       @m68kde~2_51.L
0000184C  6564      
0000184E  4E92      2372          jsr       (A2)
00001850  584F      2373          addq.w    #4,A7
                    2374   ; DumpRegisters() ;
00001852  4EB8 135E 2375          jsr       _DumpRegisters
                    2376   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
00001856  4879 0000 2377          pea       @m68kde~2_52.L
0000185A  6580      
0000185C  4E92      2378          jsr       (A2)
0000185E  584F      2379          addq.w    #4,A7
                    2380   ; printf("\r\nPress <ESC> to Resume Program") ;
00001860  4879 0000 2381          pea       @m68kde~2_53.L
00001864  65AC      
00001866  4E92      2382          jsr       (A2)
00001868  584F      2383          addq.w    #4,A7
                    2384   ; menu() ;
0000186A  4EB9 0000 2385          jsr       _menu
0000186E  24A0      
00001870  245F      2386          move.l    (A7)+,A2
00001872  4E75      2387          rts
                    2388   ; }
                    2389   ; void ChangeRegisters(void)
                    2390   ; {
                    2391   _ChangeRegisters:
00001874  4E56 FFFC 2392          link      A6,#-4
00001878  48E7 303C 2393          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
0000187C  45F9 0000 2394          lea       _printf.L,A2
00001880  5756      
00001882  47EE FFFC 2395          lea       -4(A6),A3
00001886  49F8 0CA4 2396          lea       _Get8HexDigits.L,A4
0000188A  4BF8 0B68 2397          lea       __getch.L,A5
                    2398   ; // get register name d0-d7, a0-a7, up, sp, sr, pc
                    2399   ; int reg_val ;
                    2400   ; char c, reg[3] ;
                    2401   ; reg[0] = tolower(_getch()) ;
0000188E  2F00      2402          move.l    D0,-(A7)
00001890  4E95      2403          jsr       (A5)
00001892  2200      2404          move.l    D0,D1
00001894  201F      2405          move.l    (A7)+,D0
00001896  2F01      2406          move.l    D1,-(A7)
00001898  4EB9 0000 2407          jsr       _tolower
0000189C  5676      
0000189E  584F      2408          addq.w    #4,A7
000018A0  1680      2409          move.b    D0,(A3)
                    2410   ; reg[1] = c = tolower(_getch()) ;
000018A2  2F00      2411          move.l    D0,-(A7)
000018A4  4E95      2412          jsr       (A5)
000018A6  2200      2413          move.l    D0,D1
000018A8  201F      2414          move.l    (A7)+,D0
000018AA  2F01      2415          move.l    D1,-(A7)
000018AC  4EB9 0000 2416          jsr       _tolower
000018B0  5676      
000018B2  584F      2417          addq.w    #4,A7
000018B4  1400      2418          move.b    D0,D2
000018B6  1740 0001 2419          move.b    D0,1(A3)
                    2420   ; if(reg[0] == (char)('d'))  {    // change data register
000018BA  1013      2421          move.b    (A3),D0
000018BC  0C00 0064 2422          cmp.b     #100,D0
000018C0  6600 00AE 2423          bne       ChangeRegisters_1
                    2424   ; if((reg[1] > (char)('7')) || (reg[1] < (char)('0'))) {
000018C4  102B 0001 2425          move.b    1(A3),D0
000018C8  0C00 0037 2426          cmp.b     #55,D0
000018CC  6E0A      2427          bgt.s     ChangeRegisters_5
000018CE  102B 0001 2428          move.b    1(A3),D0
000018D2  0C00 0030 2429          cmp.b     #48,D0
000018D6  6C0E      2430          bge.s     ChangeRegisters_3
                    2431   ChangeRegisters_5:
                    2432   ; printf("\r\nIllegal Data Register : Use D0-D7.....\r\n") ;
000018D8  4879 0000 2433          pea       @m68kde~2_54.L
000018DC  65CC      
000018DE  4E92      2434          jsr       (A2)
000018E0  584F      2435          addq.w    #4,A7
                    2436   ; return ;
000018E2  6000 0244 2437          bra       ChangeRegisters_6
                    2438   ChangeRegisters_3:
                    2439   ; }
                    2440   ; else {
                    2441   ; printf("\r\nD%c = ", c) ;
000018E6  4882      2442          ext.w     D2
000018E8  48C2      2443          ext.l     D2
000018EA  2F02      2444          move.l    D2,-(A7)
000018EC  4879 0000 2445          pea       @m68kde~2_55.L
000018F0  65F8      
000018F2  4E92      2446          jsr       (A2)
000018F4  504F      2447          addq.w    #8,A7
                    2448   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000018F6  42A7      2449          clr.l     -(A7)
000018F8  4E94      2450          jsr       (A4)
000018FA  584F      2451          addq.w    #4,A7
000018FC  2600      2452          move.l    D0,D3
                    2453   ; }
                    2454   ; // bit cludgy but d0-d7 not stored as an array for good reason
                    2455   ; if(c == (char)('0'))
000018FE  0C02 0030 2456          cmp.b     #48,D2
00001902  660A      2457          bne.s     ChangeRegisters_7
                    2458   ; d0 = reg_val ;
00001904  23C3 0B00 2459          move.l    D3,_d0.L
00001908  00E4      
0000190A  6000 0060 2460          bra       ChangeRegisters_20
                    2461   ChangeRegisters_7:
                    2462   ; else if(c == (char)('1'))
0000190E  0C02 0031 2463          cmp.b     #49,D2
00001912  660A      2464          bne.s     ChangeRegisters_9
                    2465   ; d1 = reg_val ;
00001914  23C3 0B00 2466          move.l    D3,_d1.L
00001918  00E8      
0000191A  6000 0050 2467          bra       ChangeRegisters_20
                    2468   ChangeRegisters_9:
                    2469   ; else if(c == (char)('2'))
0000191E  0C02 0032 2470          cmp.b     #50,D2
00001922  660A      2471          bne.s     ChangeRegisters_11
                    2472   ; d2 = reg_val ;
00001924  23C3 0B00 2473          move.l    D3,_d2.L
00001928  00EC      
0000192A  6000 0040 2474          bra       ChangeRegisters_20
                    2475   ChangeRegisters_11:
                    2476   ; else if(c == (char)('3'))
0000192E  0C02 0033 2477          cmp.b     #51,D2
00001932  6608      2478          bne.s     ChangeRegisters_13
                    2479   ; d3 = reg_val ;
00001934  23C3 0B00 2480          move.l    D3,_d3.L
00001938  00F0      
0000193A  6030      2481          bra.s     ChangeRegisters_20
                    2482   ChangeRegisters_13:
                    2483   ; else if(c == (char)('4'))
0000193C  0C02 0034 2484          cmp.b     #52,D2
00001940  6608      2485          bne.s     ChangeRegisters_15
                    2486   ; d4 = reg_val ;
00001942  23C3 0B00 2487          move.l    D3,_d4.L
00001946  00F4      
00001948  6022      2488          bra.s     ChangeRegisters_20
                    2489   ChangeRegisters_15:
                    2490   ; else if(c == (char)('5'))
0000194A  0C02 0035 2491          cmp.b     #53,D2
0000194E  6608      2492          bne.s     ChangeRegisters_17
                    2493   ; d5 = reg_val ;
00001950  23C3 0B00 2494          move.l    D3,_d5.L
00001954  00F8      
00001956  6014      2495          bra.s     ChangeRegisters_20
                    2496   ChangeRegisters_17:
                    2497   ; else if(c == (char)('6'))
00001958  0C02 0036 2498          cmp.b     #54,D2
0000195C  6608      2499          bne.s     ChangeRegisters_19
                    2500   ; d6 = reg_val ;
0000195E  23C3 0B00 2501          move.l    D3,_d6.L
00001962  00FC      
00001964  6006      2502          bra.s     ChangeRegisters_20
                    2503   ChangeRegisters_19:
                    2504   ; else
                    2505   ; d7 = reg_val ;
00001966  23C3 0B00 2506          move.l    D3,_d7.L
0000196A  0100      
                    2507   ChangeRegisters_20:
0000196C  6000 01B6 2508          bra       ChangeRegisters_51
                    2509   ChangeRegisters_1:
                    2510   ; }
                    2511   ; else if(reg[0] == (char)('a'))  {    // change address register, a7 is the user stack pointer, sp is the system stack pointer
00001970  1013      2512          move.b    (A3),D0
00001972  0C00 0061 2513          cmp.b     #97,D0
00001976  6600 00A6 2514          bne       ChangeRegisters_21
                    2515   ; if((c > (char)('7')) || (c < (char)('0'))) {
0000197A  0C02 0037 2516          cmp.b     #55,D2
0000197E  6E06      2517          bgt.s     ChangeRegisters_25
00001980  0C02 0030 2518          cmp.b     #48,D2
00001984  6C0E      2519          bge.s     ChangeRegisters_23
                    2520   ChangeRegisters_25:
                    2521   ; printf("\r\nIllegal Address Register : Use A0-A7.....\r\n") ;
00001986  4879 0000 2522          pea       @m68kde~2_56.L
0000198A  6602      
0000198C  4E92      2523          jsr       (A2)
0000198E  584F      2524          addq.w    #4,A7
                    2525   ; return ;
00001990  6000 0196 2526          bra       ChangeRegisters_6
                    2527   ChangeRegisters_23:
                    2528   ; }
                    2529   ; else {
                    2530   ; printf("\r\nA%c = ", c) ;
00001994  4882      2531          ext.w     D2
00001996  48C2      2532          ext.l     D2
00001998  2F02      2533          move.l    D2,-(A7)
0000199A  4879 0000 2534          pea       @m68kde~2_57.L
0000199E  6630      
000019A0  4E92      2535          jsr       (A2)
000019A2  504F      2536          addq.w    #8,A7
                    2537   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000019A4  42A7      2538          clr.l     -(A7)
000019A6  4E94      2539          jsr       (A4)
000019A8  584F      2540          addq.w    #4,A7
000019AA  2600      2541          move.l    D0,D3
                    2542   ; }
                    2543   ; // bit cludgy but a0-a7 not stored as an array for good reason
                    2544   ; if(c == (char)('0'))
000019AC  0C02 0030 2545          cmp.b     #48,D2
000019B0  660A      2546          bne.s     ChangeRegisters_26
                    2547   ; a0 = reg_val ;
000019B2  23C3 0B00 2548          move.l    D3,_a0.L
000019B6  0104      
000019B8  6000 0060 2549          bra       ChangeRegisters_39
                    2550   ChangeRegisters_26:
                    2551   ; else if(c == (char)('1'))
000019BC  0C02 0031 2552          cmp.b     #49,D2
000019C0  660A      2553          bne.s     ChangeRegisters_28
                    2554   ; a1 = reg_val ;
000019C2  23C3 0B00 2555          move.l    D3,_a1.L
000019C6  0108      
000019C8  6000 0050 2556          bra       ChangeRegisters_39
                    2557   ChangeRegisters_28:
                    2558   ; else if(c == (char)('2'))
000019CC  0C02 0032 2559          cmp.b     #50,D2
000019D0  660A      2560          bne.s     ChangeRegisters_30
                    2561   ; a2 = reg_val ;
000019D2  23C3 0B00 2562          move.l    D3,_a2.L
000019D6  010C      
000019D8  6000 0040 2563          bra       ChangeRegisters_39
                    2564   ChangeRegisters_30:
                    2565   ; else if(c == (char)('3'))
000019DC  0C02 0033 2566          cmp.b     #51,D2
000019E0  6608      2567          bne.s     ChangeRegisters_32
                    2568   ; a3 = reg_val ;
000019E2  23C3 0B00 2569          move.l    D3,_a3.L
000019E6  0110      
000019E8  6030      2570          bra.s     ChangeRegisters_39
                    2571   ChangeRegisters_32:
                    2572   ; else if(c == (char)('4'))
000019EA  0C02 0034 2573          cmp.b     #52,D2
000019EE  6608      2574          bne.s     ChangeRegisters_34
                    2575   ; a4 = reg_val ;
000019F0  23C3 0B00 2576          move.l    D3,_a4.L
000019F4  0114      
000019F6  6022      2577          bra.s     ChangeRegisters_39
                    2578   ChangeRegisters_34:
                    2579   ; else if(c == (char)('5'))
000019F8  0C02 0035 2580          cmp.b     #53,D2
000019FC  6608      2581          bne.s     ChangeRegisters_36
                    2582   ; a5 = reg_val ;
000019FE  23C3 0B00 2583          move.l    D3,_a5.L
00001A02  0118      
00001A04  6014      2584          bra.s     ChangeRegisters_39
                    2585   ChangeRegisters_36:
                    2586   ; else if(c == (char)('6'))
00001A06  0C02 0036 2587          cmp.b     #54,D2
00001A0A  6608      2588          bne.s     ChangeRegisters_38
                    2589   ; a6 = reg_val ;
00001A0C  23C3 0B00 2590          move.l    D3,_a6.L
00001A10  011C      
00001A12  6006      2591          bra.s     ChangeRegisters_39
                    2592   ChangeRegisters_38:
                    2593   ; else
                    2594   ; USP = reg_val ;
00001A14  23C3 0B00 2595          move.l    D3,_USP.L
00001A18  0128      
                    2596   ChangeRegisters_39:
00001A1A  6000 0108 2597          bra       ChangeRegisters_51
                    2598   ChangeRegisters_21:
                    2599   ; }
                    2600   ; else if((reg[0] == (char)('u')) && (c == (char)('s')))  {
00001A1E  1013      2601          move.b    (A3),D0
00001A20  0C00 0075 2602          cmp.b     #117,D0
00001A24  6600 004E 2603          bne       ChangeRegisters_40
00001A28  0C02 0073 2604          cmp.b     #115,D2
00001A2C  6600 0046 2605          bne       ChangeRegisters_40
                    2606   ; if(tolower(_getch()) == 'p')  {    // change user stack pointer
00001A30  2F00      2607          move.l    D0,-(A7)
00001A32  4E95      2608          jsr       (A5)
00001A34  2200      2609          move.l    D0,D1
00001A36  201F      2610          move.l    (A7)+,D0
00001A38  2F01      2611          move.l    D1,-(A7)
00001A3A  4EB9 0000 2612          jsr       _tolower
00001A3E  5676      
00001A40  584F      2613          addq.w    #4,A7
00001A42  0C80 0000 2614          cmp.l     #112,D0
00001A46  0070      
00001A48  6618      2615          bne.s     ChangeRegisters_42
                    2616   ; printf("\r\nUser SP = ") ;
00001A4A  4879 0000 2617          pea       @m68kde~2_58.L
00001A4E  663A      
00001A50  4E92      2618          jsr       (A2)
00001A52  584F      2619          addq.w    #4,A7
                    2620   ; USP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001A54  42A7      2621          clr.l     -(A7)
00001A56  4E94      2622          jsr       (A4)
00001A58  584F      2623          addq.w    #4,A7
00001A5A  23C0 0B00 2624          move.l    D0,_USP.L
00001A5E  0128      
00001A60  600E      2625          bra.s     ChangeRegisters_43
                    2626   ChangeRegisters_42:
                    2627   ; }
                    2628   ; else {
                    2629   ; printf("\r\nIllegal Register....") ;
00001A62  4879 0000 2630          pea       @m68kde~2_59.L
00001A66  6648      
00001A68  4E92      2631          jsr       (A2)
00001A6A  584F      2632          addq.w    #4,A7
                    2633   ; return ;
00001A6C  6000 00BA 2634          bra       ChangeRegisters_6
                    2635   ChangeRegisters_43:
00001A70  6000 00B2 2636          bra       ChangeRegisters_51
                    2637   ChangeRegisters_40:
                    2638   ; }
                    2639   ; }
                    2640   ; else if((reg[0] == (char)('s')) && (c == (char)('s')))  {
00001A74  1013      2641          move.b    (A3),D0
00001A76  0C00 0073 2642          cmp.b     #115,D0
00001A7A  6600 004E 2643          bne       ChangeRegisters_44
00001A7E  0C02 0073 2644          cmp.b     #115,D2
00001A82  6600 0046 2645          bne       ChangeRegisters_44
                    2646   ; if(tolower(_getch()) == 'p')  {    // change system stack pointer
00001A86  2F00      2647          move.l    D0,-(A7)
00001A88  4E95      2648          jsr       (A5)
00001A8A  2200      2649          move.l    D0,D1
00001A8C  201F      2650          move.l    (A7)+,D0
00001A8E  2F01      2651          move.l    D1,-(A7)
00001A90  4EB9 0000 2652          jsr       _tolower
00001A94  5676      
00001A96  584F      2653          addq.w    #4,A7
00001A98  0C80 0000 2654          cmp.l     #112,D0
00001A9C  0070      
00001A9E  6618      2655          bne.s     ChangeRegisters_46
                    2656   ; printf("\r\nSystem SP = ") ;
00001AA0  4879 0000 2657          pea       @m68kde~2_60.L
00001AA4  6660      
00001AA6  4E92      2658          jsr       (A2)
00001AA8  584F      2659          addq.w    #4,A7
                    2660   ; SSP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001AAA  42A7      2661          clr.l     -(A7)
00001AAC  4E94      2662          jsr       (A4)
00001AAE  584F      2663          addq.w    #4,A7
00001AB0  23C0 0B00 2664          move.l    D0,_SSP.L
00001AB4  0124      
00001AB6  600E      2665          bra.s     ChangeRegisters_47
                    2666   ChangeRegisters_46:
                    2667   ; }
                    2668   ; else {
                    2669   ; printf("\r\nIllegal Register....") ;
00001AB8  4879 0000 2670          pea       @m68kde~2_59.L
00001ABC  6648      
00001ABE  4E92      2671          jsr       (A2)
00001AC0  584F      2672          addq.w    #4,A7
                    2673   ; return ;
00001AC2  6000 0064 2674          bra       ChangeRegisters_6
                    2675   ChangeRegisters_47:
00001AC6  6000 005C 2676          bra       ChangeRegisters_51
                    2677   ChangeRegisters_44:
                    2678   ; }
                    2679   ; }
                    2680   ; else if((reg[0] == (char)('p')) && (c == (char)('c')))  {    // change program counter
00001ACA  1013      2681          move.b    (A3),D0
00001ACC  0C00 0070 2682          cmp.b     #112,D0
00001AD0  6620      2683          bne.s     ChangeRegisters_48
00001AD2  0C02 0063 2684          cmp.b     #99,D2
00001AD6  661A      2685          bne.s     ChangeRegisters_48
                    2686   ; printf("\r\nPC = ") ;
00001AD8  4879 0000 2687          pea       @m68kde~2_61.L
00001ADC  6670      
00001ADE  4E92      2688          jsr       (A2)
00001AE0  584F      2689          addq.w    #4,A7
                    2690   ; PC = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001AE2  42A7      2691          clr.l     -(A7)
00001AE4  4E94      2692          jsr       (A4)
00001AE6  584F      2693          addq.w    #4,A7
00001AE8  23C0 0B00 2694          move.l    D0,_PC.L
00001AEC  0120      
00001AEE  6000 0034 2695          bra       ChangeRegisters_51
                    2696   ChangeRegisters_48:
                    2697   ; }
                    2698   ; else if((reg[0] == (char)('s')) && (c == (char)('r')))  {    // change status register
00001AF2  1013      2699          move.b    (A3),D0
00001AF4  0C00 0073 2700          cmp.b     #115,D0
00001AF8  6620      2701          bne.s     ChangeRegisters_50
00001AFA  0C02 0072 2702          cmp.b     #114,D2
00001AFE  661A      2703          bne.s     ChangeRegisters_50
                    2704   ; printf("\r\nSR = ") ;
00001B00  4879 0000 2705          pea       @m68kde~2_62.L
00001B04  6678      
00001B06  4E92      2706          jsr       (A2)
00001B08  584F      2707          addq.w    #4,A7
                    2708   ; SR = Get4HexDigits(0) ;    // read 16 bit value from user keyboard
00001B0A  42A7      2709          clr.l     -(A7)
00001B0C  4EB8 0C58 2710          jsr       _Get4HexDigits
00001B10  584F      2711          addq.w    #4,A7
00001B12  33C0 0B00 2712          move.w    D0,_SR.L
00001B16  012C      
00001B18  600A      2713          bra.s     ChangeRegisters_51
                    2714   ChangeRegisters_50:
                    2715   ; }
                    2716   ; else
                    2717   ; printf("\r\nIllegal Register: Use A0-A7, D0-D7, SSP, USP, PC or SR\r\n") ;
00001B1A  4879 0000 2718          pea       @m68kde~2_63.L
00001B1E  6680      
00001B20  4E92      2719          jsr       (A2)
00001B22  584F      2720          addq.w    #4,A7
                    2721   ChangeRegisters_51:
                    2722   ; DumpRegisters() ;
00001B24  4EB8 135E 2723          jsr       _DumpRegisters
                    2724   ChangeRegisters_6:
00001B28  4CDF 3C0C 2725          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
00001B2C  4E5E      2726          unlk      A6
00001B2E  4E75      2727          rts
                    2728   ; }
                    2729   ; void BreakPointDisplay(void)
                    2730   ; {
                    2731   _BreakPointDisplay:
00001B30  48E7 3030 2732          movem.l   D2/D3/A2/A3,-(A7)
00001B34  45F9 0000 2733          lea       _printf.L,A2
00001B38  5756      
00001B3A  47F9 0B00 2734          lea       _BreakPointAddress.L,A3
00001B3E  012E      
                    2735   ; int i, BreakPointsSet = 0 ;
00001B40  4283      2736          clr.l     D3
                    2737   ; // any break points  set
                    2738   ; for(i = 0; i < 8; i++)  {
00001B42  4282      2739          clr.l     D2
                    2740   BreakPointDisplay_1:
00001B44  0C82 0000 2741          cmp.l     #8,D2
00001B48  0008      
00001B4A  6C1C      2742          bge.s     BreakPointDisplay_3
                    2743   ; if(BreakPointSetOrCleared[i] == 1)
00001B4C  2002      2744          move.l    D2,D0
00001B4E  E588      2745          lsl.l     #2,D0
00001B50  41F9 0B00 2746          lea       _BreakPointSetOrCleared.L,A0
00001B54  015E      
00001B56  2030 0800 2747          move.l    0(A0,D0.L),D0
00001B5A  0C80 0000 2748          cmp.l     #1,D0
00001B5E  0001      
00001B60  6602      2749          bne.s     BreakPointDisplay_4
                    2750   ; BreakPointsSet = 1;
00001B62  7601      2751          moveq     #1,D3
                    2752   BreakPointDisplay_4:
00001B64  5282      2753          addq.l    #1,D2
00001B66  60DC      2754          bra       BreakPointDisplay_1
                    2755   BreakPointDisplay_3:
                    2756   ; }
                    2757   ; if(BreakPointsSet == 1) {
00001B68  0C83 0000 2758          cmp.l     #1,D3
00001B6C  0001      
00001B6E  6616      2759          bne.s     BreakPointDisplay_6
                    2760   ; printf("\r\n\r\nNum     Address      Instruction") ;
00001B70  4879 0000 2761          pea       @m68kde~2_64.L
00001B74  66BC      
00001B76  4E92      2762          jsr       (A2)
00001B78  584F      2763          addq.w    #4,A7
                    2764   ; printf("\r\n---     ---------    -----------") ;
00001B7A  4879 0000 2765          pea       @m68kde~2_65.L
00001B7E  66E2      
00001B80  4E92      2766          jsr       (A2)
00001B82  584F      2767          addq.w    #4,A7
00001B84  600A      2768          bra.s     BreakPointDisplay_7
                    2769   BreakPointDisplay_6:
                    2770   ; }
                    2771   ; else
                    2772   ; printf("\r\nNo BreakPoints Set") ;
00001B86  4879 0000 2773          pea       @m68kde~2_66.L
00001B8A  6706      
00001B8C  4E92      2774          jsr       (A2)
00001B8E  584F      2775          addq.w    #4,A7
                    2776   BreakPointDisplay_7:
                    2777   ; for(i = 0; i < 8; i++)  {
00001B90  4282      2778          clr.l     D2
                    2779   BreakPointDisplay_8:
00001B92  0C82 0000 2780          cmp.l     #8,D2
00001B96  0008      
00001B98  6C00 0080 2781          bge       BreakPointDisplay_10
                    2782   ; // put opcode back to disassemble it, then put break point back
                    2783   ; if(BreakPointSetOrCleared[i] == 1)  {
00001B9C  2002      2784          move.l    D2,D0
00001B9E  E588      2785          lsl.l     #2,D0
00001BA0  41F9 0B00 2786          lea       _BreakPointSetOrCleared.L,A0
00001BA4  015E      
00001BA6  2030 0800 2787          move.l    0(A0,D0.L),D0
00001BAA  0C80 0000 2788          cmp.l     #1,D0
00001BAE  0001      
00001BB0  6600 0062 2789          bne       BreakPointDisplay_11
                    2790   ; *(unsigned short int *)(BreakPointAddress[i]) = BreakPointInstruction[i];
00001BB4  2002      2791          move.l    D2,D0
00001BB6  E388      2792          lsl.l     #1,D0
00001BB8  41F9 0B00 2793          lea       _BreakPointInstruction.L,A0
00001BBC  014E      
00001BBE  2202      2794          move.l    D2,D1
00001BC0  E589      2795          lsl.l     #2,D1
00001BC2  2233 1800 2796          move.l    0(A3,D1.L),D1
00001BC6  2241      2797          move.l    D1,A1
00001BC8  32B0 0800 2798          move.w    0(A0,D0.L),(A1)
                    2799   ; DisassembleInstruction(BreakPointAddress[i]) ;
00001BCC  2202      2800          move.l    D2,D1
00001BCE  E589      2801          lsl.l     #2,D1
00001BD0  2F33 1800 2802          move.l    0(A3,D1.L),-(A7)
00001BD4  4EB9 0000 2803          jsr       _DisassembleInstruction
00001BD8  36B6      
00001BDA  584F      2804          addq.w    #4,A7
                    2805   ; FormatInstructionForTrace() ;
00001BDC  4EB8 12EA 2806          jsr       _FormatInstructionForTrace
                    2807   ; *(unsigned short int *)(BreakPointAddress[i]) = (unsigned short int)(0x4e4e) ;
00001BE0  2002      2808          move.l    D2,D0
00001BE2  E588      2809          lsl.l     #2,D0
00001BE4  2033 0800 2810          move.l    0(A3,D0.L),D0
00001BE8  2040      2811          move.l    D0,A0
00001BEA  30BC 4E4E 2812          move.w    #20046,(A0)
                    2813   ; printf("\r\n%3d     $%08x",i, BreakPointAddress[i]) ;
00001BEE  2202      2814          move.l    D2,D1
00001BF0  E589      2815          lsl.l     #2,D1
00001BF2  2F33 1800 2816          move.l    0(A3,D1.L),-(A7)
00001BF6  2F02      2817          move.l    D2,-(A7)
00001BF8  4879 0000 2818          pea       @m68kde~2_67.L
00001BFC  671C      
00001BFE  4E92      2819          jsr       (A2)
00001C00  DEFC 000C 2820          add.w     #12,A7
                    2821   ; printf("    %s", Instruction);
00001C04  4879 0B00 2822          pea       _Instruction.L
00001C08  04E2      
00001C0A  4879 0000 2823          pea       @m68kde~2_68.L
00001C0E  672C      
00001C10  4E92      2824          jsr       (A2)
00001C12  504F      2825          addq.w    #8,A7
                    2826   BreakPointDisplay_11:
00001C14  5282      2827          addq.l    #1,D2
00001C16  6000 FF7A 2828          bra       BreakPointDisplay_8
                    2829   BreakPointDisplay_10:
                    2830   ; }
                    2831   ; }
                    2832   ; printf("\r\n") ;
00001C1A  4879 0000 2833          pea       @m68kde~2_1.L
00001C1E  60A6      
00001C20  4E92      2834          jsr       (A2)
00001C22  584F      2835          addq.w    #4,A7
00001C24  4CDF 0C0C 2836          movem.l   (A7)+,D2/D3/A2/A3
00001C28  4E75      2837          rts
                    2838   ; }
                    2839   ; void WatchPointDisplay(void)
                    2840   ; {
                    2841   _WatchPointDisplay:
00001C2A  48E7 3020 2842          movem.l   D2/D3/A2,-(A7)
00001C2E  45F9 0000 2843          lea       _printf.L,A2
00001C32  5756      
                    2844   ; int i ;
                    2845   ; int WatchPointsSet = 0 ;
00001C34  4283      2846          clr.l     D3
                    2847   ; // any watchpoints set
                    2848   ; for(i = 0; i < 8; i++)  {
00001C36  4282      2849          clr.l     D2
                    2850   WatchPointDisplay_1:
00001C38  0C82 0000 2851          cmp.l     #8,D2
00001C3C  0008      
00001C3E  6C1C      2852          bge.s     WatchPointDisplay_3
                    2853   ; if(WatchPointSetOrCleared[i] == 1)
00001C40  2002      2854          move.l    D2,D0
00001C42  E588      2855          lsl.l     #2,D0
00001C44  41F9 0B00 2856          lea       _WatchPointSetOrCleared.L,A0
00001C48  01A2      
00001C4A  2030 0800 2857          move.l    0(A0,D0.L),D0
00001C4E  0C80 0000 2858          cmp.l     #1,D0
00001C52  0001      
00001C54  6602      2859          bne.s     WatchPointDisplay_4
                    2860   ; WatchPointsSet = 1;
00001C56  7601      2861          moveq     #1,D3
                    2862   WatchPointDisplay_4:
00001C58  5282      2863          addq.l    #1,D2
00001C5A  60DC      2864          bra       WatchPointDisplay_1
                    2865   WatchPointDisplay_3:
                    2866   ; }
                    2867   ; if(WatchPointsSet == 1) {
00001C5C  0C83 0000 2868          cmp.l     #1,D3
00001C60  0001      
00001C62  6616      2869          bne.s     WatchPointDisplay_6
                    2870   ; printf("\r\nNum     Address") ;
00001C64  4879 0000 2871          pea       @m68kde~2_69.L
00001C68  6734      
00001C6A  4E92      2872          jsr       (A2)
00001C6C  584F      2873          addq.w    #4,A7
                    2874   ; printf("\r\n---     ---------") ;
00001C6E  4879 0000 2875          pea       @m68kde~2_70.L
00001C72  6746      
00001C74  4E92      2876          jsr       (A2)
00001C76  584F      2877          addq.w    #4,A7
00001C78  600A      2878          bra.s     WatchPointDisplay_7
                    2879   WatchPointDisplay_6:
                    2880   ; }
                    2881   ; else
                    2882   ; printf("\r\nNo WatchPoints Set") ;
00001C7A  4879 0000 2883          pea       @m68kde~2_71.L
00001C7E  675A      
00001C80  4E92      2884          jsr       (A2)
00001C82  584F      2885          addq.w    #4,A7
                    2886   WatchPointDisplay_7:
                    2887   ; for(i = 0; i < 8; i++)  {
00001C84  4282      2888          clr.l     D2
                    2889   WatchPointDisplay_8:
00001C86  0C82 0000 2890          cmp.l     #8,D2
00001C8A  0008      
00001C8C  6C00 0038 2891          bge       WatchPointDisplay_10
                    2892   ; if(WatchPointSetOrCleared[i] == 1)
00001C90  2002      2893          move.l    D2,D0
00001C92  E588      2894          lsl.l     #2,D0
00001C94  41F9 0B00 2895          lea       _WatchPointSetOrCleared.L,A0
00001C98  01A2      
00001C9A  2030 0800 2896          move.l    0(A0,D0.L),D0
00001C9E  0C80 0000 2897          cmp.l     #1,D0
00001CA2  0001      
00001CA4  661C      2898          bne.s     WatchPointDisplay_11
                    2899   ; printf("\r\n%3d     $%08x",i, WatchPointAddress[i]) ;
00001CA6  2202      2900          move.l    D2,D1
00001CA8  E589      2901          lsl.l     #2,D1
00001CAA  41F9 0B00 2902          lea       _WatchPointAddress.L,A0
00001CAE  0182      
00001CB0  2F30 1800 2903          move.l    0(A0,D1.L),-(A7)
00001CB4  2F02      2904          move.l    D2,-(A7)
00001CB6  4879 0000 2905          pea       @m68kde~2_67.L
00001CBA  671C      
00001CBC  4E92      2906          jsr       (A2)
00001CBE  DEFC 000C 2907          add.w     #12,A7
                    2908   WatchPointDisplay_11:
00001CC2  5282      2909          addq.l    #1,D2
00001CC4  60C0      2910          bra       WatchPointDisplay_8
                    2911   WatchPointDisplay_10:
                    2912   ; }
                    2913   ; printf("\r\n") ;
00001CC6  4879 0000 2914          pea       @m68kde~2_1.L
00001CCA  60A6      
00001CCC  4E92      2915          jsr       (A2)
00001CCE  584F      2916          addq.w    #4,A7
00001CD0  4CDF 040C 2917          movem.l   (A7)+,D2/D3/A2
00001CD4  4E75      2918          rts
                    2919   ; }
                    2920   ; void BreakPointClear(void)
                    2921   ; {
                    2922   _BreakPointClear:
00001CD6  4E56 FFFC 2923          link      A6,#-4
00001CDA  48E7 2020 2924          movem.l   D2/A2,-(A7)
00001CDE  45F9 0000 2925          lea       _printf.L,A2
00001CE2  5756      
                    2926   ; unsigned int i ;
                    2927   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2928   ; BreakPointDisplay() ;
00001CE4  4EB8 1B30 2929          jsr       _BreakPointDisplay
                    2930   ; printf("\r\nEnter Break Point Number: ") ;
00001CE8  4879 0000 2931          pea       @m68kde~2_72.L
00001CEC  6770      
00001CEE  4E92      2932          jsr       (A2)
00001CF0  584F      2933          addq.w    #4,A7
                    2934   ; i = xtod(_getch()) ;           // get break pointer number
00001CF2  2F00      2935          move.l    D0,-(A7)
00001CF4  4EB8 0B68 2936          jsr       __getch
00001CF8  2200      2937          move.l    D0,D1
00001CFA  201F      2938          move.l    (A7)+,D0
00001CFC  2F01      2939          move.l    D1,-(A7)
00001CFE  4EB8 0BD2 2940          jsr       _xtod
00001D02  584F      2941          addq.w    #4,A7
00001D04  C0BC 0000 2942          and.l     #255,D0
00001D08  00FF      
00001D0A  2400      2943          move.l    D0,D2
                    2944   ; if((i < 0) || (i > 7))   {
00001D0C  0C82 0000 2945          cmp.l     #0,D2
00001D10  0000      
00001D12  6508      2946          blo.s     BreakPointClear_3
00001D14  0C82 0000 2947          cmp.l     #7,D2
00001D18  0007      
00001D1A  630E      2948          bls.s     BreakPointClear_1
                    2949   BreakPointClear_3:
                    2950   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00001D1C  4879 0000 2951          pea       @m68kde~2_73.L
00001D20  678E      
00001D22  4E92      2952          jsr       (A2)
00001D24  584F      2953          addq.w    #4,A7
                    2954   ; return ;
00001D26  6000 0080 2955          bra       BreakPointClear_4
                    2956   BreakPointClear_1:
                    2957   ; }
                    2958   ; if(BreakPointSetOrCleared[i] == 1)  {       // if break point set
00001D2A  2002      2959          move.l    D2,D0
00001D2C  E588      2960          lsl.l     #2,D0
00001D2E  41F9 0B00 2961          lea       _BreakPointSetOrCleared.L,A0
00001D32  015E      
00001D34  2030 0800 2962          move.l    0(A0,D0.L),D0
00001D38  0C80 0000 2963          cmp.l     #1,D0
00001D3C  0001      
00001D3E  6600 005A 2964          bne       BreakPointClear_5
                    2965   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program we are about to change
00001D42  2002      2966          move.l    D2,D0
00001D44  E588      2967          lsl.l     #2,D0
00001D46  41F9 0B00 2968          lea       _BreakPointAddress.L,A0
00001D4A  012E      
00001D4C  2D70 0800 2969          move.l    0(A0,D0.L),-4(A6)
00001D50  FFFC      
                    2970   ; BreakPointAddress[i] = 0 ;
00001D52  2002      2971          move.l    D2,D0
00001D54  E588      2972          lsl.l     #2,D0
00001D56  41F9 0B00 2973          lea       _BreakPointAddress.L,A0
00001D5A  012E      
00001D5C  42B0 0800 2974          clr.l     0(A0,D0.L)
                    2975   ; BreakPointSetOrCleared[i] = 0 ;
00001D60  2002      2976          move.l    D2,D0
00001D62  E588      2977          lsl.l     #2,D0
00001D64  41F9 0B00 2978          lea       _BreakPointSetOrCleared.L,A0
00001D68  015E      
00001D6A  42B0 0800 2979          clr.l     0(A0,D0.L)
                    2980   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
00001D6E  2002      2981          move.l    D2,D0
00001D70  E388      2982          lsl.l     #1,D0
00001D72  41F9 0B00 2983          lea       _BreakPointInstruction.L,A0
00001D76  014E      
00001D78  226E FFFC 2984          move.l    -4(A6),A1
00001D7C  32B0 0800 2985          move.w    0(A0,D0.L),(A1)
                    2986   ; BreakPointInstruction[i] = 0 ;
00001D80  2002      2987          move.l    D2,D0
00001D82  E388      2988          lsl.l     #1,D0
00001D84  41F9 0B00 2989          lea       _BreakPointInstruction.L,A0
00001D88  014E      
00001D8A  4270 0800 2990          clr.w     0(A0,D0.L)
                    2991   ; printf("\r\nBreak Point Cleared.....\r\n") ;
00001D8E  4879 0000 2992          pea       @m68kde~2_74.L
00001D92  67AA      
00001D94  4E92      2993          jsr       (A2)
00001D96  584F      2994          addq.w    #4,A7
00001D98  600A      2995          bra.s     BreakPointClear_6
                    2996   BreakPointClear_5:
                    2997   ; }
                    2998   ; else
                    2999   ; printf("\r\nBreak Point wasn't Set.....") ;
00001D9A  4879 0000 3000          pea       @m68kde~2_75.L
00001D9E  67C8      
00001DA0  4E92      3001          jsr       (A2)
00001DA2  584F      3002          addq.w    #4,A7
                    3003   BreakPointClear_6:
                    3004   ; BreakPointDisplay() ;
00001DA4  4EB8 1B30 3005          jsr       _BreakPointDisplay
                    3006   ; return ;
                    3007   BreakPointClear_4:
00001DA8  4CDF 0404 3008          movem.l   (A7)+,D2/A2
00001DAC  4E5E      3009          unlk      A6
00001DAE  4E75      3010          rts
                    3011   ; }
                    3012   ; void WatchPointClear(void)
                    3013   ; {
                    3014   _WatchPointClear:
00001DB0  48E7 2020 3015          movem.l   D2/A2,-(A7)
00001DB4  45F9 0000 3016          lea       _printf.L,A2
00001DB8  5756      
                    3017   ; unsigned int i ;
                    3018   ; WatchPointDisplay() ;
00001DBA  4EB8 1C2A 3019          jsr       _WatchPointDisplay
                    3020   ; printf("\r\nEnter Watch Point Number: ") ;
00001DBE  4879 0000 3021          pea       @m68kde~2_76.L
00001DC2  67E6      
00001DC4  4E92      3022          jsr       (A2)
00001DC6  584F      3023          addq.w    #4,A7
                    3024   ; i = xtod(_getch()) ;           // get watch pointer number
00001DC8  2F00      3025          move.l    D0,-(A7)
00001DCA  4EB8 0B68 3026          jsr       __getch
00001DCE  2200      3027          move.l    D0,D1
00001DD0  201F      3028          move.l    (A7)+,D0
00001DD2  2F01      3029          move.l    D1,-(A7)
00001DD4  4EB8 0BD2 3030          jsr       _xtod
00001DD8  584F      3031          addq.w    #4,A7
00001DDA  C0BC 0000 3032          and.l     #255,D0
00001DDE  00FF      
00001DE0  2400      3033          move.l    D0,D2
                    3034   ; if((i < 0) || (i > 7))   {
00001DE2  0C82 0000 3035          cmp.l     #0,D2
00001DE6  0000      
00001DE8  6508      3036          blo.s     WatchPointClear_3
00001DEA  0C82 0000 3037          cmp.l     #7,D2
00001DEE  0007      
00001DF0  630E      3038          bls.s     WatchPointClear_1
                    3039   WatchPointClear_3:
                    3040   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00001DF2  4879 0000 3041          pea       @m68kde~2_73.L
00001DF6  678E      
00001DF8  4E92      3042          jsr       (A2)
00001DFA  584F      3043          addq.w    #4,A7
                    3044   ; return ;
00001DFC  6000 004E 3045          bra       WatchPointClear_4
                    3046   WatchPointClear_1:
                    3047   ; }
                    3048   ; if(WatchPointSetOrCleared[i] == 1)  {       // if watch point set
00001E00  2002      3049          move.l    D2,D0
00001E02  E588      3050          lsl.l     #2,D0
00001E04  41F9 0B00 3051          lea       _WatchPointSetOrCleared.L,A0
00001E08  01A2      
00001E0A  2030 0800 3052          move.l    0(A0,D0.L),D0
00001E0E  0C80 0000 3053          cmp.l     #1,D0
00001E12  0001      
00001E14  6628      3054          bne.s     WatchPointClear_5
                    3055   ; WatchPointAddress[i] = 0 ;
00001E16  2002      3056          move.l    D2,D0
00001E18  E588      3057          lsl.l     #2,D0
00001E1A  41F9 0B00 3058          lea       _WatchPointAddress.L,A0
00001E1E  0182      
00001E20  42B0 0800 3059          clr.l     0(A0,D0.L)
                    3060   ; WatchPointSetOrCleared[i] = 0 ;
00001E24  2002      3061          move.l    D2,D0
00001E26  E588      3062          lsl.l     #2,D0
00001E28  41F9 0B00 3063          lea       _WatchPointSetOrCleared.L,A0
00001E2C  01A2      
00001E2E  42B0 0800 3064          clr.l     0(A0,D0.L)
                    3065   ; printf("\r\nWatch Point Cleared.....\r\n") ;
00001E32  4879 0000 3066          pea       @m68kde~2_77.L
00001E36  6804      
00001E38  4E92      3067          jsr       (A2)
00001E3A  584F      3068          addq.w    #4,A7
00001E3C  600A      3069          bra.s     WatchPointClear_6
                    3070   WatchPointClear_5:
                    3071   ; }
                    3072   ; else
                    3073   ; printf("\r\nWatch Point Was not Set.....") ;
00001E3E  4879 0000 3074          pea       @m68kde~2_78.L
00001E42  6822      
00001E44  4E92      3075          jsr       (A2)
00001E46  584F      3076          addq.w    #4,A7
                    3077   WatchPointClear_6:
                    3078   ; WatchPointDisplay() ;
00001E48  4EB8 1C2A 3079          jsr       _WatchPointDisplay
                    3080   ; return ;
                    3081   WatchPointClear_4:
00001E4C  4CDF 0404 3082          movem.l   (A7)+,D2/A2
00001E50  4E75      3083          rts
                    3084   ; }
                    3085   ; void DisableBreakPoints(void)
                    3086   ; {
                    3087   _DisableBreakPoints:
00001E52  4E56 FFFC 3088          link      A6,#-4
00001E56  2F02      3089          move.l    D2,-(A7)
                    3090   ; int i ;
                    3091   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3092   ; for(i = 0; i < 8; i++)  {
00001E58  4282      3093          clr.l     D2
                    3094   DisableBreakPoints_1:
00001E5A  0C82 0000 3095          cmp.l     #8,D2
00001E5E  0008      
00001E60  6C00 003E 3096          bge       DisableBreakPoints_3
                    3097   ; if(BreakPointSetOrCleared[i] == 1)    {                                                    // if break point set
00001E64  2002      3098          move.l    D2,D0
00001E66  E588      3099          lsl.l     #2,D0
00001E68  41F9 0B00 3100          lea       _BreakPointSetOrCleared.L,A0
00001E6C  015E      
00001E6E  2030 0800 3101          move.l    0(A0,D0.L),D0
00001E72  0C80 0000 3102          cmp.l     #1,D0
00001E76  0001      
00001E78  6622      3103          bne.s     DisableBreakPoints_4
                    3104   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001E7A  2002      3105          move.l    D2,D0
00001E7C  E588      3106          lsl.l     #2,D0
00001E7E  41F9 0B00 3107          lea       _BreakPointAddress.L,A0
00001E82  012E      
00001E84  2D70 0800 3108          move.l    0(A0,D0.L),-4(A6)
00001E88  FFFC      
                    3109   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program overwritting the $4e4e
00001E8A  2002      3110          move.l    D2,D0
00001E8C  E388      3111          lsl.l     #1,D0
00001E8E  41F9 0B00 3112          lea       _BreakPointInstruction.L,A0
00001E92  014E      
00001E94  226E FFFC 3113          move.l    -4(A6),A1
00001E98  32B0 0800 3114          move.w    0(A0,D0.L),(A1)
                    3115   DisableBreakPoints_4:
00001E9C  5282      3116          addq.l    #1,D2
00001E9E  60BA      3117          bra       DisableBreakPoints_1
                    3118   DisableBreakPoints_3:
00001EA0  241F      3119          move.l    (A7)+,D2
00001EA2  4E5E      3120          unlk      A6
00001EA4  4E75      3121          rts
                    3122   ; }
                    3123   ; }
                    3124   ; }
                    3125   ; void EnableBreakPoints(void)
                    3126   ; {
                    3127   _EnableBreakPoints:
00001EA6  4E56 FFFC 3128          link      A6,#-4
00001EAA  2F02      3129          move.l    D2,-(A7)
                    3130   ; int i ;
                    3131   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3132   ; for(i = 0; i < 8; i++)  {
00001EAC  4282      3133          clr.l     D2
                    3134   EnableBreakPoints_1:
00001EAE  0C82 0000 3135          cmp.l     #8,D2
00001EB2  0008      
00001EB4  6C32      3136          bge.s     EnableBreakPoints_3
                    3137   ; if(BreakPointSetOrCleared[i] == 1)    {                                                     // if break point set
00001EB6  2002      3138          move.l    D2,D0
00001EB8  E588      3139          lsl.l     #2,D0
00001EBA  41F9 0B00 3140          lea       _BreakPointSetOrCleared.L,A0
00001EBE  015E      
00001EC0  2030 0800 3141          move.l    0(A0,D0.L),D0
00001EC4  0C80 0000 3142          cmp.l     #1,D0
00001EC8  0001      
00001ECA  6618      3143          bne.s     EnableBreakPoints_4
                    3144   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001ECC  2002      3145          move.l    D2,D0
00001ECE  E588      3146          lsl.l     #2,D0
00001ED0  41F9 0B00 3147          lea       _BreakPointAddress.L,A0
00001ED4  012E      
00001ED6  2D70 0800 3148          move.l    0(A0,D0.L),-4(A6)
00001EDA  FFFC      
                    3149   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e);                              // put the breakpoint back in user program
00001EDC  206E FFFC 3150          move.l    -4(A6),A0
00001EE0  30BC 4E4E 3151          move.w    #20046,(A0)
                    3152   EnableBreakPoints_4:
00001EE4  5282      3153          addq.l    #1,D2
00001EE6  60C6      3154          bra       EnableBreakPoints_1
                    3155   EnableBreakPoints_3:
00001EE8  241F      3156          move.l    (A7)+,D2
00001EEA  4E5E      3157          unlk      A6
00001EEC  4E75      3158          rts
                    3159   ; }
                    3160   ; }
                    3161   ; }
                    3162   ; void KillAllBreakPoints(void)
                    3163   ; {
                    3164   _KillAllBreakPoints:
00001EEE  4E56 FFFC 3165          link      A6,#-4
00001EF2  2F02      3166          move.l    D2,-(A7)
                    3167   ; int i ;
                    3168   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3169   ; for(i = 0; i < 8; i++)  {
00001EF4  4282      3170          clr.l     D2
                    3171   KillAllBreakPoints_1:
00001EF6  0C82 0000 3172          cmp.l     #8,D2
00001EFA  0008      
00001EFC  6C00 0052 3173          bge       KillAllBreakPoints_3
                    3174   ; // clear BP
                    3175   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001F00  2002      3176          move.l    D2,D0
00001F02  E588      3177          lsl.l     #2,D0
00001F04  41F9 0B00 3178          lea       _BreakPointAddress.L,A0
00001F08  012E      
00001F0A  2D70 0800 3179          move.l    0(A0,D0.L),-4(A6)
00001F0E  FFFC      
                    3180   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program
00001F10  2002      3181          move.l    D2,D0
00001F12  E388      3182          lsl.l     #1,D0
00001F14  41F9 0B00 3183          lea       _BreakPointInstruction.L,A0
00001F18  014E      
00001F1A  226E FFFC 3184          move.l    -4(A6),A1
00001F1E  32B0 0800 3185          move.w    0(A0,D0.L),(A1)
                    3186   ; BreakPointAddress[i] = 0 ;                                                             // set BP address to NULL
00001F22  2002      3187          move.l    D2,D0
00001F24  E588      3188          lsl.l     #2,D0
00001F26  41F9 0B00 3189          lea       _BreakPointAddress.L,A0
00001F2A  012E      
00001F2C  42B0 0800 3190          clr.l     0(A0,D0.L)
                    3191   ; BreakPointInstruction[i] = 0 ;
00001F30  2002      3192          move.l    D2,D0
00001F32  E388      3193          lsl.l     #1,D0
00001F34  41F9 0B00 3194          lea       _BreakPointInstruction.L,A0
00001F38  014E      
00001F3A  4270 0800 3195          clr.w     0(A0,D0.L)
                    3196   ; BreakPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00001F3E  2002      3197          move.l    D2,D0
00001F40  E588      3198          lsl.l     #2,D0
00001F42  41F9 0B00 3199          lea       _BreakPointSetOrCleared.L,A0
00001F46  015E      
00001F48  42B0 0800 3200          clr.l     0(A0,D0.L)
00001F4C  5282      3201          addq.l    #1,D2
00001F4E  60A6      3202          bra       KillAllBreakPoints_1
                    3203   KillAllBreakPoints_3:
00001F50  241F      3204          move.l    (A7)+,D2
00001F52  4E5E      3205          unlk      A6
00001F54  4E75      3206          rts
                    3207   ; }
                    3208   ; //BreakPointDisplay() ;       // display the break points
                    3209   ; }
                    3210   ; void KillAllWatchPoints(void)
                    3211   ; {
                    3212   _KillAllWatchPoints:
00001F56  2F02      3213          move.l    D2,-(A7)
                    3214   ; int i ;
                    3215   ; for(i = 0; i < 8; i++)  {
00001F58  4282      3216          clr.l     D2
                    3217   KillAllWatchPoints_1:
00001F5A  0C82 0000 3218          cmp.l     #8,D2
00001F5E  0008      
00001F60  6C20      3219          bge.s     KillAllWatchPoints_3
                    3220   ; WatchPointAddress[i] = 0 ;                                                             // set BP address to NULL
00001F62  2002      3221          move.l    D2,D0
00001F64  E588      3222          lsl.l     #2,D0
00001F66  41F9 0B00 3223          lea       _WatchPointAddress.L,A0
00001F6A  0182      
00001F6C  42B0 0800 3224          clr.l     0(A0,D0.L)
                    3225   ; WatchPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00001F70  2002      3226          move.l    D2,D0
00001F72  E588      3227          lsl.l     #2,D0
00001F74  41F9 0B00 3228          lea       _WatchPointSetOrCleared.L,A0
00001F78  01A2      
00001F7A  42B0 0800 3229          clr.l     0(A0,D0.L)
00001F7E  5282      3230          addq.l    #1,D2
00001F80  60D8      3231          bra       KillAllWatchPoints_1
                    3232   KillAllWatchPoints_3:
00001F82  241F      3233          move.l    (A7)+,D2
00001F84  4E75      3234          rts
                    3235   ; }
                    3236   ; //WatchPointDisplay() ;       // display the break points
                    3237   ; }
                    3238   ; void SetBreakPoint(void)
                    3239   ; {
                    3240   _SetBreakPoint:
00001F86  4E56 FFFC 3241          link      A6,#-4
00001F8A  48E7 3830 3242          movem.l   D2/D3/D4/A2/A3,-(A7)
00001F8E  45F9 0000 3243          lea       _printf.L,A2
00001F92  5756      
00001F94  47F9 0B00 3244          lea       _BreakPointSetOrCleared.L,A3
00001F98  015E      
                    3245   ; int i ;
                    3246   ; int BPNumber;
                    3247   ; int BPAddress;
                    3248   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3249   ; // see if any free break points
                    3250   ; for(i = 0; i < 8; i ++) {
00001F9A  4282      3251          clr.l     D2
                    3252   SetBreakPoint_1:
00001F9C  0C82 0000 3253          cmp.l     #8,D2
00001FA0  0008      
00001FA2  6C10      3254          bge.s     SetBreakPoint_3
                    3255   ; if( BreakPointSetOrCleared[i] == 0)
00001FA4  2002      3256          move.l    D2,D0
00001FA6  E588      3257          lsl.l     #2,D0
00001FA8  2033 0800 3258          move.l    0(A3,D0.L),D0
00001FAC  6602      3259          bne.s     SetBreakPoint_4
                    3260   ; break ;         // if spare BP found allow user to set it
00001FAE  6004      3261          bra.s     SetBreakPoint_3
                    3262   SetBreakPoint_4:
00001FB0  5282      3263          addq.l    #1,D2
00001FB2  60E8      3264          bra       SetBreakPoint_1
                    3265   SetBreakPoint_3:
                    3266   ; }
                    3267   ; if(i == 8) {
00001FB4  0C82 0000 3268          cmp.l     #8,D2
00001FB8  0008      
00001FBA  660E      3269          bne.s     SetBreakPoint_6
                    3270   ; printf("\r\nNo FREE Break Points.....") ;
00001FBC  4879 0000 3271          pea       @m68kde~2_79.L
00001FC0  6842      
00001FC2  4E92      3272          jsr       (A2)
00001FC4  584F      3273          addq.w    #4,A7
                    3274   ; return ;
00001FC6  6000 00EC 3275          bra       SetBreakPoint_15
                    3276   SetBreakPoint_6:
                    3277   ; }
                    3278   ; printf("\r\nBreak Point Address: ") ;
00001FCA  4879 0000 3279          pea       @m68kde~2_80.L
00001FCE  685E      
00001FD0  4E92      3280          jsr       (A2)
00001FD2  584F      3281          addq.w    #4,A7
                    3282   ; BPAddress = Get8HexDigits(0) ;
00001FD4  42A7      3283          clr.l     -(A7)
00001FD6  4EB8 0CA4 3284          jsr       _Get8HexDigits
00001FDA  584F      3285          addq.w    #4,A7
00001FDC  2600      3286          move.l    D0,D3
                    3287   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BPAddress) ;     // point to the instruction in the user program we are about to change
00001FDE  2803      3288          move.l    D3,D4
                    3289   ; if((BPAddress & 0x00000001) == 0x00000001)  {   // cannot set BP at an odd address
00001FE0  2003      3290          move.l    D3,D0
00001FE2  C0BC 0000 3291          and.l     #1,D0
00001FE6  0001      
00001FE8  0C80 0000 3292          cmp.l     #1,D0
00001FEC  0001      
00001FEE  660E      3293          bne.s     SetBreakPoint_9
                    3294   ; printf("\r\nError : Break Points CANNOT be set at ODD addresses") ;
00001FF0  4879 0000 3295          pea       @m68kde~2_81.L
00001FF4  6876      
00001FF6  4E92      3296          jsr       (A2)
00001FF8  584F      3297          addq.w    #4,A7
                    3298   ; return ;
00001FFA  6000 00B8 3299          bra       SetBreakPoint_15
                    3300   SetBreakPoint_9:
                    3301   ; }
                    3302   ; if(BPAddress < 0x00008000)  {   // cannot set BP in ROM
00001FFE  0C83 0000 3303          cmp.l     #32768,D3
00002002  8000      
00002004  640E      3304          bhs.s     SetBreakPoint_11
                    3305   ; printf("\r\nError : Break Points CANNOT be set for ROM in Range : [$0-$00007FFF]") ;
00002006  4879 0000 3306          pea       @m68kde~2_82.L
0000200A  68AC      
0000200C  4E92      3307          jsr       (A2)
0000200E  584F      3308          addq.w    #4,A7
                    3309   ; return ;
00002010  6000 00A2 3310          bra       SetBreakPoint_15
                    3311   SetBreakPoint_11:
                    3312   ; }
                    3313   ; // search for first free bp or existing same BP
                    3314   ; for(i = 0; i < 8; i++)  {
00002014  4282      3315          clr.l     D2
                    3316   SetBreakPoint_13:
00002016  0C82 0000 3317          cmp.l     #8,D2
0000201A  0008      
0000201C  6C00 0096 3318          bge       SetBreakPoint_15
                    3319   ; if(BreakPointAddress[i] == BPAddress)   {
00002020  2002      3320          move.l    D2,D0
00002022  E588      3321          lsl.l     #2,D0
00002024  41F9 0B00 3322          lea       _BreakPointAddress.L,A0
00002028  012E      
0000202A  B6B0 0800 3323          cmp.l     0(A0,D0.L),D3
0000202E  6610      3324          bne.s     SetBreakPoint_16
                    3325   ; printf("\r\nError: Break Point Already Exists at Address : %08x\r\n", BPAddress) ;
00002030  2F03      3326          move.l    D3,-(A7)
00002032  4879 0000 3327          pea       @m68kde~2_83.L
00002036  68F4      
00002038  4E92      3328          jsr       (A2)
0000203A  504F      3329          addq.w    #8,A7
                    3330   ; return ;
0000203C  6000 0076 3331          bra       SetBreakPoint_15
                    3332   SetBreakPoint_16:
                    3333   ; }
                    3334   ; if(BreakPointSetOrCleared[i] == 0) {
00002040  2002      3335          move.l    D2,D0
00002042  E588      3336          lsl.l     #2,D0
00002044  2033 0800 3337          move.l    0(A3,D0.L),D0
00002048  6600 0064 3338          bne       SetBreakPoint_18
                    3339   ; // set BP here
                    3340   ; BreakPointSetOrCleared[i] = 1 ;                                 // mark this breakpoint as set
0000204C  2002      3341          move.l    D2,D0
0000204E  E588      3342          lsl.l     #2,D0
00002050  27BC 0000 3343          move.l    #1,0(A3,D0.L)
00002054  0001 0800 
                    3344   ; BreakPointInstruction[i] = *ProgramBreakPointAddress ;          // copy the user program instruction here so we can put it back afterwards
00002058  2044      3345          move.l    D4,A0
0000205A  2002      3346          move.l    D2,D0
0000205C  E388      3347          lsl.l     #1,D0
0000205E  43F9 0B00 3348          lea       _BreakPointInstruction.L,A1
00002062  014E      
00002064  3390 0800 3349          move.w    (A0),0(A1,D0.L)
                    3350   ; DisassembleInstruction(ProgramBreakPointAddress) ;
00002068  2F04      3351          move.l    D4,-(A7)
0000206A  4EB9 0000 3352          jsr       _DisassembleInstruction
0000206E  36B6      
00002070  584F      3353          addq.w    #4,A7
                    3354   ; FormatInstructionForTrace() ;
00002072  4EB8 12EA 3355          jsr       _FormatInstructionForTrace
                    3356   ; printf("\r\nBreak Point Set at Address: [$%08x], Instruction = %s", ProgramBreakPointAddress, Instruction) ;
00002076  4879 0B00 3357          pea       _Instruction.L
0000207A  04E2      
0000207C  2F04      3358          move.l    D4,-(A7)
0000207E  4879 0000 3359          pea       @m68kde~2_84.L
00002082  692C      
00002084  4E92      3360          jsr       (A2)
00002086  DEFC 000C 3361          add.w     #12,A7
                    3362   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e)    ;   // put a Trap14 instruction at the user specified address
0000208A  2044      3363          move.l    D4,A0
0000208C  30BC 4E4E 3364          move.w    #20046,(A0)
                    3365   ; BreakPointAddress[i] = BPAddress ;                              // record the address of this break point in the debugger
00002090  2002      3366          move.l    D2,D0
00002092  E588      3367          lsl.l     #2,D0
00002094  41F9 0B00 3368          lea       _BreakPointAddress.L,A0
00002098  012E      
0000209A  2183 0800 3369          move.l    D3,0(A0,D0.L)
                    3370   ; printf("\r\n") ;
0000209E  4879 0000 3371          pea       @m68kde~2_1.L
000020A2  60A6      
000020A4  4E92      3372          jsr       (A2)
000020A6  584F      3373          addq.w    #4,A7
                    3374   ; BreakPointDisplay() ;       // display the break points
000020A8  4EB8 1B30 3375          jsr       _BreakPointDisplay
                    3376   ; return ;
000020AC  6006      3377          bra.s     SetBreakPoint_15
                    3378   SetBreakPoint_18:
000020AE  5282      3379          addq.l    #1,D2
000020B0  6000 FF64 3380          bra       SetBreakPoint_13
                    3381   SetBreakPoint_15:
000020B4  4CDF 0C1C 3382          movem.l   (A7)+,D2/D3/D4/A2/A3
000020B8  4E5E      3383          unlk      A6
000020BA  4E75      3384          rts
                    3385   ; }
                    3386   ; }
                    3387   ; }
                    3388   ; void SetWatchPoint(void)
                    3389   ; {
                    3390   _SetWatchPoint:
000020BC  4E56 FFF8 3391          link      A6,#-8
000020C0  48E7 3030 3392          movem.l   D2/D3/A2/A3,-(A7)
000020C4  45F9 0000 3393          lea       _printf.L,A2
000020C8  5756      
000020CA  47F9 0B00 3394          lea       _WatchPointSetOrCleared.L,A3
000020CE  01A2      
                    3395   ; int i ;
                    3396   ; int WPNumber;
                    3397   ; int WPAddress;
                    3398   ; volatile unsigned short int *ProgramWatchPointAddress ;
                    3399   ; // see if any free break points
                    3400   ; for(i = 0; i < 8; i ++) {
000020D0  4282      3401          clr.l     D2
                    3402   SetWatchPoint_1:
000020D2  0C82 0000 3403          cmp.l     #8,D2
000020D6  0008      
000020D8  6C10      3404          bge.s     SetWatchPoint_3
                    3405   ; if( WatchPointSetOrCleared[i] == 0)
000020DA  2002      3406          move.l    D2,D0
000020DC  E588      3407          lsl.l     #2,D0
000020DE  2033 0800 3408          move.l    0(A3,D0.L),D0
000020E2  6602      3409          bne.s     SetWatchPoint_4
                    3410   ; break ;         // if spare WP found allow user to set it
000020E4  6004      3411          bra.s     SetWatchPoint_3
                    3412   SetWatchPoint_4:
000020E6  5282      3413          addq.l    #1,D2
000020E8  60E8      3414          bra       SetWatchPoint_1
                    3415   SetWatchPoint_3:
                    3416   ; }
                    3417   ; if(i == 8) {
000020EA  0C82 0000 3418          cmp.l     #8,D2
000020EE  0008      
000020F0  660E      3419          bne.s     SetWatchPoint_6
                    3420   ; printf("\r\nNo FREE Watch Points.....") ;
000020F2  4879 0000 3421          pea       @m68kde~2_85.L
000020F6  6964      
000020F8  4E92      3422          jsr       (A2)
000020FA  584F      3423          addq.w    #4,A7
                    3424   ; return ;
000020FC  6000 008C 3425          bra       SetWatchPoint_11
                    3426   SetWatchPoint_6:
                    3427   ; }
                    3428   ; printf("\r\nWatch Point Address: ") ;
00002100  4879 0000 3429          pea       @m68kde~2_86.L
00002104  6980      
00002106  4E92      3430          jsr       (A2)
00002108  584F      3431          addq.w    #4,A7
                    3432   ; WPAddress = Get8HexDigits(0) ;
0000210A  42A7      3433          clr.l     -(A7)
0000210C  4EB8 0CA4 3434          jsr       _Get8HexDigits
00002110  584F      3435          addq.w    #4,A7
00002112  2600      3436          move.l    D0,D3
                    3437   ; // search for first free wp or existing same wp
                    3438   ; for(i = 0; i < 8; i++)  {
00002114  4282      3439          clr.l     D2
                    3440   SetWatchPoint_9:
00002116  0C82 0000 3441          cmp.l     #8,D2
0000211A  0008      
0000211C  6C00 006C 3442          bge       SetWatchPoint_11
                    3443   ; if(WatchPointAddress[i] == WPAddress && WPAddress != 0)   {     //so we can set a wp at 0
00002120  2002      3444          move.l    D2,D0
00002122  E588      3445          lsl.l     #2,D0
00002124  41F9 0B00 3446          lea       _WatchPointAddress.L,A0
00002128  0182      
0000212A  B6B0 0800 3447          cmp.l     0(A0,D0.L),D3
0000212E  6614      3448          bne.s     SetWatchPoint_12
00002130  4A83      3449          tst.l     D3
00002132  6710      3450          beq.s     SetWatchPoint_12
                    3451   ; printf("\r\nError: Watch Point Already Set at Address : %08x\r\n", WPAddress) ;
00002134  2F03      3452          move.l    D3,-(A7)
00002136  4879 0000 3453          pea       @m68kde~2_87.L
0000213A  6998      
0000213C  4E92      3454          jsr       (A2)
0000213E  504F      3455          addq.w    #8,A7
                    3456   ; return ;
00002140  6000 0048 3457          bra       SetWatchPoint_11
                    3458   SetWatchPoint_12:
                    3459   ; }
                    3460   ; if(WatchPointSetOrCleared[i] == 0) {
00002144  2002      3461          move.l    D2,D0
00002146  E588      3462          lsl.l     #2,D0
00002148  2033 0800 3463          move.l    0(A3,D0.L),D0
0000214C  6600 0038 3464          bne       SetWatchPoint_14
                    3465   ; WatchPointSetOrCleared[i] = 1 ;                                 // mark this watchpoint as set
00002150  2002      3466          move.l    D2,D0
00002152  E588      3467          lsl.l     #2,D0
00002154  27BC 0000 3468          move.l    #1,0(A3,D0.L)
00002158  0001 0800 
                    3469   ; printf("\r\nWatch Point Set at Address: [$%08x]", WPAddress) ;
0000215C  2F03      3470          move.l    D3,-(A7)
0000215E  4879 0000 3471          pea       @m68kde~2_88.L
00002162  69CE      
00002164  4E92      3472          jsr       (A2)
00002166  504F      3473          addq.w    #8,A7
                    3474   ; WatchPointAddress[i] = WPAddress ;                              // record the address of this watch point in the debugger
00002168  2002      3475          move.l    D2,D0
0000216A  E588      3476          lsl.l     #2,D0
0000216C  41F9 0B00 3477          lea       _WatchPointAddress.L,A0
00002170  0182      
00002172  2183 0800 3478          move.l    D3,0(A0,D0.L)
                    3479   ; printf("\r\n") ;
00002176  4879 0000 3480          pea       @m68kde~2_1.L
0000217A  60A6      
0000217C  4E92      3481          jsr       (A2)
0000217E  584F      3482          addq.w    #4,A7
                    3483   ; WatchPointDisplay() ;       // display the break points
00002180  4EB8 1C2A 3484          jsr       _WatchPointDisplay
                    3485   ; return ;
00002184  6004      3486          bra.s     SetWatchPoint_11
                    3487   SetWatchPoint_14:
00002186  5282      3488          addq.l    #1,D2
00002188  608C      3489          bra       SetWatchPoint_9
                    3490   SetWatchPoint_11:
0000218A  4CDF 0C0C 3491          movem.l   (A7)+,D2/D3/A2/A3
0000218E  4E5E      3492          unlk      A6
00002190  4E75      3493          rts
                    3494   ; }
                    3495   ; }
                    3496   ; }
                    3497   ; void HandleBreakPoint(void)
                    3498   ; {
                    3499   _HandleBreakPoint:
00002192  4E56 FFFC 3500          link      A6,#-4
00002196  48E7 0038 3501          movem.l   A2/A3/A4,-(A7)
0000219A  45F9 0B00 3502          lea       _i.L,A2
0000219E  00C4      
000021A0  47F9 0000 3503          lea       _printf.L,A3
000021A4  5756      
000021A6  49F9 0B00 3504          lea       _PC.L,A4
000021AA  0120      
                    3505   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3506   ; // now we have to put the break point back to run the instruction
                    3507   ; // PC will contain the address of the TRAP instruction but advanced by two bytes so lets play with that
                    3508   ; PC = PC - 2 ;  // ready for user to resume after reaching breakpoint
000021AC  5594      3509          subq.l    #2,(A4)
                    3510   ; printf("\r\n\r\n\r\n\r\n@BREAKPOINT") ;
000021AE  4879 0000 3511          pea       @m68kde~2_89.L
000021B2  69F4      
000021B4  4E93      3512          jsr       (A3)
000021B6  584F      3513          addq.w    #4,A7
                    3514   ; printf("\r\nSingle Step : [ON]") ;
000021B8  4879 0000 3515          pea       @m68kde~2_90.L
000021BC  6A08      
000021BE  4E93      3516          jsr       (A3)
000021C0  584F      3517          addq.w    #4,A7
                    3518   ; printf("\r\nBreakPoints : [Enabled]") ;
000021C2  4879 0000 3519          pea       @m68kde~2_91.L
000021C6  6A1E      
000021C8  4E93      3520          jsr       (A3)
000021CA  584F      3521          addq.w    #4,A7
                    3522   ; // now clear the break point (put original instruction back)
                    3523   ; ProgramBreakPointAddress = PC ;
000021CC  2D54 FFFC 3524          move.l    (A4),-4(A6)
                    3525   ; for(i = 0; i < 8; i ++) {
000021D0  4292      3526          clr.l     (A2)
                    3527   HandleBreakPoint_1:
000021D2  2012      3528          move.l    (A2),D0
000021D4  0C80 0000 3529          cmp.l     #8,D0
000021D8  0008      
000021DA  6400 0056 3530          bhs       HandleBreakPoint_3
                    3531   ; if(BreakPointAddress[i] == PC) {        // if we have found the breakpoint
000021DE  2012      3532          move.l    (A2),D0
000021E0  E588      3533          lsl.l     #2,D0
000021E2  41F9 0B00 3534          lea       _BreakPointAddress.L,A0
000021E6  012E      
000021E8  2230 0800 3535          move.l    0(A0,D0.L),D1
000021EC  B294      3536          cmp.l     (A4),D1
000021EE  6600 003E 3537          bne       HandleBreakPoint_4
                    3538   ; BreakPointAddress[i] = 0 ;
000021F2  2012      3539          move.l    (A2),D0
000021F4  E588      3540          lsl.l     #2,D0
000021F6  41F9 0B00 3541          lea       _BreakPointAddress.L,A0
000021FA  012E      
000021FC  42B0 0800 3542          clr.l     0(A0,D0.L)
                    3543   ; BreakPointSetOrCleared[i] = 0 ;
00002200  2012      3544          move.l    (A2),D0
00002202  E588      3545          lsl.l     #2,D0
00002204  41F9 0B00 3546          lea       _BreakPointSetOrCleared.L,A0
00002208  015E      
0000220A  42B0 0800 3547          clr.l     0(A0,D0.L)
                    3548   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
0000220E  2012      3549          move.l    (A2),D0
00002210  E388      3550          lsl.l     #1,D0
00002212  41F9 0B00 3551          lea       _BreakPointInstruction.L,A0
00002216  014E      
00002218  226E FFFC 3552          move.l    -4(A6),A1
0000221C  32B0 0800 3553          move.w    0(A0,D0.L),(A1)
                    3554   ; BreakPointInstruction[i] = 0 ;
00002220  2012      3555          move.l    (A2),D0
00002222  E388      3556          lsl.l     #1,D0
00002224  41F9 0B00 3557          lea       _BreakPointInstruction.L,A0
00002228  014E      
0000222A  4270 0800 3558          clr.w     0(A0,D0.L)
                    3559   HandleBreakPoint_4:
0000222E  5292      3560          addq.l    #1,(A2)
00002230  60A0      3561          bra       HandleBreakPoint_1
                    3562   HandleBreakPoint_3:
                    3563   ; }
                    3564   ; }
                    3565   ; DumpRegisters() ;
00002232  4EB8 135E 3566          jsr       _DumpRegisters
                    3567   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
00002236  4879 0000 3568          pea       @m68kde~2_52.L
0000223A  6580      
0000223C  4E93      3569          jsr       (A3)
0000223E  584F      3570          addq.w    #4,A7
                    3571   ; printf("\r\nPress <ESC> to Resume User Program\r\n") ;
00002240  4879 0000 3572          pea       @m68kde~2_92.L
00002244  6A38      
00002246  4E93      3573          jsr       (A3)
00002248  584F      3574          addq.w    #4,A7
                    3575   ; menu() ;
0000224A  4EB9 0000 3576          jsr       _menu
0000224E  24A0      
00002250  4CDF 1C00 3577          movem.l   (A7)+,A2/A3/A4
00002254  4E5E      3578          unlk      A6
00002256  4E75      3579          rts
                    3580   ; }
                    3581   ; void UnknownCommand()
                    3582   ; {
                    3583   _UnknownCommand:
                    3584   ; printf("\r\nUnknown Command.....\r\n") ;
00002258  4879 0000 3585          pea       @m68kde~2_93.L
0000225C  6A60      
0000225E  4EB9 0000 3586          jsr       _printf
00002262  5756      
00002264  584F      3587          addq.w    #4,A7
                    3588   ; Help() ;
00002266  4EB9 0000 3589          jsr       _Help
0000226A  23BC      
0000226C  4E75      3590          rts
                    3591   ; }
                    3592   ; // system when the users program executes a TRAP #15 instruction to halt program and return to debug monitor
                    3593   ; void CallDebugMonitor(void)
                    3594   ; {
                    3595   _CallDebugMonitor:
                    3596   ; printf("\r\nProgram Ended (TRAP #15)....") ;
0000226E  4879 0000 3597          pea       @m68kde~2_94.L
00002272  6A7A      
00002274  4EB9 0000 3598          jsr       _printf
00002278  5756      
0000227A  584F      3599          addq.w    #4,A7
                    3600   ; menu();
0000227C  4EB9 0000 3601          jsr       _menu
00002280  24A0      
00002282  4E75      3602          rts
                    3603   ; }
                    3604   ; void Breakpoint(void)
                    3605   ; {
                    3606   _Breakpoint:
00002284  2F02      3607          move.l    D2,-(A7)
                    3608   ; char c;
                    3609   ; c = toupper(_getch());
00002286  2F00      3610          move.l    D0,-(A7)
00002288  4EB8 0B68 3611          jsr       __getch
0000228C  2200      3612          move.l    D0,D1
0000228E  201F      3613          move.l    (A7)+,D0
00002290  2F01      3614          move.l    D1,-(A7)
00002292  4EB9 0000 3615          jsr       _toupper
00002296  56EC      
00002298  584F      3616          addq.w    #4,A7
0000229A  1400      3617          move.b    D0,D2
                    3618   ; if( c == (char)('D'))                                      // BreakPoint Display
0000229C  0C02 0044 3619          cmp.b     #68,D2
000022A0  6608      3620          bne.s     Breakpoint_1
                    3621   ; BreakPointDisplay() ;
000022A2  4EB8 1B30 3622          jsr       _BreakPointDisplay
000022A6  6000 0054 3623          bra       Breakpoint_10
                    3624   Breakpoint_1:
                    3625   ; else if(c == (char)('K')) {                                 // breakpoint Kill
000022AA  0C02 004B 3626          cmp.b     #75,D2
000022AE  6630      3627          bne.s     Breakpoint_3
                    3628   ; printf("\r\nKill All Break Points...(y/n)?") ;
000022B0  4879 0000 3629          pea       @m68kde~2_95.L
000022B4  6A9A      
000022B6  4EB9 0000 3630          jsr       _printf
000022BA  5756      
000022BC  584F      3631          addq.w    #4,A7
                    3632   ; c = toupper(_getch());
000022BE  2F00      3633          move.l    D0,-(A7)
000022C0  4EB8 0B68 3634          jsr       __getch
000022C4  2200      3635          move.l    D0,D1
000022C6  201F      3636          move.l    (A7)+,D0
000022C8  2F01      3637          move.l    D1,-(A7)
000022CA  4EB9 0000 3638          jsr       _toupper
000022CE  56EC      
000022D0  584F      3639          addq.w    #4,A7
000022D2  1400      3640          move.b    D0,D2
                    3641   ; if(c == (char)('Y'))
000022D4  0C02 0059 3642          cmp.b     #89,D2
000022D8  6604      3643          bne.s     Breakpoint_5
                    3644   ; KillAllBreakPoints() ;
000022DA  4EB8 1EEE 3645          jsr       _KillAllBreakPoints
                    3646   Breakpoint_5:
000022DE  601C      3647          bra.s     Breakpoint_10
                    3648   Breakpoint_3:
                    3649   ; }
                    3650   ; else if(c == (char)('S')) {
000022E0  0C02 0053 3651          cmp.b     #83,D2
000022E4  6606      3652          bne.s     Breakpoint_7
                    3653   ; SetBreakPoint() ;
000022E6  4EB8 1F86 3654          jsr       _SetBreakPoint
000022EA  6010      3655          bra.s     Breakpoint_10
                    3656   Breakpoint_7:
                    3657   ; }
                    3658   ; else if(c == (char)('C')) {
000022EC  0C02 0043 3659          cmp.b     #67,D2
000022F0  6606      3660          bne.s     Breakpoint_9
                    3661   ; BreakPointClear() ;
000022F2  4EB8 1CD6 3662          jsr       _BreakPointClear
000022F6  6004      3663          bra.s     Breakpoint_10
                    3664   Breakpoint_9:
                    3665   ; }
                    3666   ; else
                    3667   ; UnknownCommand() ;
000022F8  4EB8 2258 3668          jsr       _UnknownCommand
                    3669   Breakpoint_10:
000022FC  241F      3670          move.l    (A7)+,D2
000022FE  4E75      3671          rts
                    3672   ; }
                    3673   ; void Watchpoint(void)
                    3674   ; {
                    3675   _Watchpoint:
00002300  2F02      3676          move.l    D2,-(A7)
                    3677   ; char c;
                    3678   ; c = toupper(_getch());
00002302  2F00      3679          move.l    D0,-(A7)
00002304  4EB8 0B68 3680          jsr       __getch
00002308  2200      3681          move.l    D0,D1
0000230A  201F      3682          move.l    (A7)+,D0
0000230C  2F01      3683          move.l    D1,-(A7)
0000230E  4EB9 0000 3684          jsr       _toupper
00002312  56EC      
00002314  584F      3685          addq.w    #4,A7
00002316  1400      3686          move.b    D0,D2
                    3687   ; if( c == (char)('D'))                                      // WatchPoint Display
00002318  0C02 0044 3688          cmp.b     #68,D2
0000231C  6608      3689          bne.s     Watchpoint_1
                    3690   ; WatchPointDisplay() ;
0000231E  4EB8 1C2A 3691          jsr       _WatchPointDisplay
00002322  6000 0054 3692          bra       Watchpoint_10
                    3693   Watchpoint_1:
                    3694   ; else if(c == (char)('K')) {                                 // wtahcpoint Kill
00002326  0C02 004B 3695          cmp.b     #75,D2
0000232A  6630      3696          bne.s     Watchpoint_3
                    3697   ; printf("\r\nKill All Watch Points...(y/n)?") ;
0000232C  4879 0000 3698          pea       @m68kde~2_96.L
00002330  6ABC      
00002332  4EB9 0000 3699          jsr       _printf
00002336  5756      
00002338  584F      3700          addq.w    #4,A7
                    3701   ; c = toupper(_getch());
0000233A  2F00      3702          move.l    D0,-(A7)
0000233C  4EB8 0B68 3703          jsr       __getch
00002340  2200      3704          move.l    D0,D1
00002342  201F      3705          move.l    (A7)+,D0
00002344  2F01      3706          move.l    D1,-(A7)
00002346  4EB9 0000 3707          jsr       _toupper
0000234A  56EC      
0000234C  584F      3708          addq.w    #4,A7
0000234E  1400      3709          move.b    D0,D2
                    3710   ; if(c == (char)('Y'))
00002350  0C02 0059 3711          cmp.b     #89,D2
00002354  6604      3712          bne.s     Watchpoint_5
                    3713   ; KillAllWatchPoints() ;
00002356  4EB8 1F56 3714          jsr       _KillAllWatchPoints
                    3715   Watchpoint_5:
0000235A  601C      3716          bra.s     Watchpoint_10
                    3717   Watchpoint_3:
                    3718   ; }
                    3719   ; else if(c == (char)('S')) {
0000235C  0C02 0053 3720          cmp.b     #83,D2
00002360  6606      3721          bne.s     Watchpoint_7
                    3722   ; SetWatchPoint() ;
00002362  4EB8 20BC 3723          jsr       _SetWatchPoint
00002366  6010      3724          bra.s     Watchpoint_10
                    3725   Watchpoint_7:
                    3726   ; }
                    3727   ; else if(c == (char)('C')) {
00002368  0C02 0043 3728          cmp.b     #67,D2
0000236C  6606      3729          bne.s     Watchpoint_9
                    3730   ; WatchPointClear() ;
0000236E  4EB8 1DB0 3731          jsr       _WatchPointClear
00002372  6004      3732          bra.s     Watchpoint_10
                    3733   Watchpoint_9:
                    3734   ; }
                    3735   ; else
                    3736   ; UnknownCommand() ;
00002374  4EB8 2258 3737          jsr       _UnknownCommand
                    3738   Watchpoint_10:
00002378  241F      3739          move.l    (A7)+,D2
0000237A  4E75      3740          rts
                    3741   ; }
                    3742   ; void DMenu(void)
                    3743   ; {
                    3744   _DMenu:
0000237C  2F02      3745          move.l    D2,-(A7)
                    3746   ; char c;
                    3747   ; c = toupper(_getch());
0000237E  2F00      3748          move.l    D0,-(A7)
00002380  4EB8 0B68 3749          jsr       __getch
00002384  2200      3750          move.l    D0,D1
00002386  201F      3751          move.l    (A7)+,D0
00002388  2F01      3752          move.l    D1,-(A7)
0000238A  4EB9 0000 3753          jsr       _toupper
0000238E  56EC      
00002390  584F      3754          addq.w    #4,A7
00002392  1400      3755          move.b    D0,D2
                    3756   ; if( c == (char)('U'))                                     // Dump Memory
00002394  0C02 0055 3757          cmp.b     #85,D2
00002398  6606      3758          bne.s     DMenu_1
                    3759   ; DumpMemory() ;
0000239A  4EB8 0EE0 3760          jsr       _DumpMemory
0000239E  6018      3761          bra.s     DMenu_4
                    3762   DMenu_1:
                    3763   ; else if(c == (char)('I'))   {
000023A0  0C02 0049 3764          cmp.b     #73,D2
000023A4  660E      3765          bne.s     DMenu_3
                    3766   ; DisableBreakPoints() ;
000023A6  4EB8 1E52 3767          jsr       _DisableBreakPoints
                    3768   ; DisassembleProgram() ;
000023AA  4EB8 0D00 3769          jsr       _DisassembleProgram
                    3770   ; EnableBreakPoints() ;
000023AE  4EB8 1EA6 3771          jsr       _EnableBreakPoints
000023B2  6004      3772          bra.s     DMenu_4
                    3773   DMenu_3:
                    3774   ; }
                    3775   ; else
                    3776   ; UnknownCommand() ;
000023B4  4EB8 2258 3777          jsr       _UnknownCommand
                    3778   DMenu_4:
000023B8  241F      3779          move.l    (A7)+,D2
000023BA  4E75      3780          rts
                    3781   ; }
                    3782   ; void Help(void)
                    3783   ; {
                    3784   _Help:
000023BC  48E7 2020 3785          movem.l   D2/A2,-(A7)
000023C0  45F9 0000 3786          lea       _printf.L,A2
000023C4  5756      
                    3787   ; char *banner = "\r\n----------------------------------------------------------------" ;
000023C6  41F9 0000 3788          lea       @m68kde~2_97.L,A0
000023CA  6ADE      
000023CC  2408      3789          move.l    A0,D2
                    3790   ; printf(banner) ;
000023CE  2F02      3791          move.l    D2,-(A7)
000023D0  4E92      3792          jsr       (A2)
000023D2  584F      3793          addq.w    #4,A7
                    3794   ; printf("\r\n  Debugger Command Summary") ;
000023D4  4879 0000 3795          pea       @m68kde~2_98.L
000023D8  6B22      
000023DA  4E92      3796          jsr       (A2)
000023DC  584F      3797          addq.w    #4,A7
                    3798   ; printf(banner) ;
000023DE  2F02      3799          move.l    D2,-(A7)
000023E0  4E92      3800          jsr       (A2)
000023E2  584F      3801          addq.w    #4,A7
                    3802   ; printf("\r\n  .(reg)       - Change Registers: e.g A0-A7,D0-D7,PC,SSP,USP,SR");
000023E4  4879 0000 3803          pea       @m68kde~2_99.L
000023E8  6B40      
000023EA  4E92      3804          jsr       (A2)
000023EC  584F      3805          addq.w    #4,A7
                    3806   ; printf("\r\n  BD/BS/BC/BK  - Break Point: Display/Set/Clear/Kill") ;
000023EE  4879 0000 3807          pea       @m68kde~2_100.L
000023F2  6B84      
000023F4  4E92      3808          jsr       (A2)
000023F6  584F      3809          addq.w    #4,A7
                    3810   ; printf("\r\n  C            - Copy Program from Flash to Main Memory") ;
000023F8  4879 0000 3811          pea       @m68kde~2_101.L
000023FC  6BBC      
000023FE  4E92      3812          jsr       (A2)
00002400  584F      3813          addq.w    #4,A7
                    3814   ; printf("\r\n  DI           - Disassemble Program");
00002402  4879 0000 3815          pea       @m68kde~2_102.L
00002406  6BF6      
00002408  4E92      3816          jsr       (A2)
0000240A  584F      3817          addq.w    #4,A7
                    3818   ; printf("\r\n  DU           - Dump Memory Contents to Screen") ;
0000240C  4879 0000 3819          pea       @m68kde~2_103.L
00002410  6C1E      
00002412  4E92      3820          jsr       (A2)
00002414  584F      3821          addq.w    #4,A7
                    3822   ; printf("\r\n  E            - Enter String into Memory") ;
00002416  4879 0000 3823          pea       @m68kde~2_104.L
0000241A  6C50      
0000241C  4E92      3824          jsr       (A2)
0000241E  584F      3825          addq.w    #4,A7
                    3826   ; printf("\r\n  F            - Fill Memory with Data") ;
00002420  4879 0000 3827          pea       @m68kde~2_105.L
00002424  6C7C      
00002426  4E92      3828          jsr       (A2)
00002428  584F      3829          addq.w    #4,A7
                    3830   ; printf("\r\n  G            - Go Program Starting at Address: $%08X", PC) ;
0000242A  2F39 0B00 3831          move.l    _PC.L,-(A7)
0000242E  0120      
00002430  4879 0000 3832          pea       @m68kde~2_106.L
00002434  6CA6      
00002436  4E92      3833          jsr       (A2)
00002438  504F      3834          addq.w    #8,A7
                    3835   ; printf("\r\n  L            - Load Program (.HEX file) from Laptop") ;
0000243A  4879 0000 3836          pea       @m68kde~2_107.L
0000243E  6CE0      
00002440  4E92      3837          jsr       (A2)
00002442  584F      3838          addq.w    #4,A7
                    3839   ; printf("\r\n  M            - Memory Examine and Change");
00002444  4879 0000 3840          pea       @m68kde~2_108.L
00002448  6D18      
0000244A  4E92      3841          jsr       (A2)
0000244C  584F      3842          addq.w    #4,A7
                    3843   ; printf("\r\n  P            - Program Flash Memory with User Program") ;
0000244E  4879 0000 3844          pea       @m68kde~2_109.L
00002452  6D46      
00002454  4E92      3845          jsr       (A2)
00002456  584F      3846          addq.w    #4,A7
                    3847   ; printf("\r\n  R            - Display 68000 Registers") ;
00002458  4879 0000 3848          pea       @m68kde~2_110.L
0000245C  6D80      
0000245E  4E92      3849          jsr       (A2)
00002460  584F      3850          addq.w    #4,A7
                    3851   ; printf("\r\n  S            - Toggle ON/OFF Single Step Mode") ;
00002462  4879 0000 3852          pea       @m68kde~2_111.L
00002466  6DAC      
00002468  4E92      3853          jsr       (A2)
0000246A  584F      3854          addq.w    #4,A7
                    3855   ; printf("\r\n  TM           - Test Memory") ;
0000246C  4879 0000 3856          pea       @m68kde~2_112.L
00002470  6DDE      
00002472  4E92      3857          jsr       (A2)
00002474  584F      3858          addq.w    #4,A7
                    3859   ; printf("\r\n  TS           - Test Switches: SW7-0") ;
00002476  4879 0000 3860          pea       @m68kde~2_113.L
0000247A  6DFE      
0000247C  4E92      3861          jsr       (A2)
0000247E  584F      3862          addq.w    #4,A7
                    3863   ; printf("\r\n  TD           - Test Displays: LEDs and 7-Segment") ;
00002480  4879 0000 3864          pea       @m68kde~2_114.L
00002484  6E26      
00002486  4E92      3865          jsr       (A2)
00002488  584F      3866          addq.w    #4,A7
                    3867   ; printf("\r\n  WD/WS/WC/WK  - Watch Point: Display/Set/Clear/Kill") ;
0000248A  4879 0000 3868          pea       @m68kde~2_115.L
0000248E  6E5C      
00002490  4E92      3869          jsr       (A2)
00002492  584F      3870          addq.w    #4,A7
                    3871   ; printf(banner) ;
00002494  2F02      3872          move.l    D2,-(A7)
00002496  4E92      3873          jsr       (A2)
00002498  584F      3874          addq.w    #4,A7
0000249A  4CDF 0404 3875          movem.l   (A7)+,D2/A2
0000249E  4E75      3876          rts
                    3877   ; }
                    3878   ; void menu(void)
                    3879   ; {
                    3880   _menu:
000024A0  48E7 303C 3881          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
000024A4  45F9 0000 3882          lea       _printf.L,A2
000024A8  5756      
000024AA  47F9 0B00 3883          lea       _Trace.L,A3
000024AE  00D8      
000024B0  49F9 0B00 3884          lea       _x.L,A4
000024B4  00C8      
000024B6  4BF9 0B00 3885          lea       _SR.L,A5
000024BA  012C      
                    3886   ; char c,c1 ;
                    3887   ; while(1)    {
                    3888   menu_1:
                    3889   ; FlushKeyboard() ;               // dump unread characters from keyboard
000024BC  4EB8 0BA6 3890          jsr       _FlushKeyboard
                    3891   ; printf("\r\n#") ;
000024C0  4879 0000 3892          pea       @m68kde~2_116.L
000024C4  6E94      
000024C6  4E92      3893          jsr       (A2)
000024C8  584F      3894          addq.w    #4,A7
                    3895   ; c = toupper(_getch());
000024CA  2F00      3896          move.l    D0,-(A7)
000024CC  4EB8 0B68 3897          jsr       __getch
000024D0  2200      3898          move.l    D0,D1
000024D2  201F      3899          move.l    (A7)+,D0
000024D4  2F01      3900          move.l    D1,-(A7)
000024D6  4EB9 0000 3901          jsr       _toupper
000024DA  56EC      
000024DC  584F      3902          addq.w    #4,A7
000024DE  1400      3903          move.b    D0,D2
                    3904   ; if( c == (char)('L'))                  // load s record file
000024E0  0C02 004C 3905          cmp.b     #76,D2
000024E4  6608      3906          bne.s     menu_4
                    3907   ; Load_SRecordFile() ;
000024E6  4EB8 104A 3908          jsr       _Load_SRecordFile
000024EA  6000 021E 3909          bra       menu_46
                    3910   menu_4:
                    3911   ; else if( c == (char)('D'))             // dump memory
000024EE  0C02 0044 3912          cmp.b     #68,D2
000024F2  6608      3913          bne.s     menu_6
                    3914   ; DMenu() ;
000024F4  4EB8 237C 3915          jsr       _DMenu
000024F8  6000 0210 3916          bra       menu_46
                    3917   menu_6:
                    3918   ; else if( c == (char)('E'))             // Enter String into memory
000024FC  0C02 0045 3919          cmp.b     #69,D2
00002500  660A      3920          bne.s     menu_8
                    3921   ; EnterString() ;
00002502  4EB9 0000 3922          jsr       _EnterString
00002506  2852      
00002508  6000 0200 3923          bra       menu_46
                    3924   menu_8:
                    3925   ; else if( c == (char)('F'))             // fill memory
0000250C  0C02 0046 3926          cmp.b     #70,D2
00002510  6608      3927          bne.s     menu_10
                    3928   ; FillMemory() ;
00002512  4EB8 0FD0 3929          jsr       _FillMemory
00002516  6000 01F2 3930          bra       menu_46
                    3931   menu_10:
                    3932   ; else if( c == (char)('G'))  {           // go user program
0000251A  0C02 0047 3933          cmp.b     #71,D2
0000251E  6626      3934          bne.s     menu_12
                    3935   ; printf("\r\nProgram Running.....") ;
00002520  4879 0000 3936          pea       @m68kde~2_117.L
00002524  6E98      
00002526  4E92      3937          jsr       (A2)
00002528  584F      3938          addq.w    #4,A7
                    3939   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
0000252A  4879 0000 3940          pea       @m68kde~2_118.L
0000252E  6EB0      
00002530  4E92      3941          jsr       (A2)
00002532  584F      3942          addq.w    #4,A7
                    3943   ; GoFlag = 1 ;
00002534  23FC 0000 3944          move.l    #1,_GoFlag.L
00002538  0001 0B00 
0000253C  00DC      
                    3945   ; go() ;
0000253E  4EB8 08B8 3946          jsr       _go
00002542  6000 01C6 3947          bra       menu_46
                    3948   menu_12:
                    3949   ; }
                    3950   ; else if( c == (char)('M'))           // memory examine and modify
00002546  0C02 004D 3951          cmp.b     #77,D2
0000254A  6608      3952          bne.s     menu_14
                    3953   ; MemoryChange() ;
0000254C  4EB8 11D8 3954          jsr       _MemoryChange
00002550  6000 01B8 3955          bra       menu_46
                    3956   menu_14:
                    3957   ; else if( c == (char)('P'))            // Program Flash Chip
00002554  0C02 0050 3958          cmp.b     #80,D2
00002558  6608      3959          bne.s     menu_16
                    3960   ; ProgramFlashChip() ;
0000255A  4EB8 12D8 3961          jsr       _ProgramFlashChip
0000255E  6000 01AA 3962          bra       menu_46
                    3963   menu_16:
                    3964   ; else if( c == (char)('C'))             // copy flash chip to ram and go
00002562  0C02 0043 3965          cmp.b     #67,D2
00002566  6608      3966          bne.s     menu_18
                    3967   ; LoadFromFlashChip();
00002568  4EB8 12DA 3968          jsr       _LoadFromFlashChip
0000256C  6000 019C 3969          bra       menu_46
                    3970   menu_18:
                    3971   ; else if( c == (char)('R'))             // dump registers
00002570  0C02 0052 3972          cmp.b     #82,D2
00002574  6608      3973          bne.s     menu_20
                    3974   ; DumpRegisters() ;
00002576  4EB8 135E 3975          jsr       _DumpRegisters
0000257A  6000 018E 3976          bra       menu_46
                    3977   menu_20:
                    3978   ; else if( c == (char)('.'))           // change registers
0000257E  0C02 002E 3979          cmp.b     #46,D2
00002582  6608      3980          bne.s     menu_22
                    3981   ; ChangeRegisters() ;
00002584  4EB8 1874 3982          jsr       _ChangeRegisters
00002588  6000 0180 3983          bra       menu_46
                    3984   menu_22:
                    3985   ; else if( c == (char)('B'))              // breakpoint command
0000258C  0C02 0042 3986          cmp.b     #66,D2
00002590  6608      3987          bne.s     menu_24
                    3988   ; Breakpoint() ;
00002592  4EB8 2284 3989          jsr       _Breakpoint
00002596  6000 0172 3990          bra       menu_46
                    3991   menu_24:
                    3992   ; else if( c == (char)('T'))  {          // Test command
0000259A  0C02 0054 3993          cmp.b     #84,D2
0000259E  6600 0046 3994          bne       menu_26
                    3995   ; c1 = toupper(_getch()) ;
000025A2  2F00      3996          move.l    D0,-(A7)
000025A4  4EB8 0B68 3997          jsr       __getch
000025A8  2200      3998          move.l    D0,D1
000025AA  201F      3999          move.l    (A7)+,D0
000025AC  2F01      4000          move.l    D1,-(A7)
000025AE  4EB9 0000 4001          jsr       _toupper
000025B2  56EC      
000025B4  584F      4002          addq.w    #4,A7
000025B6  1600      4003          move.b    D0,D3
                    4004   ; if(c1 == (char)('M'))                    // memory test
000025B8  0C03 004D 4005          cmp.b     #77,D3
000025BC  6608      4006          bne.s     menu_28
                    4007   ; MemoryTest() ;
000025BE  4EB9 0000 4008          jsr       _MemoryTest
000025C2  28A2      
000025C4  601C      4009          bra.s     menu_33
                    4010   menu_28:
                    4011   ; else if( c1 == (char)('S'))              // Switch Test command
000025C6  0C03 0053 4012          cmp.b     #83,D3
000025CA  6606      4013          bne.s     menu_30
                    4014   ; SwitchTest() ;
000025CC  4EB8 0AA4 4015          jsr       _SwitchTest
000025D0  6010      4016          bra.s     menu_33
                    4017   menu_30:
                    4018   ; else if( c1 == (char)('D'))              // display Test command
000025D2  0C03 0044 4019          cmp.b     #68,D3
000025D6  6606      4020          bne.s     menu_32
                    4021   ; TestLEDS() ;
000025D8  4EB8 0A50 4022          jsr       _TestLEDS
000025DC  6004      4023          bra.s     menu_33
                    4024   menu_32:
                    4025   ; else
                    4026   ; UnknownCommand() ;
000025DE  4EB8 2258 4027          jsr       _UnknownCommand
                    4028   menu_33:
000025E2  6000 0126 4029          bra       menu_46
                    4030   menu_26:
                    4031   ; }
                    4032   ; else if( c == (char)(' ')) {             // Next instruction command
000025E6  0C02 0020 4033          cmp.b     #32,D2
000025EA  6636      4034          bne.s     menu_34
                    4035   ; DisableBreakPoints() ;
000025EC  4EB8 1E52 4036          jsr       _DisableBreakPoints
                    4037   ; if(Trace == 1 && GoFlag == 1)   {    // if the program is running and trace mode on then 'N' is valid
000025F0  2013      4038          move.l    (A3),D0
000025F2  0C80 0000 4039          cmp.l     #1,D0
000025F6  0001      
000025F8  661A      4040          bne.s     menu_36
000025FA  2039 0B00 4041          move.l    _GoFlag.L,D0
000025FE  00DC      
00002600  0C80 0000 4042          cmp.l     #1,D0
00002604  0001      
00002606  660C      4043          bne.s     menu_36
                    4044   ; TraceException = 1 ;             // generate a trace exception for the next instruction if user wants to single step though next instruction
00002608  13FC 0001 4045          move.b    #1,4194314
0000260C  0040 000A 
                    4046   ; return ;
00002610  6000 00FC 4047          bra       menu_38
                    4048   menu_36:
                    4049   ; }
                    4050   ; else
                    4051   ; printf("\r\nError: Press 'G' first to start program") ;
00002614  4879 0000 4052          pea       @m68kde~2_119.L
00002618  6EDE      
0000261A  4E92      4053          jsr       (A2)
0000261C  584F      4054          addq.w    #4,A7
0000261E  6000 00EA 4055          bra       menu_46
                    4056   menu_34:
                    4057   ; }
                    4058   ; else if( c == (char)('S')) {             // single step
00002622  0C02 0053 4059          cmp.b     #83,D2
00002626  6600 008C 4060          bne       menu_39
                    4061   ; if(Trace == 0) {
0000262A  2013      4062          move.l    (A3),D0
0000262C  6600 0050 4063          bne       menu_41
                    4064   ; DisableBreakPoints() ;
00002630  4EB8 1E52 4065          jsr       _DisableBreakPoints
                    4066   ; printf("\r\nSingle Step  :[ON]") ;
00002634  4879 0000 4067          pea       @m68kde~2_120.L
00002638  6F08      
0000263A  4E92      4068          jsr       (A2)
0000263C  584F      4069          addq.w    #4,A7
                    4070   ; printf("\r\nBreak Points :[Disabled]") ;
0000263E  4879 0000 4071          pea       @m68kde~2_51.L
00002642  6564      
00002644  4E92      4072          jsr       (A2)
00002646  584F      4073          addq.w    #4,A7
                    4074   ; SR = SR | (unsigned short int)(0x8000) ;    // set T bit in status register
00002648  0055 8000 4075          or.w      #32768,(A5)
                    4076   ; printf("\r\nPress 'G' to Trace Program from address $%X.....",PC) ;
0000264C  2F39 0B00 4077          move.l    _PC.L,-(A7)
00002650  0120      
00002652  4879 0000 4078          pea       @m68kde~2_121.L
00002656  6F1E      
00002658  4E92      4079          jsr       (A2)
0000265A  504F      4080          addq.w    #8,A7
                    4081   ; printf("\r\nPush <RESET Button> to Stop.....") ;
0000265C  4879 0000 4082          pea       @m68kde~2_122.L
00002660  6F52      
00002662  4E92      4083          jsr       (A2)
00002664  584F      4084          addq.w    #4,A7
                    4085   ; DumpRegisters() ;
00002666  4EB8 135E 4086          jsr       _DumpRegisters
                    4087   ; Trace = 1;
0000266A  26BC 0000 4088          move.l    #1,(A3)
0000266E  0001      
                    4089   ; TraceException = 1;
00002670  13FC 0001 4090          move.b    #1,4194314
00002674  0040 000A 
                    4091   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
00002678  28B8 0074 4092          move.l    116,(A4)
0000267C  6032      4093          bra.s     menu_42
                    4094   menu_41:
                    4095   ; }
                    4096   ; else {
                    4097   ; Trace = 0 ;
0000267E  4293      4098          clr.l     (A3)
                    4099   ; TraceException = 0 ;
00002680  4239 0040 4100          clr.b     4194314
00002684  000A      
                    4101   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
00002686  28B8 0074 4102          move.l    116,(A4)
                    4103   ; EnableBreakPoints() ;
0000268A  4EB8 1EA6 4104          jsr       _EnableBreakPoints
                    4105   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
0000268E  0255 7FFF 4106          and.w     #32767,(A5)
                    4107   ; printf("\r\nSingle Step : [OFF]") ;
00002692  4879 0000 4108          pea       @m68kde~2_123.L
00002696  6F76      
00002698  4E92      4109          jsr       (A2)
0000269A  584F      4110          addq.w    #4,A7
                    4111   ; printf("\r\nBreak Points :[Enabled]") ;
0000269C  4879 0000 4112          pea       @m68kde~2_124.L
000026A0  6F8C      
000026A2  4E92      4113          jsr       (A2)
000026A4  584F      4114          addq.w    #4,A7
                    4115   ; printf("\r\nPress <ESC> to Resume User Program.....") ;
000026A6  4879 0000 4116          pea       @m68kde~2_125.L
000026AA  6FA6      
000026AC  4E92      4117          jsr       (A2)
000026AE  584F      4118          addq.w    #4,A7
                    4119   menu_42:
000026B0  6000 0058 4120          bra       menu_46
                    4121   menu_39:
                    4122   ; }
                    4123   ; }
                    4124   ; else if(c == (char)(0x1b))  {   // if user choses to end trace and run program
000026B4  0C02 001B 4125          cmp.b     #27,D2
000026B8  6600 0040 4126          bne       menu_43
                    4127   ; Trace = 0;
000026BC  4293      4128          clr.l     (A3)
                    4129   ; TraceException = 0;
000026BE  4239 0040 4130          clr.b     4194314
000026C2  000A      
                    4131   ; x = *(unsigned int *)(0x00000074) ;   // read IRQ 5 vector to reset trace vector generator
000026C4  28B8 0074 4132          move.l    116,(A4)
                    4133   ; EnableBreakPoints() ;
000026C8  4EB8 1EA6 4134          jsr       _EnableBreakPoints
                    4135   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
000026CC  0255 7FFF 4136          and.w     #32767,(A5)
                    4137   ; printf("\r\nSingle Step  :[OFF]") ;
000026D0  4879 0000 4138          pea       @m68kde~2_126.L
000026D4  6FD0      
000026D6  4E92      4139          jsr       (A2)
000026D8  584F      4140          addq.w    #4,A7
                    4141   ; printf("\r\nBreak Points :[Enabled]");
000026DA  4879 0000 4142          pea       @m68kde~2_124.L
000026DE  6F8C      
000026E0  4E92      4143          jsr       (A2)
000026E2  584F      4144          addq.w    #4,A7
                    4145   ; printf("\r\nProgram Running.....") ;
000026E4  4879 0000 4146          pea       @m68kde~2_117.L
000026E8  6E98      
000026EA  4E92      4147          jsr       (A2)
000026EC  584F      4148          addq.w    #4,A7
                    4149   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
000026EE  4879 0000 4150          pea       @m68kde~2_118.L
000026F2  6EB0      
000026F4  4E92      4151          jsr       (A2)
000026F6  584F      4152          addq.w    #4,A7
                    4153   ; return ;
000026F8  6014      4154          bra.s     menu_38
                    4155   menu_43:
                    4156   ; }
                    4157   ; else if( c == (char)('W'))              // Watchpoint command
000026FA  0C02 0057 4158          cmp.b     #87,D2
000026FE  6606      4159          bne.s     menu_45
                    4160   ; Watchpoint() ;
00002700  4EB8 2300 4161          jsr       _Watchpoint
00002704  6004      4162          bra.s     menu_46
                    4163   menu_45:
                    4164   ; else
                    4165   ; UnknownCommand() ;
00002706  4EB8 2258 4166          jsr       _UnknownCommand
                    4167   menu_46:
0000270A  6000 FDB0 4168          bra       menu_1
                    4169   menu_38:
0000270E  4CDF 3C0C 4170          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
00002712  4E75      4171          rts
                    4172   ; }
                    4173   ; }
                    4174   ; void PrintErrorMessageandAbort(char *string) {
                    4175   _PrintErrorMessageandAbort:
00002714  4E56 0000 4176          link      A6,#0
                    4177   ; printf("\r\n\r\nProgram ABORT !!!!!!\r\n") ;
00002718  4879 0000 4178          pea       @m68kde~2_127.L
0000271C  6FE6      
0000271E  4EB9 0000 4179          jsr       _printf
00002722  5756      
00002724  584F      4180          addq.w    #4,A7
                    4181   ; printf("%s\r\n", string) ;
00002726  2F2E 0008 4182          move.l    8(A6),-(A7)
0000272A  4879 0000 4183          pea       @m68kde~2_128.L
0000272E  7002      
00002730  4EB9 0000 4184          jsr       _printf
00002734  5756      
00002736  504F      4185          addq.w    #8,A7
                    4186   ; menu() ;
00002738  4EB8 24A0 4187          jsr       _menu
0000273C  4E5E      4188          unlk      A6
0000273E  4E75      4189          rts
                    4190   ; }
                    4191   ; void IRQMessage(int level) {
                    4192   _IRQMessage:
00002740  4E56 0000 4193          link      A6,#0
                    4194   ; printf("\r\n\r\nProgram ABORT !!!!!");
00002744  4879 0000 4195          pea       @m68kde~2_129.L
00002748  7008      
0000274A  4EB9 0000 4196          jsr       _printf
0000274E  5756      
00002750  584F      4197          addq.w    #4,A7
                    4198   ; printf("\r\nUnhandled Interrupt: IRQ%d !!!!!", level) ;
00002752  2F2E 0008 4199          move.l    8(A6),-(A7)
00002756  4879 0000 4200          pea       @m68kde~2_130.L
0000275A  7020      
0000275C  4EB9 0000 4201          jsr       _printf
00002760  5756      
00002762  504F      4202          addq.w    #8,A7
                    4203   ; menu() ;
00002764  4EB8 24A0 4204          jsr       _menu
00002768  4E5E      4205          unlk      A6
0000276A  4E75      4206          rts
                    4207   ; }
                    4208   ; void UnhandledIRQ1(void) {
                    4209   _UnhandledIRQ1:
                    4210   ; IRQMessage(1);
0000276C  4878 0001 4211          pea       1
00002770  4EB8 2740 4212          jsr       _IRQMessage
00002774  584F      4213          addq.w    #4,A7
00002776  4E75      4214          rts
                    4215   ; }
                    4216   ; void UnhandledIRQ2(void) {
                    4217   _UnhandledIRQ2:
                    4218   ; IRQMessage(2);
00002778  4878 0002 4219          pea       2
0000277C  4EB8 2740 4220          jsr       _IRQMessage
00002780  584F      4221          addq.w    #4,A7
00002782  4E75      4222          rts
                    4223   ; }
                    4224   ; void UnhandledIRQ3(void){
                    4225   _UnhandledIRQ3:
                    4226   ; IRQMessage(3);
00002784  4878 0003 4227          pea       3
00002788  4EB8 2740 4228          jsr       _IRQMessage
0000278C  584F      4229          addq.w    #4,A7
0000278E  4E75      4230          rts
                    4231   ; }
                    4232   ; void UnhandledIRQ4(void) {
                    4233   _UnhandledIRQ4:
                    4234   ; IRQMessage(4);
00002790  4878 0004 4235          pea       4
00002794  4EB8 2740 4236          jsr       _IRQMessage
00002798  584F      4237          addq.w    #4,A7
0000279A  4E75      4238          rts
                    4239   ; }
                    4240   ; void UnhandledIRQ5(void) {
                    4241   _UnhandledIRQ5:
                    4242   ; IRQMessage(5);
0000279C  4878 0005 4243          pea       5
000027A0  4EB8 2740 4244          jsr       _IRQMessage
000027A4  584F      4245          addq.w    #4,A7
000027A6  4E75      4246          rts
                    4247   ; }
                    4248   ; void UnhandledIRQ6(void) {
                    4249   _UnhandledIRQ6:
                    4250   ; PrintErrorMessageandAbort("ADDRESS ERROR: 16 or 32 Bit Transfer to/from an ODD Address....") ;
000027A8  4879 0000 4251          pea       @m68kde~2_131.L
000027AC  7044      
000027AE  4EB8 2714 4252          jsr       _PrintErrorMessageandAbort
000027B2  584F      4253          addq.w    #4,A7
                    4254   ; menu() ;
000027B4  4EB8 24A0 4255          jsr       _menu
000027B8  4E75      4256          rts
                    4257   ; }
                    4258   ; void UnhandledIRQ7(void) {
                    4259   _UnhandledIRQ7:
                    4260   ; IRQMessage(7);
000027BA  4878 0007 4261          pea       7
000027BE  4EB8 2740 4262          jsr       _IRQMessage
000027C2  584F      4263          addq.w    #4,A7
000027C4  4E75      4264          rts
                    4265   ; }
                    4266   ; void UnhandledTrap(void) {
                    4267   _UnhandledTrap:
                    4268   ; PrintErrorMessageandAbort("Unhandled Trap !!!!!") ;
000027C6  4879 0000 4269          pea       @m68kde~2_132.L
000027CA  7084      
000027CC  4EB8 2714 4270          jsr       _PrintErrorMessageandAbort
000027D0  584F      4271          addq.w    #4,A7
000027D2  4E75      4272          rts
                    4273   ; }
                    4274   ; void BusError() {
                    4275   _BusError:
                    4276   ; PrintErrorMessageandAbort("BUS Error!") ;
000027D4  4879 0000 4277          pea       @m68kde~2_133.L
000027D8  709A      
000027DA  4EB8 2714 4278          jsr       _PrintErrorMessageandAbort
000027DE  584F      4279          addq.w    #4,A7
000027E0  4E75      4280          rts
                    4281   ; }
                    4282   ; void AddressError() {
                    4283   _AddressError:
                    4284   ; PrintErrorMessageandAbort("ADDRESS Error!") ;
000027E2  4879 0000 4285          pea       @m68kde~2_134.L
000027E6  70A6      
000027E8  4EB8 2714 4286          jsr       _PrintErrorMessageandAbort
000027EC  584F      4287          addq.w    #4,A7
000027EE  4E75      4288          rts
                    4289   ; }
                    4290   ; void IllegalInstruction() {
                    4291   _IllegalInstruction:
                    4292   ; PrintErrorMessageandAbort("ILLEGAL INSTRUCTION") ;
000027F0  4879 0000 4293          pea       @m68kde~2_135.L
000027F4  70B6      
000027F6  4EB8 2714 4294          jsr       _PrintErrorMessageandAbort
000027FA  584F      4295          addq.w    #4,A7
000027FC  4E75      4296          rts
                    4297   ; }
                    4298   ; void Dividebyzero() {
                    4299   _Dividebyzero:
                    4300   ; PrintErrorMessageandAbort("DIVIDE BY ZERO") ;
000027FE  4879 0000 4301          pea       @m68kde~2_136.L
00002802  70CA      
00002804  4EB8 2714 4302          jsr       _PrintErrorMessageandAbort
00002808  584F      4303          addq.w    #4,A7
0000280A  4E75      4304          rts
                    4305   ; }
                    4306   ; void Check() {
                    4307   _Check:
                    4308   ; PrintErrorMessageandAbort("'CHK' INSTRUCTION") ;
0000280C  4879 0000 4309          pea       @m68kde~2_137.L
00002810  70DA      
00002812  4EB8 2714 4310          jsr       _PrintErrorMessageandAbort
00002816  584F      4311          addq.w    #4,A7
00002818  4E75      4312          rts
                    4313   ; }
                    4314   ; void Trapv() {
                    4315   _Trapv:
                    4316   ; PrintErrorMessageandAbort("TRAPV INSTRUCTION") ;
0000281A  4879 0000 4317          pea       @m68kde~2_138.L
0000281E  70EC      
00002820  4EB8 2714 4318          jsr       _PrintErrorMessageandAbort
00002824  584F      4319          addq.w    #4,A7
00002826  4E75      4320          rts
                    4321   ; }
                    4322   ; void PrivError() {
                    4323   _PrivError:
                    4324   ; PrintErrorMessageandAbort("PRIVILEGE VIOLATION") ;
00002828  4879 0000 4325          pea       @m68kde~2_139.L
0000282C  70FE      
0000282E  4EB8 2714 4326          jsr       _PrintErrorMessageandAbort
00002832  584F      4327          addq.w    #4,A7
00002834  4E75      4328          rts
                    4329   ; }
                    4330   ; void UnitIRQ() {
                    4331   _UnitIRQ:
                    4332   ; PrintErrorMessageandAbort("UNINITIALISED IRQ") ;
00002836  4879 0000 4333          pea       @m68kde~2_140.L
0000283A  7112      
0000283C  4EB8 2714 4334          jsr       _PrintErrorMessageandAbort
00002840  584F      4335          addq.w    #4,A7
00002842  4E75      4336          rts
                    4337   ; }
                    4338   ; void Spurious() {
                    4339   _Spurious:
                    4340   ; PrintErrorMessageandAbort("SPURIOUS IRQ") ;
00002844  4879 0000 4341          pea       @m68kde~2_141.L
00002848  7124      
0000284A  4EB8 2714 4342          jsr       _PrintErrorMessageandAbort
0000284E  584F      4343          addq.w    #4,A7
00002850  4E75      4344          rts
                    4345   ; }
                    4346   ; void EnterString(void)
                    4347   ; {
                    4348   _EnterString:
00002852  4E56 FFFC 4349          link      A6,#-4
00002856  2F02      4350          move.l    D2,-(A7)
                    4351   ; unsigned char *Start;
                    4352   ; unsigned char c;
                    4353   ; printf("\r\nStart Address in Memory: ");
00002858  4879 0000 4354          pea       @m68kde~2_142.L
0000285C  7132      
0000285E  4EB9 0000 4355          jsr       _printf
00002862  5756      
00002864  584F      4356          addq.w    #4,A7
                    4357   ; Start = Get8HexDigits(0) ;
00002866  42A7      4358          clr.l     -(A7)
00002868  4EB8 0CA4 4359          jsr       _Get8HexDigits
0000286C  584F      4360          addq.w    #4,A7
0000286E  2400      4361          move.l    D0,D2
                    4362   ; printf("\r\nEnter String (ESC to end) :") ;
00002870  4879 0000 4363          pea       @m68kde~2_143.L
00002874  714E      
00002876  4EB9 0000 4364          jsr       _printf
0000287A  5756      
0000287C  584F      4365          addq.w    #4,A7
                    4366   ; while((c = getchar()) != 0x1b)
                    4367   EnterString_1:
0000287E  4EB9 0000 4368          jsr       _getche
00002882  5718      
00002884  1D40 FFFF 4369          move.b    D0,-1(A6)
00002888  0C00 001B 4370          cmp.b     #27,D0
0000288C  670A      4371          beq.s     EnterString_3
                    4372   ; *Start++ = c ;
0000288E  2042      4373          move.l    D2,A0
00002890  5282      4374          addq.l    #1,D2
00002892  10AE FFFF 4375          move.b    -1(A6),(A0)
00002896  60E6      4376          bra       EnterString_1
                    4377   EnterString_3:
                    4378   ; *Start = 0x00;  // terminate with a null
00002898  2042      4379          move.l    D2,A0
0000289A  4210      4380          clr.b     (A0)
0000289C  241F      4381          move.l    (A7)+,D2
0000289E  4E5E      4382          unlk      A6
000028A0  4E75      4383          rts
                    4384   ; }
                    4385   ; void MemoryTest(void)
                    4386   ; {
                    4387   _MemoryTest:
000028A2  4E56 FFF8 4388          link      A6,#-8
000028A6  48E7 3F30 4389          movem.l   D2/D3/D4/D5/D6/D7/A2/A3,-(A7)
000028AA  45F9 0000 4390          lea       _printf.L,A2
000028AE  5756      
                    4391   ; unsigned long long int *RamPtr;
                    4392   ; unsigned int counter1=0x8cb;
000028B0  2A3C 0000 4393          move.l    #2251,D5
000028B4  08CB      
                    4394   ; register unsigned int i ;
                    4395   ; unsigned int Start, End ;
                    4396   ; char c ;
                    4397   ; unsigned long int data, write_data;
                    4398   ; unsigned int bwl=0;
000028B6  4286      4399          clr.l     D6
                    4400   ; // input validation of addresses, user should know that for word and long word addresses shoudl align to even.
                    4401   ; do{
                    4402   MemoryTest_1:
                    4403   ; printf("\r\nStart Address");
000028B8  4879 0000 4404          pea       @m68kde~2_144.L
000028BC  716C      
000028BE  4E92      4405          jsr       (A2)
000028C0  584F      4406          addq.w    #4,A7
                    4407   ; Start = Get8HexDigits(0);
000028C2  42A7      4408          clr.l     -(A7)
000028C4  4EB8 0CA4 4409          jsr       _Get8HexDigits
000028C8  584F      4410          addq.w    #4,A7
000028CA  2E00      4411          move.l    D0,D7
000028CC  0C87 0900 4412          cmp.l     #150994944,D7
000028D0  0000      
000028D2  65E4      4413          blo       MemoryTest_1
000028D4  0C87 097F 4414          cmp.l     #159383551,D7
000028D8  FFFF      
000028DA  62DC      4415          bhi       MemoryTest_1
                    4416   ; } while (0x09000000  > Start || 0x097FFFFF < Start);
                    4417   ; // Start = 0x08020000;
                    4418   ; do {
                    4419   MemoryTest_3:
                    4420   ; printf("\r\nEnd Address") ;
000028DC  4879 0000 4421          pea       @m68kde~2_145.L
000028E0  717C      
000028E2  4E92      4422          jsr       (A2)
000028E4  584F      4423          addq.w    #4,A7
                    4424   ; End = Get8HexDigits(0) ;
000028E6  42A7      4425          clr.l     -(A7)
000028E8  4EB8 0CA4 4426          jsr       _Get8HexDigits
000028EC  584F      4427          addq.w    #4,A7
000028EE  2640      4428          move.l    D0,A3
000028F0  BE8B      4429          cmp.l     A3,D7
000028F2  62E8      4430          bhi       MemoryTest_3
000028F4  200B      4431          move.l    A3,D0
000028F6  0C80 097F 4432          cmp.l     #159383551,D0
000028FA  FFFF      
000028FC  62DE      4433          bhi       MemoryTest_3
                    4434   ; } while (Start > End || End > 0x097FFFFF);
                    4435   ; // End = 0x08030000;
                    4436   ; // Get test pattern and set data appropriately
                    4437   ; while(1)    {
                    4438   MemoryTest_5:
                    4439   ; FlushKeyboard() ;               // dump unread characters from keyboard
000028FE  4EB8 0BA6 4440          jsr       _FlushKeyboard
                    4441   ; printf("\r\nTest pattern: \r\n0: 55\r\n1: AA\r\n2: FF\r\n3: 00");
00002902  4879 0000 4442          pea       @m68kde~2_146.L
00002906  718A      
00002908  4E92      4443          jsr       (A2)
0000290A  584F      4444          addq.w    #4,A7
                    4445   ; printf("\r\n#") ;
0000290C  4879 0000 4446          pea       @m68kde~2_116.L
00002910  6E94      
00002912  4E92      4447          jsr       (A2)
00002914  584F      4448          addq.w    #4,A7
                    4449   ; c = toupper(_getch());
00002916  2F00      4450          move.l    D0,-(A7)
00002918  4EB8 0B68 4451          jsr       __getch
0000291C  2200      4452          move.l    D0,D1
0000291E  201F      4453          move.l    (A7)+,D0
00002920  2F01      4454          move.l    D1,-(A7)
00002922  4EB9 0000 4455          jsr       _toupper
00002926  56EC      
00002928  584F      4456          addq.w    #4,A7
0000292A  1800      4457          move.b    D0,D4
                    4458   ; if( c == (char)('0')){
0000292C  0C04 0030 4459          cmp.b     #48,D4
00002930  6604      4460          bne.s     MemoryTest_8
                    4461   ; data = 0x55;
00002932  7455      4462          moveq     #85,D2
                    4463   ; break;
00002934  6028      4464          bra.s     MemoryTest_7
                    4465   MemoryTest_8:
                    4466   ; }
                    4467   ; else if( c == (char)('1')){
00002936  0C04 0031 4468          cmp.b     #49,D4
0000293A  6608      4469          bne.s     MemoryTest_10
                    4470   ; data = 0xAA;
0000293C  243C 0000 4471          move.l    #170,D2
00002940  00AA      
                    4472   ; break;
00002942  601A      4473          bra.s     MemoryTest_7
                    4474   MemoryTest_10:
                    4475   ; }
                    4476   ; else if( c == (char)('2')){
00002944  0C04 0032 4477          cmp.b     #50,D4
00002948  6608      4478          bne.s     MemoryTest_12
                    4479   ; data = 0xFF;
0000294A  243C 0000 4480          move.l    #255,D2
0000294E  00FF      
                    4481   ; break;
00002950  600C      4482          bra.s     MemoryTest_7
                    4483   MemoryTest_12:
                    4484   ; }
                    4485   ; else if( c == (char)('3')){
00002952  0C04 0033 4486          cmp.b     #51,D4
00002956  6604      4487          bne.s     MemoryTest_14
                    4488   ; data = 0x00;
00002958  4282      4489          clr.l     D2
                    4490   ; break;
0000295A  6002      4491          bra.s     MemoryTest_7
                    4492   MemoryTest_14:
0000295C  60A0      4493          bra       MemoryTest_5
                    4494   MemoryTest_7:
                    4495   ; }
                    4496   ; }
                    4497   ; // Let user know what they selected
                    4498   ; printf("\r\nData selected: 0x%x", data);
0000295E  2F02      4499          move.l    D2,-(A7)
00002960  4879 0000 4500          pea       @m68kde~2_147.L
00002964  71B8      
00002966  4E92      4501          jsr       (A2)
00002968  504F      4502          addq.w    #8,A7
                    4503   ; // Get size of test pattern and set data size appropriately
                    4504   ; while(1)    {
                    4505   MemoryTest_16:
                    4506   ; FlushKeyboard() ;               // dump unread characters from keyboard
0000296A  4EB8 0BA6 4507          jsr       _FlushKeyboard
                    4508   ; printf("\r\nEnter 'B', 'W', or 'L' for bytes, words, or long word: ");
0000296E  4879 0000 4509          pea       @m68kde~2_148.L
00002972  71CE      
00002974  4E92      4510          jsr       (A2)
00002976  584F      4511          addq.w    #4,A7
                    4512   ; printf("\r\n#") ;
00002978  4879 0000 4513          pea       @m68kde~2_116.L
0000297C  6E94      
0000297E  4E92      4514          jsr       (A2)
00002980  584F      4515          addq.w    #4,A7
                    4516   ; c = toupper(_getch());
00002982  2F00      4517          move.l    D0,-(A7)
00002984  4EB8 0B68 4518          jsr       __getch
00002988  2200      4519          move.l    D0,D1
0000298A  201F      4520          move.l    (A7)+,D0
0000298C  2F01      4521          move.l    D1,-(A7)
0000298E  4EB9 0000 4522          jsr       _toupper
00002992  56EC      
00002994  584F      4523          addq.w    #4,A7
00002996  1800      4524          move.b    D0,D4
                    4525   ; if( c == (char)('B')){
00002998  0C04 0042 4526          cmp.b     #66,D4
0000299C  6606      4527          bne.s     MemoryTest_19
                    4528   ; bwl = 0x1;
0000299E  7C01      4529          moveq     #1,D6
                    4530   ; break;
000029A0  6000 003E 4531          bra       MemoryTest_18
                    4532   MemoryTest_19:
                    4533   ; }
                    4534   ; else if( c == (char)('W')){
000029A4  0C04 0057 4535          cmp.b     #87,D4
000029A8  660C      4536          bne.s     MemoryTest_21
                    4537   ; bwl = 0x2;
000029AA  7C02      4538          moveq     #2,D6
                    4539   ; data = data | data << 8;
000029AC  2002      4540          move.l    D2,D0
000029AE  E188      4541          lsl.l     #8,D0
000029B0  8480      4542          or.l      D0,D2
                    4543   ; break;
000029B2  6000 002C 4544          bra       MemoryTest_18
                    4545   MemoryTest_21:
                    4546   ; }
                    4547   ; else if( c == (char)('L')){
000029B6  0C04 004C 4548          cmp.b     #76,D4
000029BA  6600 0022 4549          bne       MemoryTest_23
                    4550   ; bwl = 0x3;
000029BE  7C03      4551          moveq     #3,D6
                    4552   ; data = data | data << 8 | data << 16 | data << 24;
000029C0  2002      4553          move.l    D2,D0
000029C2  2202      4554          move.l    D2,D1
000029C4  E189      4555          lsl.l     #8,D1
000029C6  8081      4556          or.l      D1,D0
000029C8  2202      4557          move.l    D2,D1
000029CA  E189      4558          lsl.l     #8,D1
000029CC  E189      4559          lsl.l     #8,D1
000029CE  8081      4560          or.l      D1,D0
000029D0  2202      4561          move.l    D2,D1
000029D2  E189      4562          lsl.l     #8,D1
000029D4  E189      4563          lsl.l     #8,D1
000029D6  E189      4564          lsl.l     #8,D1
000029D8  8081      4565          or.l      D1,D0
000029DA  2400      4566          move.l    D0,D2
                    4567   ; break;
000029DC  6002      4568          bra.s     MemoryTest_18
                    4569   MemoryTest_23:
000029DE  608A      4570          bra       MemoryTest_16
                    4571   MemoryTest_18:
                    4572   ; }
                    4573   ; }
                    4574   ; // Let user know what they selected
                    4575   ; printf("\r\nbwl selected:");
000029E0  4879 0000 4576          pea       @m68kde~2_149.L
000029E4  7208      
000029E6  4E92      4577          jsr       (A2)
000029E8  584F      4578          addq.w    #4,A7
                    4579   ; if(bwl == (unsigned int)(0x3)) printf("Long word");
000029EA  0C86 0000 4580          cmp.l     #3,D6
000029EE  0003      
000029F0  660A      4581          bne.s     MemoryTest_25
000029F2  4879 0000 4582          pea       @m68kde~2_150.L
000029F6  7218      
000029F8  4E92      4583          jsr       (A2)
000029FA  584F      4584          addq.w    #4,A7
                    4585   MemoryTest_25:
                    4586   ; if(bwl == (unsigned int)(0x2)) printf("Word");
000029FC  0C86 0000 4587          cmp.l     #2,D6
00002A00  0002      
00002A02  660A      4588          bne.s     MemoryTest_27
00002A04  4879 0000 4589          pea       @m68kde~2_151.L
00002A08  7222      
00002A0A  4E92      4590          jsr       (A2)
00002A0C  584F      4591          addq.w    #4,A7
                    4592   MemoryTest_27:
                    4593   ; if(bwl == (unsigned int)(0x1)) printf("Bytes");
00002A0E  0C86 0000 4594          cmp.l     #1,D6
00002A12  0001      
00002A14  660A      4595          bne.s     MemoryTest_29
00002A16  4879 0000 4596          pea       @m68kde~2_152.L
00002A1A  7228      
00002A1C  4E92      4597          jsr       (A2)
00002A1E  584F      4598          addq.w    #4,A7
                    4599   MemoryTest_29:
                    4600   ; // Set pointer to start addr
                    4601   ; RamPtr = Start;
00002A20  2607      4602          move.l    D7,D3
                    4603   ; // Write loop
                    4604   ; while(1){
                    4605   MemoryTest_31:
                    4606   ; // When end addr is reached
                    4607   ; if (RamPtr > End){
00002A22  B68B      4608          cmp.l     A3,D3
00002A24  630C      4609          bls.s     MemoryTest_34
                    4610   ; printf("\r\nWrite complete. Starting read.");
00002A26  4879 0000 4611          pea       @m68kde~2_153.L
00002A2A  722E      
00002A2C  4E92      4612          jsr       (A2)
00002A2E  584F      4613          addq.w    #4,A7
                    4614   ; break;
00002A30  6026      4615          bra.s     MemoryTest_33
                    4616   MemoryTest_34:
                    4617   ; }
                    4618   ; // Set data at address to specified by user
                    4619   ; *RamPtr = data;
00002A32  2043      4620          move.l    D3,A0
00002A34  2082      4621          move.l    D2,(A0)
                    4622   ; counter1++;
00002A36  5285      4623          addq.l    #1,D5
                    4624   ; // Dont check every time, just check some time incl first time
                    4625   ; if (counter1 == 0x8cc){
00002A38  0C85 0000 4626          cmp.l     #2252,D5
00002A3C  08CC      
00002A3E  6614      4627          bne.s     MemoryTest_36
                    4628   ; printf("\r\nWrite: 0x%x to addr 0x%x", *RamPtr, RamPtr);
00002A40  2F03      4629          move.l    D3,-(A7)
00002A42  2043      4630          move.l    D3,A0
00002A44  2F10      4631          move.l    (A0),-(A7)
00002A46  4879 0000 4632          pea       @m68kde~2_154.L
00002A4A  7250      
00002A4C  4E92      4633          jsr       (A2)
00002A4E  DEFC 000C 4634          add.w     #12,A7
                    4635   ; counter1 = 1;
00002A52  7A01      4636          moveq     #1,D5
                    4637   MemoryTest_36:
                    4638   ; }
                    4639   ; // Increment address
                    4640   ; RamPtr++;
00002A54  5883      4641          addq.l    #4,D3
00002A56  60CA      4642          bra       MemoryTest_31
                    4643   MemoryTest_33:
                    4644   ; }
                    4645   ; // Reset pointer to start addr
                    4646   ; RamPtr = Start;
00002A58  2607      4647          move.l    D7,D3
                    4648   ; // Reset counter to default
                    4649   ; counter1 = 0x8cb;
00002A5A  2A3C 0000 4650          move.l    #2251,D5
00002A5E  08CB      
                    4651   ; // Read loop
                    4652   ; while(1){
                    4653   MemoryTest_38:
                    4654   ; // When end addr is reached
                    4655   ; if (RamPtr > End){
00002A60  B68B      4656          cmp.l     A3,D3
00002A62  6318      4657          bls.s     MemoryTest_41
                    4658   ; printf("\r\nRead complete.");
00002A64  4879 0000 4659          pea       @m68kde~2_155.L
00002A68  726C      
00002A6A  4E92      4660          jsr       (A2)
00002A6C  584F      4661          addq.w    #4,A7
                    4662   ; printf("\r\nNo error in mem test");
00002A6E  4879 0000 4663          pea       @m68kde~2_156.L
00002A72  727E      
00002A74  4E92      4664          jsr       (A2)
00002A76  584F      4665          addq.w    #4,A7
                    4666   ; break;
00002A78  6000 004A 4667          bra       MemoryTest_40
                    4668   MemoryTest_41:
                    4669   ; }
                    4670   ; // Read check every address to specified data by user
                    4671   ; if (*RamPtr != data){
00002A7C  2043      4672          move.l    D3,A0
00002A7E  B490      4673          cmp.l     (A0),D2
00002A80  6720      4674          beq.s     MemoryTest_43
                    4675   ; printf("\r\nERROR: Address 0x%x data is 0x%x but should be 0x%x", RamPtr, *RamPtr, data);
00002A82  2F02      4676          move.l    D2,-(A7)
00002A84  2043      4677          move.l    D3,A0
00002A86  2F10      4678          move.l    (A0),-(A7)
00002A88  2F03      4679          move.l    D3,-(A7)
00002A8A  4879 0000 4680          pea       @m68kde~2_157.L
00002A8E  7296      
00002A90  4E92      4681          jsr       (A2)
00002A92  DEFC 0010 4682          add.w     #16,A7
                    4683   ; printf("\r\nFAIL: Mem test did not complete successfully.");
00002A96  4879 0000 4684          pea       @m68kde~2_158.L
00002A9A  72CC      
00002A9C  4E92      4685          jsr       (A2)
00002A9E  584F      4686          addq.w    #4,A7
                    4687   ; break;
00002AA0  6022      4688          bra.s     MemoryTest_40
                    4689   MemoryTest_43:
                    4690   ; }
                    4691   ; counter1++;
00002AA2  5285      4692          addq.l    #1,D5
                    4693   ; // Dont check every time, just check some time incl first time
                    4694   ; if (counter1 == 0x8cc){
00002AA4  0C85 0000 4695          cmp.l     #2252,D5
00002AA8  08CC      
00002AAA  6614      4696          bne.s     MemoryTest_45
                    4697   ; printf("\r\nRead: Address 0x%x data is 0x%x", RamPtr, *RamPtr);
00002AAC  2043      4698          move.l    D3,A0
00002AAE  2F10      4699          move.l    (A0),-(A7)
00002AB0  2F03      4700          move.l    D3,-(A7)
00002AB2  4879 0000 4701          pea       @m68kde~2_159.L
00002AB6  72FC      
00002AB8  4E92      4702          jsr       (A2)
00002ABA  DEFC 000C 4703          add.w     #12,A7
                    4704   ; counter1 = 1;
00002ABE  7A01      4705          moveq     #1,D5
                    4706   MemoryTest_45:
                    4707   ; }
                    4708   ; RamPtr++;
00002AC0  5883      4709          addq.l    #4,D3
00002AC2  609C      4710          bra       MemoryTest_38
                    4711   MemoryTest_40:
00002AC4  4CDF 0CFC 4712          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3
00002AC8  4E5E      4713          unlk      A6
00002ACA  4E75      4714          rts
                    4715   ; }
                    4716   ; }
                    4717   ; void main(void)
                    4718   ; {
                    4719   _main:
00002ACC  4E56 FFF4 4720          link      A6,#-12
00002AD0  48E7 3030 4721          movem.l   D2/D3/A2/A3,-(A7)
00002AD4  45F8 0A30 4722          lea       _InstallExceptionHandler.L,A2
00002AD8  47F9 0000 4723          lea       _printf.L,A3
00002ADC  5756      
                    4724   ; char c ;
                    4725   ; int i, j ;
                    4726   ; char *BugMessage = "Lab2 Dram LOL";
00002ADE  41F9 0000 4727          lea       @m68kde~2_160.L,A0
00002AE2  731E      
00002AE4  2608      4728          move.l    A0,D3
                    4729   ; char *CopyrightMessage = "Aaran Poon 36228203";
00002AE6  41F9 0000 4730          lea       @m68kde~2_161.L,A0
00002AEA  732C      
00002AEC  2D48 FFFC 4731          move.l    A0,-4(A6)
                    4732   ; KillAllBreakPoints() ;
00002AF0  4EB8 1EEE 4733          jsr       _KillAllBreakPoints
                    4734   ; i = x = y = z = PortA_Count = 0;
00002AF4  42B9 0B00 4735          clr.l     _PortA_Count.L
00002AF8  00D4      
00002AFA  42B9 0B00 4736          clr.l     _z.L
00002AFE  00D0      
00002B00  42B9 0B00 4737          clr.l     _y.L
00002B04  00CC      
00002B06  42B9 0B00 4738          clr.l     _x.L
00002B0A  00C8      
00002B0C  4282      4739          clr.l     D2
                    4740   ; Trace = GoFlag = 0;                       // used in tracing/single stepping
00002B0E  42B9 0B00 4741          clr.l     _GoFlag.L
00002B12  00DC      
00002B14  42B9 0B00 4742          clr.l     _Trace.L
00002B18  00D8      
                    4743   ; Echo = 1 ;
00002B1A  23FC 0000 4744          move.l    #1,_Echo.L
00002B1E  0001 0B00 
00002B22  00E0      
                    4745   ; d0=d1=d2=d3=d4=d5=d6=d7=0 ;
00002B24  42B9 0B00 4746          clr.l     _d7.L
00002B28  0100      
00002B2A  42B9 0B00 4747          clr.l     _d6.L
00002B2E  00FC      
00002B30  42B9 0B00 4748          clr.l     _d5.L
00002B34  00F8      
00002B36  42B9 0B00 4749          clr.l     _d4.L
00002B3A  00F4      
00002B3C  42B9 0B00 4750          clr.l     _d3.L
00002B40  00F0      
00002B42  42B9 0B00 4751          clr.l     _d2.L
00002B46  00EC      
00002B48  42B9 0B00 4752          clr.l     _d1.L
00002B4C  00E8      
00002B4E  42B9 0B00 4753          clr.l     _d0.L
00002B52  00E4      
                    4754   ; a0=a1=a2=a3=a4=a5=a6=0 ;
00002B54  42B9 0B00 4755          clr.l     _a6.L
00002B58  011C      
00002B5A  42B9 0B00 4756          clr.l     _a5.L
00002B5E  0118      
00002B60  42B9 0B00 4757          clr.l     _a4.L
00002B64  0114      
00002B66  42B9 0B00 4758          clr.l     _a3.L
00002B6A  0110      
00002B6C  42B9 0B00 4759          clr.l     _a2.L
00002B70  010C      
00002B72  42B9 0B00 4760          clr.l     _a1.L
00002B76  0108      
00002B78  42B9 0B00 4761          clr.l     _a0.L
00002B7C  0104      
                    4762   ; PC = ProgramStart, SSP=TopOfStack, USP = TopOfStack;
00002B7E  23FC 0800 4763          move.l    #134217728,_PC.L
00002B82  0000 0B00 
00002B86  0120      
00002B88  23FC 0C00 4764          move.l    #201326592,_SSP.L
00002B8C  0000 0B00 
00002B90  0124      
00002B92  23FC 0C00 4765          move.l    #201326592,_USP.L
00002B96  0000 0B00 
00002B9A  0128      
                    4766   ; SR = 0x2000;                            // clear interrupts enable tracing  uses IRQ6
00002B9C  33FC 2000 4767          move.w    #8192,_SR.L
00002BA0  0B00 012C 
                    4768   ; // Initialise Breakpoint variables
                    4769   ; for(i = 0; i < 8; i++)  {
00002BA4  4282      4770          clr.l     D2
                    4771   main_1:
00002BA6  0C82 0000 4772          cmp.l     #8,D2
00002BAA  0008      
00002BAC  6C00 004C 4773          bge       main_3
                    4774   ; BreakPointAddress[i] = 0;               //array of 8 breakpoint addresses
00002BB0  2002      4775          move.l    D2,D0
00002BB2  E588      4776          lsl.l     #2,D0
00002BB4  41F9 0B00 4777          lea       _BreakPointAddress.L,A0
00002BB8  012E      
00002BBA  42B0 0800 4778          clr.l     0(A0,D0.L)
                    4779   ; WatchPointAddress[i] = 0 ;
00002BBE  2002      4780          move.l    D2,D0
00002BC0  E588      4781          lsl.l     #2,D0
00002BC2  41F9 0B00 4782          lea       _WatchPointAddress.L,A0
00002BC6  0182      
00002BC8  42B0 0800 4783          clr.l     0(A0,D0.L)
                    4784   ; BreakPointInstruction[i] = 0;           // to hold the instruction at the break point
00002BCC  2002      4785          move.l    D2,D0
00002BCE  E388      4786          lsl.l     #1,D0
00002BD0  41F9 0B00 4787          lea       _BreakPointInstruction.L,A0
00002BD4  014E      
00002BD6  4270 0800 4788          clr.w     0(A0,D0.L)
                    4789   ; BreakPointSetOrCleared[i] = 0;          // indicates if break point set
00002BDA  2002      4790          move.l    D2,D0
00002BDC  E588      4791          lsl.l     #2,D0
00002BDE  41F9 0B00 4792          lea       _BreakPointSetOrCleared.L,A0
00002BE2  015E      
00002BE4  42B0 0800 4793          clr.l     0(A0,D0.L)
                    4794   ; WatchPointSetOrCleared[i] = 0;
00002BE8  2002      4795          move.l    D2,D0
00002BEA  E588      4796          lsl.l     #2,D0
00002BEC  41F9 0B00 4797          lea       _WatchPointSetOrCleared.L,A0
00002BF0  01A2      
00002BF2  42B0 0800 4798          clr.l     0(A0,D0.L)
00002BF6  5282      4799          addq.l    #1,D2
00002BF8  60AC      4800          bra       main_1
                    4801   main_3:
                    4802   ; }
                    4803   ; Init_RS232() ;     // initialise the RS232 port
00002BFA  4EB8 0B12 4804          jsr       _Init_RS232
                    4805   ; Init_LCD() ;
00002BFE  4EB8 095E 4806          jsr       _Init_LCD
                    4807   ; for( i = 32; i < 48; i++)
00002C02  7420      4808          moveq     #32,D2
                    4809   main_4:
00002C04  0C82 0000 4810          cmp.l     #48,D2
00002C08  0030      
00002C0A  6C0E      4811          bge.s     main_6
                    4812   ; InstallExceptionHandler(UnhandledTrap, i) ;		        // install Trap exception handler on vector 32-47
00002C0C  2F02      4813          move.l    D2,-(A7)
00002C0E  4878 27C6 4814          pea       _UnhandledTrap.L
00002C12  4E92      4815          jsr       (A2)
00002C14  504F      4816          addq.w    #8,A7
00002C16  5282      4817          addq.l    #1,D2
00002C18  60EA      4818          bra       main_4
                    4819   main_6:
                    4820   ; InstallExceptionHandler(menu, 47) ;		                   // TRAP #15 call debug and end program
00002C1A  4878 002F 4821          pea       47
00002C1E  4878 24A0 4822          pea       _menu.L
00002C22  4E92      4823          jsr       (A2)
00002C24  504F      4824          addq.w    #8,A7
                    4825   ; InstallExceptionHandler(UnhandledIRQ1, 25) ;		      // install handler for interrupts
00002C26  4878 0019 4826          pea       25
00002C2A  4878 276C 4827          pea       _UnhandledIRQ1.L
00002C2E  4E92      4828          jsr       (A2)
00002C30  504F      4829          addq.w    #8,A7
                    4830   ; InstallExceptionHandler(UnhandledIRQ2, 26) ;		      // install handler for interrupts
00002C32  4878 001A 4831          pea       26
00002C36  4878 2778 4832          pea       _UnhandledIRQ2.L
00002C3A  4E92      4833          jsr       (A2)
00002C3C  504F      4834          addq.w    #8,A7
                    4835   ; InstallExceptionHandler(UnhandledIRQ3, 27) ;		      // install handler for interrupts
00002C3E  4878 001B 4836          pea       27
00002C42  4878 2784 4837          pea       _UnhandledIRQ3.L
00002C46  4E92      4838          jsr       (A2)
00002C48  504F      4839          addq.w    #8,A7
                    4840   ; InstallExceptionHandler(UnhandledIRQ4, 28) ;		      // install handler for interrupts
00002C4A  4878 001C 4841          pea       28
00002C4E  4878 2790 4842          pea       _UnhandledIRQ4.L
00002C52  4E92      4843          jsr       (A2)
00002C54  504F      4844          addq.w    #8,A7
                    4845   ; InstallExceptionHandler(UnhandledIRQ5, 29) ;		      // install handler for interrupts
00002C56  4878 001D 4846          pea       29
00002C5A  4878 279C 4847          pea       _UnhandledIRQ5.L
00002C5E  4E92      4848          jsr       (A2)
00002C60  504F      4849          addq.w    #8,A7
                    4850   ; InstallExceptionHandler(UnhandledIRQ6, 30) ;		      // install handler for interrupts
00002C62  4878 001E 4851          pea       30
00002C66  4878 27A8 4852          pea       _UnhandledIRQ6.L
00002C6A  4E92      4853          jsr       (A2)
00002C6C  504F      4854          addq.w    #8,A7
                    4855   ; InstallExceptionHandler(UnhandledIRQ7, 31) ;		      // install handler for interrupts
00002C6E  4878 001F 4856          pea       31
00002C72  4878 27BA 4857          pea       _UnhandledIRQ7.L
00002C76  4E92      4858          jsr       (A2)
00002C78  504F      4859          addq.w    #8,A7
                    4860   ; InstallExceptionHandler(HandleBreakPoint, 46) ;		           // install Trap 14 Break Point exception handler on vector 46
00002C7A  4878 002E 4861          pea       46
00002C7E  4878 2192 4862          pea       _HandleBreakPoint.L
00002C82  4E92      4863          jsr       (A2)
00002C84  504F      4864          addq.w    #8,A7
                    4865   ; InstallExceptionHandler(DumpRegistersandPause, 29) ;		   // install TRACE handler for IRQ5 on vector 29
00002C86  4878 001D 4866          pea       29
00002C8A  4878 1836 4867          pea       _DumpRegistersandPause.L
00002C8E  4E92      4868          jsr       (A2)
00002C90  504F      4869          addq.w    #8,A7
                    4870   ; InstallExceptionHandler(BusError,2) ;                          // install Bus error handler
00002C92  4878 0002 4871          pea       2
00002C96  4878 27D4 4872          pea       _BusError.L
00002C9A  4E92      4873          jsr       (A2)
00002C9C  504F      4874          addq.w    #8,A7
                    4875   ; InstallExceptionHandler(AddressError,3) ;                      // install address error handler (doesn't work on soft core 68k implementation)
00002C9E  4878 0003 4876          pea       3
00002CA2  4878 27E2 4877          pea       _AddressError.L
00002CA6  4E92      4878          jsr       (A2)
00002CA8  504F      4879          addq.w    #8,A7
                    4880   ; InstallExceptionHandler(IllegalInstruction,4) ;                // install illegal instruction exception handler
00002CAA  4878 0004 4881          pea       4
00002CAE  4878 27F0 4882          pea       _IllegalInstruction.L
00002CB2  4E92      4883          jsr       (A2)
00002CB4  504F      4884          addq.w    #8,A7
                    4885   ; InstallExceptionHandler(Dividebyzero,5) ;                      // install /0 exception handler
00002CB6  4878 0005 4886          pea       5
00002CBA  4878 27FE 4887          pea       _Dividebyzero.L
00002CBE  4E92      4888          jsr       (A2)
00002CC0  504F      4889          addq.w    #8,A7
                    4890   ; InstallExceptionHandler(Check,6) ;                             // install check instruction exception handler
00002CC2  4878 0006 4891          pea       6
00002CC6  4878 280C 4892          pea       _Check.L
00002CCA  4E92      4893          jsr       (A2)
00002CCC  504F      4894          addq.w    #8,A7
                    4895   ; InstallExceptionHandler(Trapv,7) ;                             // install trapv instruction exception handler
00002CCE  4878 0007 4896          pea       7
00002CD2  4878 281A 4897          pea       _Trapv.L
00002CD6  4E92      4898          jsr       (A2)
00002CD8  504F      4899          addq.w    #8,A7
                    4900   ; InstallExceptionHandler(PrivError,8) ;                         // install Priv Violation exception handler
00002CDA  4878 0008 4901          pea       8
00002CDE  4878 2828 4902          pea       _PrivError.L
00002CE2  4E92      4903          jsr       (A2)
00002CE4  504F      4904          addq.w    #8,A7
                    4905   ; InstallExceptionHandler(UnitIRQ,15) ;                          // install uninitialised IRQ exception handler
00002CE6  4878 000F 4906          pea       15
00002CEA  4878 2836 4907          pea       _UnitIRQ.L
00002CEE  4E92      4908          jsr       (A2)
00002CF0  504F      4909          addq.w    #8,A7
                    4910   ; InstallExceptionHandler(Check,24) ;                            // install spurious IRQ exception handler
00002CF2  4878 0018 4911          pea       24
00002CF6  4878 280C 4912          pea       _Check.L
00002CFA  4E92      4913          jsr       (A2)
00002CFC  504F      4914          addq.w    #8,A7
                    4915   ; FlushKeyboard() ;                        // dump unread characters from keyboard
00002CFE  4EB8 0BA6 4916          jsr       _FlushKeyboard
                    4917   ; TraceException = 0 ;                     // clear trace exception port to remove any software generated single step/trace
00002D02  4239 0040 4918          clr.b     4194314
00002D06  000A      
                    4919   ; // test for auto flash boot and run from Flash by reading switch 9 on DE1-soc board. If set, copy program from flash into Dram and run
                    4920   ; while(((char)(PortB & 0x02)) == (char)(0x02))    {
                    4921   main_7:
00002D08  1039 0040 4922          move.b    4194306,D0
00002D0C  0002      
00002D0E  C03C 0002 4923          and.b     #2,D0
00002D12  0C00 0002 4924          cmp.b     #2,D0
00002D16  662A      4925          bne.s     main_9
                    4926   ; LoadFromFlashChip();
00002D18  4EB8 12DA 4927          jsr       _LoadFromFlashChip
                    4928   ; printf("\r\nRunning.....") ;
00002D1C  4879 0000 4929          pea       @m68kde~2_162.L
00002D20  7340      
00002D22  4E93      4930          jsr       (A3)
00002D24  584F      4931          addq.w    #4,A7
                    4932   ; Oline1("Running.....") ;
00002D26  4879 0000 4933          pea       @m68kde~2_163.L
00002D2A  7350      
00002D2C  4EB8 0A02 4934          jsr       _Oline1
00002D30  584F      4935          addq.w    #4,A7
                    4936   ; GoFlag = 1;
00002D32  23FC 0000 4937          move.l    #1,_GoFlag.L
00002D36  0001 0B00 
00002D3A  00DC      
                    4938   ; go() ;
00002D3C  4EB8 08B8 4939          jsr       _go
00002D40  60C6      4940          bra       main_7
                    4941   main_9:
                    4942   ; }
                    4943   ; // otherwise start the debug monitor
                    4944   ; Oline0(BugMessage) ;
00002D42  2F03      4945          move.l    D3,-(A7)
00002D44  4EB8 09D4 4946          jsr       _Oline0
00002D48  584F      4947          addq.w    #4,A7
                    4948   ; Oline1("By: PJ Davies") ;
00002D4A  4879 0000 4949          pea       @m68kde~2_164.L
00002D4E  735E      
00002D50  4EB8 0A02 4950          jsr       _Oline1
00002D54  584F      4951          addq.w    #4,A7
                    4952   ; printf("\r\n%s", BugMessage) ;
00002D56  2F03      4953          move.l    D3,-(A7)
00002D58  4879 0000 4954          pea       @m68kde~2_165.L
00002D5C  736C      
00002D5E  4E93      4955          jsr       (A3)
00002D60  504F      4956          addq.w    #8,A7
                    4957   ; printf("\r\n%s", CopyrightMessage) ;
00002D62  2F2E FFFC 4958          move.l    -4(A6),-(A7)
00002D66  4879 0000 4959          pea       @m68kde~2_165.L
00002D6A  736C      
00002D6C  4E93      4960          jsr       (A3)
00002D6E  504F      4961          addq.w    #8,A7
                    4962   ; menu();
00002D70  4EB8 24A0 4963          jsr       _menu
00002D74  4CDF 0C0C 4964          movem.l   (A7)+,D2/D3/A2/A3
00002D78  4E5E      4965          unlk      A6
00002D7A  4E75      4966          rts
                    4967   ; }
                    4968   ; void FormatInstruction(void)    // for disassembly
                    4969   ; {
                    4970   _FormatInstruction:
00002D7C  4E56 FEC0 4971          link      A6,#-320
00002D80  48E7 3C20 4972          movem.l   D2/D3/D4/D5/A2,-(A7)
00002D84  45EE FEC0 4973          lea       -320(A6),A2
                    4974   ; short i, ilen = 0 ;
00002D88  4245      4975          clr.w     D5
                    4976   ; char *iptr = Instruction ;
00002D8A  41F9 0B00 4977          lea       _Instruction.L,A0
00002D8E  04E2      
00002D90  2608      4978          move.l    A0,D3
                    4979   ; char *Formatted[80], *fptr ;
                    4980   ; fptr = Formatted ;
00002D92  280A      4981          move.l    A2,D4
                    4982   ; for(i = 0; i < (short)(80); i ++)
00002D94  4242      4983          clr.w     D2
                    4984   FormatInstruction_1:
00002D96  0C42 0050 4985          cmp.w     #80,D2
00002D9A  6C0E      4986          bge.s     FormatInstruction_3
                    4987   ; Formatted[i] = (char)(0);          // set formatted string to null
00002D9C  48C2      4988          ext.l     D2
00002D9E  2002      4989          move.l    D2,D0
00002DA0  E588      4990          lsl.l     #2,D0
00002DA2  42B2 0800 4991          clr.l     0(A2,D0.L)
00002DA6  5242      4992          addq.w    #1,D2
00002DA8  60EC      4993          bra       FormatInstruction_1
                    4994   FormatInstruction_3:
                    4995   ; while((*iptr != ' '))   {   // while ot a space char
                    4996   FormatInstruction_4:
00002DAA  2043      4997          move.l    D3,A0
00002DAC  1010      4998          move.b    (A0),D0
00002DAE  0C00 0020 4999          cmp.b     #32,D0
00002DB2  6718      5000          beq.s     FormatInstruction_6
                    5001   ; *fptr++ = *iptr++ ;     // copy string until space or end encountered
00002DB4  2043      5002          move.l    D3,A0
00002DB6  5283      5003          addq.l    #1,D3
00002DB8  2244      5004          move.l    D4,A1
00002DBA  5284      5005          addq.l    #1,D4
00002DBC  1290      5006          move.b    (A0),(A1)
                    5007   ; ilen ++ ;               // count length of string as we go
00002DBE  5245      5008          addq.w    #1,D5
                    5009   ; if(*iptr == 0)          // if we got the end and copied the NUL then return
00002DC0  2043      5010          move.l    D3,A0
00002DC2  1010      5011          move.b    (A0),D0
00002DC4  6604      5012          bne.s     FormatInstruction_7
                    5013   ; return ;
00002DC6  6000 003E 5014          bra       FormatInstruction_9
                    5015   FormatInstruction_7:
00002DCA  60DE      5016          bra       FormatInstruction_4
                    5017   FormatInstruction_6:
                    5018   ; }
                    5019   ; // must still be more text to process otherwise we would have returned above if got to the end
                    5020   ; for(i = 0; i < ((short)(8) - ilen); i++)
00002DCC  4242      5021          clr.w     D2
                    5022   FormatInstruction_10:
00002DCE  7008      5023          moveq     #8,D0
00002DD0  4880      5024          ext.w     D0
00002DD2  9045      5025          sub.w     D5,D0
00002DD4  B440      5026          cmp.w     D0,D2
00002DD6  6C0C      5027          bge.s     FormatInstruction_12
                    5028   ; *fptr++ = ' ' ;        // make sure first operand appears in field 8 of formatted string
00002DD8  2044      5029          move.l    D4,A0
00002DDA  5284      5030          addq.l    #1,D4
00002DDC  10BC 0020 5031          move.b    #32,(A0)
00002DE0  5242      5032          addq.w    #1,D2
00002DE2  60EA      5033          bra       FormatInstruction_10
                    5034   FormatInstruction_12:
                    5035   ; // now skip over any spaces in original unformatted string before copying the rest
                    5036   ; while((*iptr == ' '))
                    5037   FormatInstruction_13:
00002DE4  2043      5038          move.l    D3,A0
00002DE6  1010      5039          move.b    (A0),D0
00002DE8  0C00 0020 5040          cmp.b     #32,D0
00002DEC  6604      5041          bne.s     FormatInstruction_15
                    5042   ; iptr++ ;
00002DEE  5283      5043          addq.l    #1,D3
00002DF0  60F2      5044          bra       FormatInstruction_13
                    5045   FormatInstruction_15:
                    5046   ; strcat(fptr,iptr) ;
00002DF2  2F03      5047          move.l    D3,-(A7)
00002DF4  2F04      5048          move.l    D4,-(A7)
00002DF6  4EB9 0000 5049          jsr       _strcat
00002DFA  56D6      
00002DFC  504F      5050          addq.w    #8,A7
                    5051   ; strcpyInstruction(Formatted) ;
00002DFE  2F0A      5052          move.l    A2,-(A7)
00002E00  4EB8 0CE6 5053          jsr       _strcpyInstruction
00002E04  584F      5054          addq.w    #4,A7
                    5055   FormatInstruction_9:
00002E06  4CDF 043C 5056          movem.l   (A7)+,D2/D3/D4/D5/A2
00002E0A  4E5E      5057          unlk      A6
00002E0C  4E75      5058          rts
                    5059   ; }
                    5060   ; unsigned short int Decode2BitOperandSize(unsigned short int OpCode)
                    5061   ; {
                    5062   _Decode2BitOperandSize:
00002E0E  4E56 0000 5063          link      A6,#0
00002E12  48E7 3020 5064          movem.l   D2/D3/A2,-(A7)
00002E16  362E 000A 5065          move.w    10(A6),D3
00002E1A  C6BC 0000 5066          and.l     #65535,D3
00002E1E  FFFF      
00002E20  45F8 0CCC 5067          lea       _strcatInstruction.L,A2
                    5068   ; unsigned short int DataSize ;       // used to determine the size of data following say an immediate instruction such as addi etc
                    5069   ; OpCode = (OpCode & (unsigned short int)(0x00C0)) >> 6 ;             // get bits 7 and 6 into positions 1,0
00002E24  3003      5070          move.w    D3,D0
00002E26  C07C 00C0 5071          and.w     #192,D0
00002E2A  EC48      5072          lsr.w     #6,D0
00002E2C  3600      5073          move.w    D0,D3
                    5074   ; if(OpCode == (unsigned short int)(0))   {
00002E2E  4A43      5075          tst.w     D3
00002E30  660E      5076          bne.s     Decode2BitOperandSize_1
                    5077   ; strcatInstruction(".B ") ;
00002E32  4879 0000 5078          pea       @m68kde~2_166.L
00002E36  7372      
00002E38  4E92      5079          jsr       (A2)
00002E3A  584F      5080          addq.w    #4,A7
                    5081   ; DataSize = 1 ;
00002E3C  7401      5082          moveq     #1,D2
00002E3E  6020      5083          bra.s     Decode2BitOperandSize_4
                    5084   Decode2BitOperandSize_1:
                    5085   ; }
                    5086   ; else if(OpCode == (unsigned short int)(1)) {
00002E40  0C43 0001 5087          cmp.w     #1,D3
00002E44  660E      5088          bne.s     Decode2BitOperandSize_3
                    5089   ; strcatInstruction(".W ") ;
00002E46  4879 0000 5090          pea       @m68kde~2_167.L
00002E4A  7376      
00002E4C  4E92      5091          jsr       (A2)
00002E4E  584F      5092          addq.w    #4,A7
                    5093   ; DataSize = 1 ;
00002E50  7401      5094          moveq     #1,D2
00002E52  600C      5095          bra.s     Decode2BitOperandSize_4
                    5096   Decode2BitOperandSize_3:
                    5097   ; }
                    5098   ; else {
                    5099   ; strcatInstruction(".L ") ;
00002E54  4879 0000 5100          pea       @m68kde~2_168.L
00002E58  737A      
00002E5A  4E92      5101          jsr       (A2)
00002E5C  584F      5102          addq.w    #4,A7
                    5103   ; DataSize = 2 ;
00002E5E  7402      5104          moveq     #2,D2
                    5105   Decode2BitOperandSize_4:
                    5106   ; }
                    5107   ; return DataSize;
00002E60  3002      5108          move.w    D2,D0
00002E62  4CDF 040C 5109          movem.l   (A7)+,D2/D3/A2
00002E66  4E5E      5110          unlk      A6
00002E68  4E75      5111          rts
                    5112   ; }
                    5113   ; void Decode3BitDataRegister(unsigned short int OpCode)                // Data Register in Bits 11, 10 and 9
                    5114   ; {
                    5115   _Decode3BitDataRegister:
00002E6A  4E56 FFFC 5116          link      A6,#-4
00002E6E  2F0A      5117          move.l    A2,-(A7)
00002E70  45EE FFFC 5118          lea       -4(A6),A2
                    5119   ; unsigned char RegNumber[3] ;
                    5120   ; RegNumber[0] = 'D' ;
00002E74  14BC 0044 5121          move.b    #68,(A2)
                    5122   ; RegNumber[1] = (unsigned char)(0x30) + (unsigned char)((OpCode & 0x0E00) >> 9) ;   // get data register number in bits 2,1,0 and convert to ASCII equiv
00002E78  7030      5123          moveq     #48,D0
00002E7A  322E 000A 5124          move.w    10(A6),D1
00002E7E  C27C 0E00 5125          and.w     #3584,D1
00002E82  E049      5126          lsr.w     #8,D1
00002E84  E249      5127          lsr.w     #1,D1
00002E86  D001      5128          add.b     D1,D0
00002E88  1540 0001 5129          move.b    D0,1(A2)
                    5130   ; RegNumber[2] = 0 ;
00002E8C  422A 0002 5131          clr.b     2(A2)
                    5132   ; strcatInstruction(RegNumber) ;        // write register number to the disassembled instruction
00002E90  2F0A      5133          move.l    A2,-(A7)
00002E92  4EB8 0CCC 5134          jsr       _strcatInstruction
00002E96  584F      5135          addq.w    #4,A7
00002E98  245F      5136          move.l    (A7)+,A2
00002E9A  4E5E      5137          unlk      A6
00002E9C  4E75      5138          rts
                    5139   ; }
                    5140   ; void Decode3BitAddressRegister(unsigned short int Reg)                // Address Register in Bits 2,1,0
                    5141   ; {
                    5142   _Decode3BitAddressRegister:
00002E9E  4E56 FFFC 5143          link      A6,#-4
00002EA2  2F0A      5144          move.l    A2,-(A7)
00002EA4  45EE FFFC 5145          lea       -4(A6),A2
                    5146   ; unsigned char RegNumber[3];
                    5147   ; RegNumber[0] = 'A' ;
00002EA8  14BC 0041 5148          move.b    #65,(A2)
                    5149   ; RegNumber[1] = (unsigned char)(0x30) + (unsigned char)(Reg) ;   // get data register number in bits 2,1,0 and convert to ASCII equiv
00002EAC  7030      5150          moveq     #48,D0
00002EAE  322E 000A 5151          move.w    10(A6),D1
00002EB2  D001      5152          add.b     D1,D0
00002EB4  1540 0001 5153          move.b    D0,1(A2)
                    5154   ; RegNumber[2] = 0 ;
00002EB8  422A 0002 5155          clr.b     2(A2)
                    5156   ; strcatInstruction(RegNumber) ;        // write register number to the disassembled instruction
00002EBC  2F0A      5157          move.l    A2,-(A7)
00002EBE  4EB8 0CCC 5158          jsr       _strcatInstruction
00002EC2  584F      5159          addq.w    #4,A7
00002EC4  245F      5160          move.l    (A7)+,A2
00002EC6  4E5E      5161          unlk      A6
00002EC8  4E75      5162          rts
                    5163   ; }
                    5164   ; //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    5165   ; // Special function is used to print 8,16, 32 bit operands after move #
                    5166   ; //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    5167   ; void DecodeBWLDataAfterOpCodeForMove(unsigned short int *OpCode )
                    5168   ; {
                    5169   _DecodeBWLDataAfterOpCodeForMove:
00002ECA  4E56 0000 5170          link      A6,#0
00002ECE  48E7 3030 5171          movem.l   D2/D3/A2/A3,-(A7)
00002ED2  242E 0008 5172          move.l    8(A6),D2
00002ED6  45F9 0B00 5173          lea       _TempString.L,A2
00002EDA  0546      
00002EDC  47F9 0000 5174          lea       _sprintf.L,A3
00002EE0  56A2      
                    5175   ; unsigned char OperandSize ;
                    5176   ; OperandSize = (*OpCode >> 12) & (unsigned short int)(0x0003) ;               // get bits 13,12 into 1,0 as these define size of #operand
00002EE2  2042      5177          move.l    D2,A0
00002EE4  3010      5178          move.w    (A0),D0
00002EE6  E048      5179          lsr.w     #8,D0
00002EE8  E848      5180          lsr.w     #4,D0
00002EEA  C07C 0003 5181          and.w     #3,D0
00002EEE  1600      5182          move.b    D0,D3
                    5183   ; InstructionSize += 1;
00002EF0  52B9 0B00 5184          addq.l    #1,_InstructionSize.L
00002EF4  017E      
                    5185   ; if(OperandSize == (char)(1))                // #byte value
00002EF6  0C03 0001 5186          cmp.b     #1,D3
00002EFA  6620      5187          bne.s     DecodeBWLDataAfterOpCodeForMove_1
                    5188   ; sprintf(TempString, "#$%X", (unsigned int)(OpCode[1]));
00002EFC  2042      5189          move.l    D2,A0
00002EFE  3228 0002 5190          move.w    2(A0),D1
00002F02  C2BC 0000 5191          and.l     #65535,D1
00002F06  FFFF      
00002F08  2F01      5192          move.l    D1,-(A7)
00002F0A  4879 0000 5193          pea       @m68kde~2_169.L
00002F0E  737E      
00002F10  2F0A      5194          move.l    A2,-(A7)
00002F12  4E93      5195          jsr       (A3)
00002F14  DEFC 000C 5196          add.w     #12,A7
00002F18  6000 0068 5197          bra       DecodeBWLDataAfterOpCodeForMove_5
                    5198   DecodeBWLDataAfterOpCodeForMove_1:
                    5199   ; else if(OperandSize == (char)(3))          // #word value
00002F1C  0C03 0003 5200          cmp.b     #3,D3
00002F20  6620      5201          bne.s     DecodeBWLDataAfterOpCodeForMove_3
                    5202   ; sprintf(TempString, "#$%X", (unsigned int)(OpCode[1]));
00002F22  2042      5203          move.l    D2,A0
00002F24  3228 0002 5204          move.w    2(A0),D1
00002F28  C2BC 0000 5205          and.l     #65535,D1
00002F2C  FFFF      
00002F2E  2F01      5206          move.l    D1,-(A7)
00002F30  4879 0000 5207          pea       @m68kde~2_169.L
00002F34  737E      
00002F36  2F0A      5208          move.l    A2,-(A7)
00002F38  4E93      5209          jsr       (A3)
00002F3A  DEFC 000C 5210          add.w     #12,A7
00002F3E  6000 0042 5211          bra       DecodeBWLDataAfterOpCodeForMove_5
                    5212   DecodeBWLDataAfterOpCodeForMove_3:
                    5213   ; else if(OperandSize == (char)(2)) {                                       // long value
00002F42  0C03 0002 5214          cmp.b     #2,D3
00002F46  6600 003A 5215          bne       DecodeBWLDataAfterOpCodeForMove_5
                    5216   ; sprintf(TempString, "#$%X", ((unsigned int)(OpCode[1]) << 16) | (unsigned int)(OpCode[2])); // create 3
00002F4A  2042      5217          move.l    D2,A0
00002F4C  3228 0002 5218          move.w    2(A0),D1
00002F50  C2BC 0000 5219          and.l     #65535,D1
00002F54  FFFF      
00002F56  E189      5220          lsl.l     #8,D1
00002F58  E189      5221          lsl.l     #8,D1
00002F5A  2042      5222          move.l    D2,A0
00002F5C  2F00      5223          move.l    D0,-(A7)
00002F5E  3028 0004 5224          move.w    4(A0),D0
00002F62  C0BC 0000 5225          and.l     #65535,D0
00002F66  FFFF      
00002F68  8280      5226          or.l      D0,D1
00002F6A  201F      5227          move.l    (A7)+,D0
00002F6C  2F01      5228          move.l    D1,-(A7)
00002F6E  4879 0000 5229          pea       @m68kde~2_169.L
00002F72  737E      
00002F74  2F0A      5230          move.l    A2,-(A7)
00002F76  4E93      5231          jsr       (A3)
00002F78  DEFC 000C 5232          add.w     #12,A7
                    5233   ; InstructionSize += 1;
00002F7C  52B9 0B00 5234          addq.l    #1,_InstructionSize.L
00002F80  017E      
                    5235   DecodeBWLDataAfterOpCodeForMove_5:
                    5236   ; }
                    5237   ; strcatInstruction(TempString) ;
00002F82  2F0A      5238          move.l    A2,-(A7)
00002F84  4EB8 0CCC 5239          jsr       _strcatInstruction
00002F88  584F      5240          addq.w    #4,A7
00002F8A  4CDF 0C0C 5241          movem.l   (A7)+,D2/D3/A2/A3
00002F8E  4E5E      5242          unlk      A6
00002F90  4E75      5243          rts
                    5244   ; }
                    5245   ; /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    5246   ; // This function is used to print 8,16, 32 bit operands after the opcode, this is in instruction like ADD # where immediate addressing is used as source
                    5247   ; /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    5248   ; void DecodeBWLDataAfterOpCode(unsigned short int *OpCode )
                    5249   ; {
                    5250   _DecodeBWLDataAfterOpCode:
00002F92  4E56 0000 5251          link      A6,#0
00002F96  48E7 3038 5252          movem.l   D2/D3/A2/A3/A4,-(A7)
00002F9A  262E 0008 5253          move.l    8(A6),D3
00002F9E  45F9 0B00 5254          lea       _TempString.L,A2
00002FA2  0546      
00002FA4  47F9 0000 5255          lea       _sprintf.L,A3
00002FA8  56A2      
00002FAA  49F9 0B00 5256          lea       _InstructionSize.L,A4
00002FAE  017E      
                    5257   ; unsigned char OperandSize ;
                    5258   ; OperandSize = (*OpCode & (unsigned short int)(0x01C0)) >> 6 ;               // get bits 8,7 and 6 into positions 1,0, these define size of operand
00002FB0  2043      5259          move.l    D3,A0
00002FB2  3010      5260          move.w    (A0),D0
00002FB4  C07C 01C0 5261          and.w     #448,D0
00002FB8  EC48      5262          lsr.w     #6,D0
00002FBA  1400      5263          move.b    D0,D2
                    5264   ; InstructionSize += 1;
00002FBC  5294      5265          addq.l    #1,(A4)
                    5266   ; if((OperandSize == (char)(0)) || (OperandSize == (char)(4)))                // #byte value
00002FBE  4A02      5267          tst.b     D2
00002FC0  6706      5268          beq.s     DecodeBWLDataAfterOpCode_3
00002FC2  0C02 0004 5269          cmp.b     #4,D2
00002FC6  6620      5270          bne.s     DecodeBWLDataAfterOpCode_1
                    5271   DecodeBWLDataAfterOpCode_3:
                    5272   ; sprintf(TempString, "#$%X", (unsigned int)(OpCode[1]));
00002FC8  2043      5273          move.l    D3,A0
00002FCA  3228 0002 5274          move.w    2(A0),D1
00002FCE  C2BC 0000 5275          and.l     #65535,D1
00002FD2  FFFF      
00002FD4  2F01      5276          move.l    D1,-(A7)
00002FD6  4879 0000 5277          pea       @m68kde~2_169.L
00002FDA  737E      
00002FDC  2F0A      5278          move.l    A2,-(A7)
00002FDE  4E93      5279          jsr       (A3)
00002FE0  DEFC 000C 5280          add.w     #12,A7
00002FE4  6000 007C 5281          bra       DecodeBWLDataAfterOpCode_7
                    5282   DecodeBWLDataAfterOpCode_1:
                    5283   ; // #word value 7 is used by divs.w instruction (not divu)
                    5284   ; // however used by instructions like adda, cmpa, suba # to mean long value -
                    5285   ; // bugger - have to build a special case and look at opcode to see what instruction is
                    5286   ; else if((OperandSize == (char)(1)) || (OperandSize == (char)(5)) || (OperandSize == (char)(3)))         //# byte or word value
00002FE8  0C02 0001 5287          cmp.b     #1,D2
00002FEC  670C      5288          beq.s     DecodeBWLDataAfterOpCode_6
00002FEE  0C02 0005 5289          cmp.b     #5,D2
00002FF2  6706      5290          beq.s     DecodeBWLDataAfterOpCode_6
00002FF4  0C02 0003 5291          cmp.b     #3,D2
00002FF8  6620      5292          bne.s     DecodeBWLDataAfterOpCode_4
                    5293   DecodeBWLDataAfterOpCode_6:
                    5294   ; sprintf(TempString, "#$%X", (unsigned int)(OpCode[1]));
00002FFA  2043      5295          move.l    D3,A0
00002FFC  3228 0002 5296          move.w    2(A0),D1
00003000  C2BC 0000 5297          and.l     #65535,D1
00003004  FFFF      
00003006  2F01      5298          move.l    D1,-(A7)
00003008  4879 0000 5299          pea       @m68kde~2_169.L
0000300C  737E      
0000300E  2F0A      5300          move.l    A2,-(A7)
00003010  4E93      5301          jsr       (A3)
00003012  DEFC 000C 5302          add.w     #12,A7
00003016  6000 004A 5303          bra       DecodeBWLDataAfterOpCode_7
                    5304   DecodeBWLDataAfterOpCode_4:
                    5305   ; else if((OperandSize == (char)(2))  || (OperandSize == (char)(6)) || (OperandSize == (char)(7)))    {    //# long value
0000301A  0C02 0002 5306          cmp.b     #2,D2
0000301E  670E      5307          beq.s     DecodeBWLDataAfterOpCode_9
00003020  0C02 0006 5308          cmp.b     #6,D2
00003024  6708      5309          beq.s     DecodeBWLDataAfterOpCode_9
00003026  0C02 0007 5310          cmp.b     #7,D2
0000302A  6600 0036 5311          bne       DecodeBWLDataAfterOpCode_7
                    5312   DecodeBWLDataAfterOpCode_9:
                    5313   ; sprintf(TempString, "#$%X", ((unsigned int)(OpCode[1]) << 16) | (unsigned int)(OpCode[2]) ); // create 3
0000302E  2043      5314          move.l    D3,A0
00003030  3228 0002 5315          move.w    2(A0),D1
00003034  C2BC 0000 5316          and.l     #65535,D1
00003038  FFFF      
0000303A  E189      5317          lsl.l     #8,D1
0000303C  E189      5318          lsl.l     #8,D1
0000303E  2043      5319          move.l    D3,A0
00003040  2F00      5320          move.l    D0,-(A7)
00003042  3028 0004 5321          move.w    4(A0),D0
00003046  C0BC 0000 5322          and.l     #65535,D0
0000304A  FFFF      
0000304C  8280      5323          or.l      D0,D1
0000304E  201F      5324          move.l    (A7)+,D0
00003050  2F01      5325          move.l    D1,-(A7)
00003052  4879 0000 5326          pea       @m68kde~2_169.L
00003056  737E      
00003058  2F0A      5327          move.l    A2,-(A7)
0000305A  4E93      5328          jsr       (A3)
0000305C  DEFC 000C 5329          add.w     #12,A7
                    5330   ; InstructionSize += 1;
00003060  5294      5331          addq.l    #1,(A4)
                    5332   DecodeBWLDataAfterOpCode_7:
                    5333   ; }
                    5334   ; // special case for divs - bugger!!!
                    5335   ; if((*OpCode & (unsigned short int)(0xF1C0)) == (unsigned short int)(0x81C0)) // it's the divs instruction
00003062  2043      5336          move.l    D3,A0
00003064  3010      5337          move.w    (A0),D0
00003066  C07C F1C0 5338          and.w     #61888,D0
0000306A  0C40 81C0 5339          cmp.w     #33216,D0
0000306E  6622      5340          bne.s     DecodeBWLDataAfterOpCode_10
                    5341   ; {
                    5342   ; InstructionSize = 2 ;
00003070  28BC 0000 5343          move.l    #2,(A4)
00003074  0002      
                    5344   ; sprintf(TempString, "#$%X", (unsigned int)(OpCode[1]));
00003076  2043      5345          move.l    D3,A0
00003078  3228 0002 5346          move.w    2(A0),D1
0000307C  C2BC 0000 5347          and.l     #65535,D1
00003080  FFFF      
00003082  2F01      5348          move.l    D1,-(A7)
00003084  4879 0000 5349          pea       @m68kde~2_169.L
00003088  737E      
0000308A  2F0A      5350          move.l    A2,-(A7)
0000308C  4E93      5351          jsr       (A3)
0000308E  DEFC 000C 5352          add.w     #12,A7
                    5353   DecodeBWLDataAfterOpCode_10:
                    5354   ; }
                    5355   ; strcatInstruction(TempString) ;
00003092  2F0A      5356          move.l    A2,-(A7)
00003094  4EB8 0CCC 5357          jsr       _strcatInstruction
00003098  584F      5358          addq.w    #4,A7
0000309A  4CDF 1C0C 5359          movem.l   (A7)+,D2/D3/A2/A3/A4
0000309E  4E5E      5360          unlk      A6
000030A0  4E75      5361          rts
                    5362   ; }
                    5363   ; //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    5364   ; // This function decodes the MODE|EA bits opcode in bits 5,4,3,2,1,0 or 11-6
                    5365   ; // DataSize is used to gain access to the operand used by EA, e.g. ADDI  #$2344422,$234234
                    5366   ; // since the data following the opcode is actually the immediate data which could be 1 or 2 words
                    5367   ; //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    5368   ; void Decode6BitEA(unsigned short int *OpCode, int EAChoice, unsigned short int DataSize, unsigned short int IsItMoveInstruction)     // decode Mode/Register
                    5369   ; {
                    5370   _Decode6BitEA:
000030A2  4E56 FFF4 5371          link      A6,#-12
000030A6  48E7 3F3C 5372          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
000030AA  45F8 0CCC 5373          lea       _strcatInstruction.L,A2
000030AE  47F9 0B00 5374          lea       _TempString.L,A3
000030B2  0546      
000030B4  282E 0008 5375          move.l    8(A6),D4
000030B8  49F9 0000 5376          lea       _sprintf.L,A4
000030BC  56A2      
000030BE  4BF9 0B00 5377          lea       _InstructionSize.L,A5
000030C2  017E      
000030C4  3C2E 0012 5378          move.w    18(A6),D6
000030C8  CCBC 0000 5379          and.l     #65535,D6
000030CC  FFFF      
                    5380   ; unsigned char OperandMode, OperandRegister, OperandSize;
                    5381   ; short int ExWord1, ExWord2 ;                       // get any extra 16 bit word associated with EA
                    5382   ; unsigned char RegNumber[3];
                    5383   ; signed char offset ;
                    5384   ; unsigned short int Xn, XnSize ;
                    5385   ; if(EAChoice == 0)   {   // if EA in bits 5-0
000030CE  202E 000C 5386          move.l    12(A6),D0
000030D2  6620      5387          bne.s     Decode6BitEA_1
                    5388   ; OperandMode = ((unsigned char)(*OpCode >> 3) & (unsigned short int)(0x7)) ;    // get bits 5,4,3 into position 2,1,0
000030D4  2044      5389          move.l    D4,A0
000030D6  3010      5390          move.w    (A0),D0
000030D8  E648      5391          lsr.w     #3,D0
000030DA  C07C 00FF 5392          and.w     #255,D0
000030DE  C07C 0007 5393          and.w     #7,D0
000030E2  1A00      5394          move.b    D0,D5
                    5395   ; OperandRegister = ((unsigned char)(*OpCode) & (unsigned short int)(0x7)) ;
000030E4  2044      5396          move.l    D4,A0
000030E6  3010      5397          move.w    (A0),D0
000030E8  C07C 00FF 5398          and.w     #255,D0
000030EC  C07C 0007 5399          and.w     #7,D0
000030F0  1600      5400          move.b    D0,D3
000030F2  6022      5401          bra.s     Decode6BitEA_2
                    5402   Decode6BitEA_1:
                    5403   ; }
                    5404   ; else    {               // else EA in bits 11-6
                    5405   ; OperandMode = ((unsigned char)(*OpCode >> 6) & (unsigned short int)(0x7)) ;
000030F4  2044      5406          move.l    D4,A0
000030F6  3010      5407          move.w    (A0),D0
000030F8  EC48      5408          lsr.w     #6,D0
000030FA  C07C 00FF 5409          and.w     #255,D0
000030FE  C07C 0007 5410          and.w     #7,D0
00003102  1A00      5411          move.b    D0,D5
                    5412   ; OperandRegister = ((unsigned char)(*OpCode >> 9) & (unsigned short int)(0x7)) ;
00003104  2044      5413          move.l    D4,A0
00003106  3010      5414          move.w    (A0),D0
00003108  E048      5415          lsr.w     #8,D0
0000310A  E248      5416          lsr.w     #1,D0
0000310C  C07C 00FF 5417          and.w     #255,D0
00003110  C07C 0007 5418          and.w     #7,D0
00003114  1600      5419          move.b    D0,D3
                    5420   Decode6BitEA_2:
                    5421   ; }
                    5422   ; if(EAChoice == 0)    {
00003116  202E 000C 5423          move.l    12(A6),D0
0000311A  6600 0034 5424          bne       Decode6BitEA_3
                    5425   ; ExWord1 = OpCode[1+DataSize] ;
0000311E  2044      5426          move.l    D4,A0
00003120  7001      5427          moveq     #1,D0
00003122  4880      5428          ext.w     D0
00003124  48C0      5429          ext.l     D0
00003126  CCBC 0000 5430          and.l     #65535,D6
0000312A  FFFF      
0000312C  D086      5431          add.l     D6,D0
0000312E  E388      5432          lsl.l     #1,D0
00003130  3430 0800 5433          move.w    0(A0,D0.L),D2
                    5434   ; ExWord2 = OpCode[2+DataSize] ;
00003134  2044      5435          move.l    D4,A0
00003136  7002      5436          moveq     #2,D0
00003138  4880      5437          ext.w     D0
0000313A  48C0      5438          ext.l     D0
0000313C  CCBC 0000 5439          and.l     #65535,D6
00003140  FFFF      
00003142  D086      5440          add.l     D6,D0
00003144  E388      5441          lsl.l     #1,D0
00003146  3D70 0800 5442          move.w    0(A0,D0.L),-8(A6)
0000314A  FFF8      
0000314C  6000 007E 5443          bra       Decode6BitEA_7
                    5444   Decode6BitEA_3:
                    5445   ; }
                    5446   ; else if(EAChoice == 1)   {
00003150  202E 000C 5447          move.l    12(A6),D0
00003154  0C80 0000 5448          cmp.l     #1,D0
00003158  0001      
0000315A  6600 0034 5449          bne       Decode6BitEA_5
                    5450   ; ExWord1 = OpCode[3+DataSize] ;
0000315E  2044      5451          move.l    D4,A0
00003160  7003      5452          moveq     #3,D0
00003162  4880      5453          ext.w     D0
00003164  48C0      5454          ext.l     D0
00003166  CCBC 0000 5455          and.l     #65535,D6
0000316A  FFFF      
0000316C  D086      5456          add.l     D6,D0
0000316E  E388      5457          lsl.l     #1,D0
00003170  3430 0800 5458          move.w    0(A0,D0.L),D2
                    5459   ; ExWord2 = OpCode[4+DataSize] ;
00003174  2044      5460          move.l    D4,A0
00003176  7004      5461          moveq     #4,D0
00003178  4880      5462          ext.w     D0
0000317A  48C0      5463          ext.l     D0
0000317C  CCBC 0000 5464          and.l     #65535,D6
00003180  FFFF      
00003182  D086      5465          add.l     D6,D0
00003184  E388      5466          lsl.l     #1,D0
00003186  3D70 0800 5467          move.w    0(A0,D0.L),-8(A6)
0000318A  FFF8      
0000318C  6000 003E 5468          bra       Decode6BitEA_7
                    5469   Decode6BitEA_5:
                    5470   ; }
                    5471   ; else if(EAChoice == 2)   {  // for move instruction
00003190  202E 000C 5472          move.l    12(A6),D0
00003194  0C80 0000 5473          cmp.l     #2,D0
00003198  0002      
0000319A  6600 0030 5474          bne       Decode6BitEA_7
                    5475   ; ExWord1 = OpCode[1+DataSize] ;
0000319E  2044      5476          move.l    D4,A0
000031A0  7001      5477          moveq     #1,D0
000031A2  4880      5478          ext.w     D0
000031A4  48C0      5479          ext.l     D0
000031A6  CCBC 0000 5480          and.l     #65535,D6
000031AA  FFFF      
000031AC  D086      5481          add.l     D6,D0
000031AE  E388      5482          lsl.l     #1,D0
000031B0  3430 0800 5483          move.w    0(A0,D0.L),D2
                    5484   ; ExWord2 = OpCode[2+DataSize] ;
000031B4  2044      5485          move.l    D4,A0
000031B6  7002      5486          moveq     #2,D0
000031B8  4880      5487          ext.w     D0
000031BA  48C0      5488          ext.l     D0
000031BC  CCBC 0000 5489          and.l     #65535,D6
000031C0  FFFF      
000031C2  D086      5490          add.l     D6,D0
000031C4  E388      5491          lsl.l     #1,D0
000031C6  3D70 0800 5492          move.w    0(A0,D0.L),-8(A6)
000031CA  FFF8      
                    5493   Decode6BitEA_7:
                    5494   ; }
                    5495   ; if(OperandMode == (unsigned char)(0)) {                    // Effective Address = Dn
000031CC  4A05      5496          tst.b     D5
000031CE  661E      5497          bne.s     Decode6BitEA_9
                    5498   ; RegNumber[0] = 'D' ;
000031D0  1D7C 0044 5499          move.b    #68,-6+0(A6)
000031D4  FFFA      
                    5500   ; RegNumber[1] = (unsigned char)(0x30 + OperandRegister) ;
000031D6  7030      5501          moveq     #48,D0
000031D8  D003      5502          add.b     D3,D0
000031DA  1D40 FFFB 5503          move.b    D0,-6+1(A6)
                    5504   ; RegNumber[2] = 0 ;
000031DE  422E FFFC 5505          clr.b     -6+2(A6)
                    5506   ; strcatInstruction(RegNumber) ;
000031E2  486E FFFA 5507          pea       -6(A6)
000031E6  4E92      5508          jsr       (A2)
000031E8  584F      5509          addq.w    #4,A7
000031EA  6000 02D6 5510          bra       Decode6BitEA_44
                    5511   Decode6BitEA_9:
                    5512   ; }
                    5513   ; else if(OperandMode == (unsigned char)(1)) {                    // Effective Address = An
000031EE  0C05 0001 5514          cmp.b     #1,D5
000031F2  6616      5515          bne.s     Decode6BitEA_11
                    5516   ; Decode3BitAddressRegister(OperandRegister) ;
000031F4  C67C 00FF 5517          and.w     #255,D3
000031F8  C6BC 0000 5518          and.l     #65535,D3
000031FC  FFFF      
000031FE  2F03      5519          move.l    D3,-(A7)
00003200  4EB8 2E9E 5520          jsr       _Decode3BitAddressRegister
00003204  584F      5521          addq.w    #4,A7
00003206  6000 02BA 5522          bra       Decode6BitEA_44
                    5523   Decode6BitEA_11:
                    5524   ; }
                    5525   ; else if(OperandMode == (unsigned char)(2)) {                    // Effective Address = (An)
0000320A  0C05 0002 5526          cmp.b     #2,D5
0000320E  662A      5527          bne.s     Decode6BitEA_13
                    5528   ; strcatInstruction("(") ;
00003210  4879 0000 5529          pea       @m68kde~2_170.L
00003214  7384      
00003216  4E92      5530          jsr       (A2)
00003218  584F      5531          addq.w    #4,A7
                    5532   ; Decode3BitAddressRegister(OperandRegister) ;
0000321A  C67C 00FF 5533          and.w     #255,D3
0000321E  C6BC 0000 5534          and.l     #65535,D3
00003222  FFFF      
00003224  2F03      5535          move.l    D3,-(A7)
00003226  4EB8 2E9E 5536          jsr       _Decode3BitAddressRegister
0000322A  584F      5537          addq.w    #4,A7
                    5538   ; strcatInstruction(")") ;
0000322C  4879 0000 5539          pea       @m68kde~2_171.L
00003230  7386      
00003232  4E92      5540          jsr       (A2)
00003234  584F      5541          addq.w    #4,A7
00003236  6000 028A 5542          bra       Decode6BitEA_44
                    5543   Decode6BitEA_13:
                    5544   ; }
                    5545   ; else if(OperandMode == (unsigned char)(3)) {                    // Effective Address = (An)+
0000323A  0C05 0003 5546          cmp.b     #3,D5
0000323E  662A      5547          bne.s     Decode6BitEA_15
                    5548   ; strcatInstruction("(") ;
00003240  4879 0000 5549          pea       @m68kde~2_170.L
00003244  7384      
00003246  4E92      5550          jsr       (A2)
00003248  584F      5551          addq.w    #4,A7
                    5552   ; Decode3BitAddressRegister(OperandRegister) ;
0000324A  C67C 00FF 5553          and.w     #255,D3
0000324E  C6BC 0000 5554          and.l     #65535,D3
00003252  FFFF      
00003254  2F03      5555          move.l    D3,-(A7)
00003256  4EB8 2E9E 5556          jsr       _Decode3BitAddressRegister
0000325A  584F      5557          addq.w    #4,A7
                    5558   ; strcatInstruction(")+") ;
0000325C  4879 0000 5559          pea       @m68kde~2_172.L
00003260  7388      
00003262  4E92      5560          jsr       (A2)
00003264  584F      5561          addq.w    #4,A7
00003266  6000 025A 5562          bra       Decode6BitEA_44
                    5563   Decode6BitEA_15:
                    5564   ; }
                    5565   ; else if(OperandMode == (unsigned char)(4)) {                    // Effective Address = -(An)
0000326A  0C05 0004 5566          cmp.b     #4,D5
0000326E  662A      5567          bne.s     Decode6BitEA_17
                    5568   ; strcatInstruction("-(") ;
00003270  4879 0000 5569          pea       @m68kde~2_173.L
00003274  738C      
00003276  4E92      5570          jsr       (A2)
00003278  584F      5571          addq.w    #4,A7
                    5572   ; Decode3BitAddressRegister(OperandRegister) ;
0000327A  C67C 00FF 5573          and.w     #255,D3
0000327E  C6BC 0000 5574          and.l     #65535,D3
00003282  FFFF      
00003284  2F03      5575          move.l    D3,-(A7)
00003286  4EB8 2E9E 5576          jsr       _Decode3BitAddressRegister
0000328A  584F      5577          addq.w    #4,A7
                    5578   ; strcatInstruction(")") ;
0000328C  4879 0000 5579          pea       @m68kde~2_171.L
00003290  7386      
00003292  4E92      5580          jsr       (A2)
00003294  584F      5581          addq.w    #4,A7
00003296  6000 022A 5582          bra       Decode6BitEA_44
                    5583   Decode6BitEA_17:
                    5584   ; }
                    5585   ; else if(OperandMode == (unsigned char)(5)) {                    // Effective Address = (d16, An)
0000329A  0C05 0005 5586          cmp.b     #5,D5
0000329E  6626      5587          bne.s     Decode6BitEA_19
                    5588   ; sprintf(TempString, "%d(A%d)", ExWord1, OperandRegister) ;
000032A0  C6BC 0000 5589          and.l     #255,D3
000032A4  00FF      
000032A6  2F03      5590          move.l    D3,-(A7)
000032A8  48C2      5591          ext.l     D2
000032AA  2F02      5592          move.l    D2,-(A7)
000032AC  4879 0000 5593          pea       @m68kde~2_174.L
000032B0  7390      
000032B2  2F0B      5594          move.l    A3,-(A7)
000032B4  4E94      5595          jsr       (A4)
000032B6  DEFC 0010 5596          add.w     #16,A7
                    5597   ; strcatInstruction(TempString) ;
000032BA  2F0B      5598          move.l    A3,-(A7)
000032BC  4E92      5599          jsr       (A2)
000032BE  584F      5600          addq.w    #4,A7
                    5601   ; InstructionSize += 1;
000032C0  5295      5602          addq.l    #1,(A5)
000032C2  6000 01FE 5603          bra       Decode6BitEA_44
                    5604   Decode6BitEA_19:
                    5605   ; }
                    5606   ; else if(OperandMode == (unsigned char)(6)) {                    // Effective Address = (d8, An, Xn)
000032C6  0C05 0006 5607          cmp.b     #6,D5
000032CA  6600 00AA 5608          bne       Decode6BitEA_21
                    5609   ; offset = ExWord1 & (short int)(0x00FF);
000032CE  3002      5610          move.w    D2,D0
000032D0  C07C 00FF 5611          and.w     #255,D0
000032D4  1D40 FFFD 5612          move.b    D0,-3(A6)
                    5613   ; sprintf(TempString, "%d(A%d,", offset, OperandRegister) ;
000032D8  C6BC 0000 5614          and.l     #255,D3
000032DC  00FF      
000032DE  2F03      5615          move.l    D3,-(A7)
000032E0  122E FFFD 5616          move.b    -3(A6),D1
000032E4  4881      5617          ext.w     D1
000032E6  48C1      5618          ext.l     D1
000032E8  2F01      5619          move.l    D1,-(A7)
000032EA  4879 0000 5620          pea       @m68kde~2_175.L
000032EE  7398      
000032F0  2F0B      5621          move.l    A3,-(A7)
000032F2  4E94      5622          jsr       (A4)
000032F4  DEFC 0010 5623          add.w     #16,A7
                    5624   ; strcatInstruction(TempString) ;
000032F8  2F0B      5625          move.l    A3,-(A7)
000032FA  4E92      5626          jsr       (A2)
000032FC  584F      5627          addq.w    #4,A7
                    5628   ; InstructionSize += 1;
000032FE  5295      5629          addq.l    #1,(A5)
                    5630   ; // decode the Xn bit
                    5631   ; if((ExWord1 & (unsigned short int)(0x8000)) == (unsigned short int)(0x0000))
00003300  3002      5632          move.w    D2,D0
00003302  C07C 8000 5633          and.w     #32768,D0
00003306  660C      5634          bne.s     Decode6BitEA_23
                    5635   ; strcatInstruction("D") ;
00003308  4879 0000 5636          pea       @m68kde~2_176.L
0000330C  73A0      
0000330E  4E92      5637          jsr       (A2)
00003310  584F      5638          addq.w    #4,A7
00003312  600A      5639          bra.s     Decode6BitEA_24
                    5640   Decode6BitEA_23:
                    5641   ; else
                    5642   ; strcatInstruction("A") ;
00003314  4879 0000 5643          pea       @m68kde~2_177.L
00003318  73A2      
0000331A  4E92      5644          jsr       (A2)
0000331C  584F      5645          addq.w    #4,A7
                    5646   Decode6BitEA_24:
                    5647   ; Xn = (ExWord1 & (unsigned short int)(0x7000)) >> 12 ;        // get Xn register Number into bits 2,1,0
0000331E  3002      5648          move.w    D2,D0
00003320  C07C 7000 5649          and.w     #28672,D0
00003324  E048      5650          lsr.w     #8,D0
00003326  E848      5651          lsr.w     #4,D0
00003328  3D40 FFFE 5652          move.w    D0,-2(A6)
                    5653   ; sprintf(TempString, "%d",Xn) ;                               // generate string for reg number 0 -7
0000332C  322E FFFE 5654          move.w    -2(A6),D1
00003330  C2BC 0000 5655          and.l     #65535,D1
00003334  FFFF      
00003336  2F01      5656          move.l    D1,-(A7)
00003338  4879 0000 5657          pea       @m68kde~2_178.L
0000333C  73A4      
0000333E  2F0B      5658          move.l    A3,-(A7)
00003340  4E94      5659          jsr       (A4)
00003342  DEFC 000C 5660          add.w     #12,A7
                    5661   ; strcatInstruction(TempString) ;
00003346  2F0B      5662          move.l    A3,-(A7)
00003348  4E92      5663          jsr       (A2)
0000334A  584F      5664          addq.w    #4,A7
                    5665   ; XnSize = (ExWord1 & (unsigned short int)(0x0800)) >> 11 ;    // get xn size into bit 0
0000334C  3002      5666          move.w    D2,D0
0000334E  C07C 0800 5667          and.w     #2048,D0
00003352  E048      5668          lsr.w     #8,D0
00003354  E648      5669          lsr.w     #3,D0
00003356  3E00      5670          move.w    D0,D7
                    5671   ; if(XnSize == 0)
00003358  4A47      5672          tst.w     D7
0000335A  660C      5673          bne.s     Decode6BitEA_25
                    5674   ; strcatInstruction(".W)") ;
0000335C  4879 0000 5675          pea       @m68kde~2_179.L
00003360  73A8      
00003362  4E92      5676          jsr       (A2)
00003364  584F      5677          addq.w    #4,A7
00003366  600A      5678          bra.s     Decode6BitEA_26
                    5679   Decode6BitEA_25:
                    5680   ; else
                    5681   ; strcatInstruction(".L)") ;
00003368  4879 0000 5682          pea       @m68kde~2_180.L
0000336C  73AC      
0000336E  4E92      5683          jsr       (A2)
00003370  584F      5684          addq.w    #4,A7
                    5685   Decode6BitEA_26:
00003372  6000 014E 5686          bra       Decode6BitEA_44
                    5687   Decode6BitEA_21:
                    5688   ; }
                    5689   ; else if(OperandMode == (unsigned char)(7)) {
00003376  0C05 0007 5690          cmp.b     #7,D5
0000337A  6600 0146 5691          bne       Decode6BitEA_44
                    5692   ; if(OperandRegister == 0) {                               // EA = (xxx).W
0000337E  4A03      5693          tst.b     D3
00003380  661E      5694          bne.s     Decode6BitEA_29
                    5695   ; sprintf(TempString, "$%X", ExWord1) ;
00003382  48C2      5696          ext.l     D2
00003384  2F02      5697          move.l    D2,-(A7)
00003386  4879 0000 5698          pea       @m68kde~2_181.L
0000338A  73B0      
0000338C  2F0B      5699          move.l    A3,-(A7)
0000338E  4E94      5700          jsr       (A4)
00003390  DEFC 000C 5701          add.w     #12,A7
                    5702   ; strcatInstruction(TempString) ;
00003394  2F0B      5703          move.l    A3,-(A7)
00003396  4E92      5704          jsr       (A2)
00003398  584F      5705          addq.w    #4,A7
                    5706   ; InstructionSize += 1;
0000339A  5295      5707          addq.l    #1,(A5)
0000339C  6000 0124 5708          bra       Decode6BitEA_44
                    5709   Decode6BitEA_29:
                    5710   ; }
                    5711   ; else if(OperandRegister == 1)   {                         // EA = (xxx).L
000033A0  0C03 0001 5712          cmp.b     #1,D3
000033A4  6600 0032 5713          bne       Decode6BitEA_31
                    5714   ; sprintf(TempString, "$%X", ((unsigned int)(ExWord1) << 16) | (unsigned int)(ExWord2)); // create 32 bit address
000033A8  3202      5715          move.w    D2,D1
000033AA  48C1      5716          ext.l     D1
000033AC  E189      5717          lsl.l     #8,D1
000033AE  E189      5718          lsl.l     #8,D1
000033B0  2F00      5719          move.l    D0,-(A7)
000033B2  302E FFF8 5720          move.w    -8(A6),D0
000033B6  48C0      5721          ext.l     D0
000033B8  8280      5722          or.l      D0,D1
000033BA  201F      5723          move.l    (A7)+,D0
000033BC  2F01      5724          move.l    D1,-(A7)
000033BE  4879 0000 5725          pea       @m68kde~2_181.L
000033C2  73B0      
000033C4  2F0B      5726          move.l    A3,-(A7)
000033C6  4E94      5727          jsr       (A4)
000033C8  DEFC 000C 5728          add.w     #12,A7
                    5729   ; strcatInstruction(TempString) ;
000033CC  2F0B      5730          move.l    A3,-(A7)
000033CE  4E92      5731          jsr       (A2)
000033D0  584F      5732          addq.w    #4,A7
                    5733   ; InstructionSize += 2;
000033D2  5495      5734          addq.l    #2,(A5)
000033D4  6000 00EC 5735          bra       Decode6BitEA_44
                    5736   Decode6BitEA_31:
                    5737   ; }
                    5738   ; else if(OperandRegister == 4) {                                 // source EA = #Immediate addressing
000033D8  0C03 0004 5739          cmp.b     #4,D3
000033DC  661C      5740          bne.s     Decode6BitEA_33
                    5741   ; if(IsItMoveInstruction == 0)        //not move instruction
000033DE  302E 0016 5742          move.w    22(A6),D0
000033E2  660A      5743          bne.s     Decode6BitEA_35
                    5744   ; DecodeBWLDataAfterOpCode(OpCode);
000033E4  2F04      5745          move.l    D4,-(A7)
000033E6  4EB8 2F92 5746          jsr       _DecodeBWLDataAfterOpCode
000033EA  584F      5747          addq.w    #4,A7
000033EC  6008      5748          bra.s     Decode6BitEA_36
                    5749   Decode6BitEA_35:
                    5750   ; else
                    5751   ; DecodeBWLDataAfterOpCodeForMove(OpCode);
000033EE  2F04      5752          move.l    D4,-(A7)
000033F0  4EB8 2ECA 5753          jsr       _DecodeBWLDataAfterOpCodeForMove
000033F4  584F      5754          addq.w    #4,A7
                    5755   Decode6BitEA_36:
000033F6  6000 00CA 5756          bra       Decode6BitEA_44
                    5757   Decode6BitEA_33:
                    5758   ; }
                    5759   ; else if(OperandRegister == 2) {                                 // source EA = (d16,PC)
000033FA  0C03 0002 5760          cmp.b     #2,D3
000033FE  661E      5761          bne.s     Decode6BitEA_37
                    5762   ; sprintf(TempString, "%d(PC)", ExWord1) ;
00003400  48C2      5763          ext.l     D2
00003402  2F02      5764          move.l    D2,-(A7)
00003404  4879 0000 5765          pea       @m68kde~2_182.L
00003408  73B4      
0000340A  2F0B      5766          move.l    A3,-(A7)
0000340C  4E94      5767          jsr       (A4)
0000340E  DEFC 000C 5768          add.w     #12,A7
                    5769   ; strcatInstruction(TempString) ;
00003412  2F0B      5770          move.l    A3,-(A7)
00003414  4E92      5771          jsr       (A2)
00003416  584F      5772          addq.w    #4,A7
                    5773   ; InstructionSize += 1;
00003418  5295      5774          addq.l    #1,(A5)
0000341A  6000 00A6 5775          bra       Decode6BitEA_44
                    5776   Decode6BitEA_37:
                    5777   ; }
                    5778   ; else if(OperandRegister == 3) {                                 // source EA = (d8,PC, Xn)
0000341E  0C03 0003 5779          cmp.b     #3,D3
00003422  6600 009E 5780          bne       Decode6BitEA_44
                    5781   ; offset = ExWord1 & (short int)(0x00FF);
00003426  3002      5782          move.w    D2,D0
00003428  C07C 00FF 5783          and.w     #255,D0
0000342C  1D40 FFFD 5784          move.b    D0,-3(A6)
                    5785   ; sprintf(TempString, "%d(PC,", offset ) ;
00003430  122E FFFD 5786          move.b    -3(A6),D1
00003434  4881      5787          ext.w     D1
00003436  48C1      5788          ext.l     D1
00003438  2F01      5789          move.l    D1,-(A7)
0000343A  4879 0000 5790          pea       @m68kde~2_183.L
0000343E  73BC      
00003440  2F0B      5791          move.l    A3,-(A7)
00003442  4E94      5792          jsr       (A4)
00003444  DEFC 000C 5793          add.w     #12,A7
                    5794   ; strcatInstruction(TempString) ;
00003448  2F0B      5795          move.l    A3,-(A7)
0000344A  4E92      5796          jsr       (A2)
0000344C  584F      5797          addq.w    #4,A7
                    5798   ; InstructionSize += 1;
0000344E  5295      5799          addq.l    #1,(A5)
                    5800   ; // decode the Xn bit
                    5801   ; if((ExWord1 & (unsigned short int)(0x8000)) == (unsigned short int)(0x0000))
00003450  3002      5802          move.w    D2,D0
00003452  C07C 8000 5803          and.w     #32768,D0
00003456  660C      5804          bne.s     Decode6BitEA_41
                    5805   ; strcatInstruction("D") ;
00003458  4879 0000 5806          pea       @m68kde~2_176.L
0000345C  73A0      
0000345E  4E92      5807          jsr       (A2)
00003460  584F      5808          addq.w    #4,A7
00003462  600A      5809          bra.s     Decode6BitEA_42
                    5810   Decode6BitEA_41:
                    5811   ; else
                    5812   ; strcatInstruction("A") ;
00003464  4879 0000 5813          pea       @m68kde~2_177.L
00003468  73A2      
0000346A  4E92      5814          jsr       (A2)
0000346C  584F      5815          addq.w    #4,A7
                    5816   Decode6BitEA_42:
                    5817   ; Xn = (ExWord1 & (unsigned short int)(0x7000)) >> 12 ;        // get Xn register Number into bits 2,1,0
0000346E  3002      5818          move.w    D2,D0
00003470  C07C 7000 5819          and.w     #28672,D0
00003474  E048      5820          lsr.w     #8,D0
00003476  E848      5821          lsr.w     #4,D0
00003478  3D40 FFFE 5822          move.w    D0,-2(A6)
                    5823   ; sprintf(TempString, "%d",Xn) ;                               // generate string for reg number 0 -7
0000347C  322E FFFE 5824          move.w    -2(A6),D1
00003480  C2BC 0000 5825          and.l     #65535,D1
00003484  FFFF      
00003486  2F01      5826          move.l    D1,-(A7)
00003488  4879 0000 5827          pea       @m68kde~2_178.L
0000348C  73A4      
0000348E  2F0B      5828          move.l    A3,-(A7)
00003490  4E94      5829          jsr       (A4)
00003492  DEFC 000C 5830          add.w     #12,A7
                    5831   ; strcatInstruction(TempString) ;
00003496  2F0B      5832          move.l    A3,-(A7)
00003498  4E92      5833          jsr       (A2)
0000349A  584F      5834          addq.w    #4,A7
                    5835   ; XnSize = (ExWord1 & (unsigned short int)(0x0800)) >> 11 ;    // get xn size into bit 0
0000349C  3002      5836          move.w    D2,D0
0000349E  C07C 0800 5837          and.w     #2048,D0
000034A2  E048      5838          lsr.w     #8,D0
000034A4  E648      5839          lsr.w     #3,D0
000034A6  3E00      5840          move.w    D0,D7
                    5841   ; if(XnSize == 0)
000034A8  4A47      5842          tst.w     D7
000034AA  660C      5843          bne.s     Decode6BitEA_43
                    5844   ; strcatInstruction(".W)") ;
000034AC  4879 0000 5845          pea       @m68kde~2_179.L
000034B0  73A8      
000034B2  4E92      5846          jsr       (A2)
000034B4  584F      5847          addq.w    #4,A7
000034B6  600A      5848          bra.s     Decode6BitEA_44
                    5849   Decode6BitEA_43:
                    5850   ; else
                    5851   ; strcatInstruction(".L)") ;
000034B8  4879 0000 5852          pea       @m68kde~2_180.L
000034BC  73AC      
000034BE  4E92      5853          jsr       (A2)
000034C0  584F      5854          addq.w    #4,A7
                    5855   Decode6BitEA_44:
000034C2  4CDF 3CFC 5856          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
000034C6  4E5E      5857          unlk      A6
000034C8  4E75      5858          rts
                    5859   ; }
                    5860   ; }
                    5861   ; }
                    5862   ; void Decode3BitOperandMode(unsigned short int *OpCode)               // used with instructions like ADD determines source/destination
                    5863   ; {
                    5864   _Decode3BitOperandMode:
000034CA  4E56 FFFC 5865          link      A6,#-4
000034CE  2F02      5866          move.l    D2,-(A7)
000034D0  242E 0008 5867          move.l    8(A6),D2
                    5868   ; unsigned short int OperandMode;
                    5869   ; OperandMode = (*OpCode & (unsigned short int)(0x0100)) >> 8 ;    // get bit 8 into position 0, defines source and destination
000034D4  2042      5870          move.l    D2,A0
000034D6  3010      5871          move.w    (A0),D0
000034D8  C07C 0100 5872          and.w     #256,D0
000034DC  E048      5873          lsr.w     #8,D0
000034DE  3D40 FFFE 5874          move.w    D0,-2(A6)
                    5875   ; Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
000034E2  2042      5876          move.l    D2,A0
000034E4  3210      5877          move.w    (A0),D1
000034E6  C2BC 0000 5878          and.l     #65535,D1
000034EA  FFFF      
000034EC  2F01      5879          move.l    D1,-(A7)
000034EE  4EB8 2E0E 5880          jsr       _Decode2BitOperandSize
000034F2  584F      5881          addq.w    #4,A7
                    5882   ; if(OperandMode == 0)     {                                      // Destination is a Data Register
000034F4  302E FFFE 5883          move.w    -2(A6),D0
000034F8  6600 0032 5884          bne       Decode3BitOperandMode_1
                    5885   ; Decode6BitEA(OpCode,0,0,0) ;
000034FC  42A7      5886          clr.l     -(A7)
000034FE  42A7      5887          clr.l     -(A7)
00003500  42A7      5888          clr.l     -(A7)
00003502  2F02      5889          move.l    D2,-(A7)
00003504  4EB8 30A2 5890          jsr       _Decode6BitEA
00003508  DEFC 0010 5891          add.w     #16,A7
                    5892   ; strcatInstruction(",") ;
0000350C  4879 0000 5893          pea       @m68kde~2_184.L
00003510  73C4      
00003512  4EB8 0CCC 5894          jsr       _strcatInstruction
00003516  584F      5895          addq.w    #4,A7
                    5896   ; Decode3BitDataRegister(*OpCode) ;
00003518  2042      5897          move.l    D2,A0
0000351A  3210      5898          move.w    (A0),D1
0000351C  C2BC 0000 5899          and.l     #65535,D1
00003520  FFFF      
00003522  2F01      5900          move.l    D1,-(A7)
00003524  4EB8 2E6A 5901          jsr       _Decode3BitDataRegister
00003528  584F      5902          addq.w    #4,A7
0000352A  602E      5903          bra.s     Decode3BitOperandMode_2
                    5904   Decode3BitOperandMode_1:
                    5905   ; }
                    5906   ; else {                                                         // Destination is in EA
                    5907   ; Decode3BitDataRegister(*OpCode) ;
0000352C  2042      5908          move.l    D2,A0
0000352E  3210      5909          move.w    (A0),D1
00003530  C2BC 0000 5910          and.l     #65535,D1
00003534  FFFF      
00003536  2F01      5911          move.l    D1,-(A7)
00003538  4EB8 2E6A 5912          jsr       _Decode3BitDataRegister
0000353C  584F      5913          addq.w    #4,A7
                    5914   ; strcatInstruction(",") ;
0000353E  4879 0000 5915          pea       @m68kde~2_184.L
00003542  73C4      
00003544  4EB8 0CCC 5916          jsr       _strcatInstruction
00003548  584F      5917          addq.w    #4,A7
                    5918   ; Decode6BitEA(OpCode,0,0,0) ;
0000354A  42A7      5919          clr.l     -(A7)
0000354C  42A7      5920          clr.l     -(A7)
0000354E  42A7      5921          clr.l     -(A7)
00003550  2F02      5922          move.l    D2,-(A7)
00003552  4EB8 30A2 5923          jsr       _Decode6BitEA
00003556  DEFC 0010 5924          add.w     #16,A7
                    5925   Decode3BitOperandMode_2:
0000355A  241F      5926          move.l    (A7)+,D2
0000355C  4E5E      5927          unlk      A6
0000355E  4E75      5928          rts
                    5929   ; }
                    5930   ; }
                    5931   ; void DecodeBranchCondition(unsigned short int Condition)
                    5932   ; {
                    5933   _DecodeBranchCondition:
00003560  4E56 0000 5934          link      A6,#0
00003564  48E7 2020 5935          movem.l   D2/A2,-(A7)
00003568  45F8 0CCC 5936          lea       _strcatInstruction.L,A2
0000356C  342E 000A 5937          move.w    10(A6),D2
00003570  C4BC 0000 5938          and.l     #65535,D2
00003574  FFFF      
                    5939   ; if(Condition == (unsigned short int)(0x04))
00003576  0C42 0004 5940          cmp.w     #4,D2
0000357A  660E      5941          bne.s     DecodeBranchCondition_1
                    5942   ; strcatInstruction("CC") ;
0000357C  4879 0000 5943          pea       @m68kde~2_185.L
00003580  73C6      
00003582  4E92      5944          jsr       (A2)
00003584  584F      5945          addq.w    #4,A7
00003586  6000 011C 5946          bra       DecodeBranchCondition_30
                    5947   DecodeBranchCondition_1:
                    5948   ; else if(Condition == (unsigned short int)(0x05))
0000358A  0C42 0005 5949          cmp.w     #5,D2
0000358E  660E      5950          bne.s     DecodeBranchCondition_3
                    5951   ; strcatInstruction("CS") ;
00003590  4879 0000 5952          pea       @m68kde~2_186.L
00003594  73CA      
00003596  4E92      5953          jsr       (A2)
00003598  584F      5954          addq.w    #4,A7
0000359A  6000 0108 5955          bra       DecodeBranchCondition_30
                    5956   DecodeBranchCondition_3:
                    5957   ; else if(Condition == (unsigned short int)(0x07))
0000359E  0C42 0007 5958          cmp.w     #7,D2
000035A2  660E      5959          bne.s     DecodeBranchCondition_5
                    5960   ; strcatInstruction("EQ") ;
000035A4  4879 0000 5961          pea       @m68kde~2_187.L
000035A8  73CE      
000035AA  4E92      5962          jsr       (A2)
000035AC  584F      5963          addq.w    #4,A7
000035AE  6000 00F4 5964          bra       DecodeBranchCondition_30
                    5965   DecodeBranchCondition_5:
                    5966   ; else if(Condition == (unsigned short int)(0x0C))
000035B2  0C42 000C 5967          cmp.w     #12,D2
000035B6  660E      5968          bne.s     DecodeBranchCondition_7
                    5969   ; strcatInstruction("GE") ;
000035B8  4879 0000 5970          pea       @m68kde~2_188.L
000035BC  73D2      
000035BE  4E92      5971          jsr       (A2)
000035C0  584F      5972          addq.w    #4,A7
000035C2  6000 00E0 5973          bra       DecodeBranchCondition_30
                    5974   DecodeBranchCondition_7:
                    5975   ; else if(Condition == (unsigned short int)(0x0E))
000035C6  0C42 000E 5976          cmp.w     #14,D2
000035CA  660E      5977          bne.s     DecodeBranchCondition_9
                    5978   ; strcatInstruction("GT") ;
000035CC  4879 0000 5979          pea       @m68kde~2_189.L
000035D0  73D6      
000035D2  4E92      5980          jsr       (A2)
000035D4  584F      5981          addq.w    #4,A7
000035D6  6000 00CC 5982          bra       DecodeBranchCondition_30
                    5983   DecodeBranchCondition_9:
                    5984   ; else if(Condition == (unsigned short int)(0x02))
000035DA  0C42 0002 5985          cmp.w     #2,D2
000035DE  660E      5986          bne.s     DecodeBranchCondition_11
                    5987   ; strcatInstruction("HI") ;
000035E0  4879 0000 5988          pea       @m68kde~2_190.L
000035E4  73DA      
000035E6  4E92      5989          jsr       (A2)
000035E8  584F      5990          addq.w    #4,A7
000035EA  6000 00B8 5991          bra       DecodeBranchCondition_30
                    5992   DecodeBranchCondition_11:
                    5993   ; else if(Condition == (unsigned short int)(0x0F))
000035EE  0C42 000F 5994          cmp.w     #15,D2
000035F2  660E      5995          bne.s     DecodeBranchCondition_13
                    5996   ; strcatInstruction("LE") ;
000035F4  4879 0000 5997          pea       @m68kde~2_191.L
000035F8  73DE      
000035FA  4E92      5998          jsr       (A2)
000035FC  584F      5999          addq.w    #4,A7
000035FE  6000 00A4 6000          bra       DecodeBranchCondition_30
                    6001   DecodeBranchCondition_13:
                    6002   ; else if(Condition == (unsigned short int)(0x03))
00003602  0C42 0003 6003          cmp.w     #3,D2
00003606  660E      6004          bne.s     DecodeBranchCondition_15
                    6005   ; strcatInstruction("LS") ;
00003608  4879 0000 6006          pea       @m68kde~2_192.L
0000360C  73E2      
0000360E  4E92      6007          jsr       (A2)
00003610  584F      6008          addq.w    #4,A7
00003612  6000 0090 6009          bra       DecodeBranchCondition_30
                    6010   DecodeBranchCondition_15:
                    6011   ; else if(Condition == (unsigned short int)(0x0D))
00003616  0C42 000D 6012          cmp.w     #13,D2
0000361A  660E      6013          bne.s     DecodeBranchCondition_17
                    6014   ; strcatInstruction("LT") ;
0000361C  4879 0000 6015          pea       @m68kde~2_193.L
00003620  73E6      
00003622  4E92      6016          jsr       (A2)
00003624  584F      6017          addq.w    #4,A7
00003626  6000 007C 6018          bra       DecodeBranchCondition_30
                    6019   DecodeBranchCondition_17:
                    6020   ; else if(Condition == (unsigned short int)(0x0B))
0000362A  0C42 000B 6021          cmp.w     #11,D2
0000362E  660E      6022          bne.s     DecodeBranchCondition_19
                    6023   ; strcatInstruction("MI") ;
00003630  4879 0000 6024          pea       @m68kde~2_194.L
00003634  73EA      
00003636  4E92      6025          jsr       (A2)
00003638  584F      6026          addq.w    #4,A7
0000363A  6000 0068 6027          bra       DecodeBranchCondition_30
                    6028   DecodeBranchCondition_19:
                    6029   ; else if(Condition == (unsigned short int)(0x06))
0000363E  0C42 0006 6030          cmp.w     #6,D2
00003642  660E      6031          bne.s     DecodeBranchCondition_21
                    6032   ; strcatInstruction("NE") ;
00003644  4879 0000 6033          pea       @m68kde~2_195.L
00003648  73EE      
0000364A  4E92      6034          jsr       (A2)
0000364C  584F      6035          addq.w    #4,A7
0000364E  6000 0054 6036          bra       DecodeBranchCondition_30
                    6037   DecodeBranchCondition_21:
                    6038   ; else if(Condition == (unsigned short int)(0x0A))
00003652  0C42 000A 6039          cmp.w     #10,D2
00003656  660E      6040          bne.s     DecodeBranchCondition_23
                    6041   ; strcatInstruction("PL") ;
00003658  4879 0000 6042          pea       @m68kde~2_196.L
0000365C  73F2      
0000365E  4E92      6043          jsr       (A2)
00003660  584F      6044          addq.w    #4,A7
00003662  6000 0040 6045          bra       DecodeBranchCondition_30
                    6046   DecodeBranchCondition_23:
                    6047   ; else if(Condition == (unsigned short int)(0x09))
00003666  0C42 0009 6048          cmp.w     #9,D2
0000366A  660C      6049          bne.s     DecodeBranchCondition_25
                    6050   ; strcatInstruction("VS") ;
0000366C  4879 0000 6051          pea       @m68kde~2_197.L
00003670  73F6      
00003672  4E92      6052          jsr       (A2)
00003674  584F      6053          addq.w    #4,A7
00003676  602C      6054          bra.s     DecodeBranchCondition_30
                    6055   DecodeBranchCondition_25:
                    6056   ; else if(Condition == (unsigned short int)(0x08))
00003678  0C42 0008 6057          cmp.w     #8,D2
0000367C  660C      6058          bne.s     DecodeBranchCondition_27
                    6059   ; strcatInstruction("VC") ;
0000367E  4879 0000 6060          pea       @m68kde~2_198.L
00003682  73FA      
00003684  4E92      6061          jsr       (A2)
00003686  584F      6062          addq.w    #4,A7
00003688  601A      6063          bra.s     DecodeBranchCondition_30
                    6064   DecodeBranchCondition_27:
                    6065   ; else if(Condition == (unsigned short int)(0))
0000368A  4A42      6066          tst.w     D2
0000368C  660C      6067          bne.s     DecodeBranchCondition_29
                    6068   ; strcatInstruction("RA") ;
0000368E  4879 0000 6069          pea       @m68kde~2_199.L
00003692  73FE      
00003694  4E92      6070          jsr       (A2)
00003696  584F      6071          addq.w    #4,A7
00003698  600A      6072          bra.s     DecodeBranchCondition_30
                    6073   DecodeBranchCondition_29:
                    6074   ; else
                    6075   ; strcatInstruction("SR");
0000369A  4879 0000 6076          pea       @m68kde~2_200.L
0000369E  7402      
000036A0  4E92      6077          jsr       (A2)
000036A2  584F      6078          addq.w    #4,A7
                    6079   DecodeBranchCondition_30:
                    6080   ; strcatInstruction(" ") ;
000036A4  4879 0000 6081          pea       @m68kde~2_30.L
000036A8  63E2      
000036AA  4E92      6082          jsr       (A2)
000036AC  584F      6083          addq.w    #4,A7
000036AE  4CDF 0404 6084          movem.l   (A7)+,D2/A2
000036B2  4E5E      6085          unlk      A6
000036B4  4E75      6086          rts
                    6087   ; }
                    6088   ; void DisassembleInstruction( short int *OpCode)         // pointer to Opcode
                    6089   ; {
                    6090   _DisassembleInstruction:
000036B6  4E56 FFD8 6091          link      A6,#-40
000036BA  48E7 3F3C 6092          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
000036BE  242E 0008 6093          move.l    8(A6),D2
000036C2  45F9 0B00 6094          lea       _InstructionSize.L,A2
000036C6  017E      
000036C8  47F8 0CE6 6095          lea       _strcpyInstruction.L,A3
000036CC  49F9 0B00 6096          lea       _TempString.L,A4
000036D0  0546      
000036D2  4BF9 0000 6097          lea       _sprintf.L,A5
000036D6  56A2      
                    6098   ; unsigned short int MSBits = (*OpCode >> 12);    //mask off the lower 12 bits leaving top 4 bit to analyse
000036D8  2042      6099          move.l    D2,A0
000036DA  3010      6100          move.w    (A0),D0
000036DC  E040      6101          asr.w     #8,D0
000036DE  E840      6102          asr.w     #4,D0
000036E0  3D40 FFDA 6103          move.w    D0,-38(A6)
                    6104   ; unsigned short int LS12Bits = (*OpCode & (unsigned short int)(0x0FFF));
000036E4  2042      6105          move.l    D2,A0
000036E6  3010      6106          move.w    (A0),D0
000036E8  C07C 0FFF 6107          and.w     #4095,D0
000036EC  3D40 FFDC 6108          move.w    D0,-36(A6)
                    6109   ; unsigned short int SourceBits, DestBits, Size ;
                    6110   ; unsigned char *Mode, Condition;
                    6111   ; unsigned short int Register, OpMode, EAMode, EARegister, Rx, Ry, EXGOpMode, DataSize, SourceReg;
                    6112   ; unsigned short int DataRegister, AddressRegister;
                    6113   ; signed char Displacement8Bit ;  // used for Bcc type instruction signed 8 bit displacement
                    6114   ; signed short int Displacement16Bit;
                    6115   ; short int Mask, DoneSlash;
                    6116   ; int i;
                    6117   ; strcpyInstruction("Unknown") ;
000036F0  4879 0000 6118          pea       @m68kde~2_201.L
000036F4  7406      
000036F6  4E93      6119          jsr       (A3)
000036F8  584F      6120          addq.w    #4,A7
                    6121   ; /////////////////////////////////////////////////////////////////////////////////
                    6122   ; // if instruction is ABCD
                    6123   ; /////////////////////////////////////////////////////////////////////////////////
                    6124   ; if((*OpCode & (unsigned short int)(0xF1F0 )) == (unsigned short int)(0xC100))   {
000036FA  2042      6125          move.l    D2,A0
000036FC  3010      6126          move.w    (A0),D0
000036FE  C07C F1F0 6127          and.w     #61936,D0
00003702  0C40 C100 6128          cmp.w     #49408,D0
00003706  6600 008C 6129          bne       DisassembleInstruction_4
                    6130   ; DestBits = (*OpCode >> 9) & (unsigned short int )(0x0007) ;
0000370A  2042      6131          move.l    D2,A0
0000370C  3010      6132          move.w    (A0),D0
0000370E  E040      6133          asr.w     #8,D0
00003710  E240      6134          asr.w     #1,D0
00003712  C07C 0007 6135          and.w     #7,D0
00003716  3D40 FFE0 6136          move.w    D0,-32(A6)
                    6137   ; SourceBits = (*OpCode & (unsigned short int )(0x0007));
0000371A  2042      6138          move.l    D2,A0
0000371C  3010      6139          move.w    (A0),D0
0000371E  C07C 0007 6140          and.w     #7,D0
00003722  3D40 FFDE 6141          move.w    D0,-34(A6)
                    6142   ; Mode = (*OpCode >> 3) & (unsigned short int )(0x0001) ;
00003726  2042      6143          move.l    D2,A0
00003728  3010      6144          move.w    (A0),D0
0000372A  E640      6145          asr.w     #3,D0
0000372C  48C0      6146          ext.l     D0
0000372E  C0BC 0000 6147          and.l     #1,D0
00003732  0001      
00003734  2D40 FFE4 6148          move.l    D0,-28(A6)
                    6149   ; if(Mode == 0)
00003738  202E FFE4 6150          move.l    -28(A6),D0
0000373C  662C      6151          bne.s     DisassembleInstruction_3
                    6152   ; sprintf(Instruction, "ABCD D%d,D%d", SourceBits, DestBits) ;
0000373E  322E FFE0 6153          move.w    -32(A6),D1
00003742  C2BC 0000 6154          and.l     #65535,D1
00003746  FFFF      
00003748  2F01      6155          move.l    D1,-(A7)
0000374A  322E FFDE 6156          move.w    -34(A6),D1
0000374E  C2BC 0000 6157          and.l     #65535,D1
00003752  FFFF      
00003754  2F01      6158          move.l    D1,-(A7)
00003756  4879 0000 6159          pea       @m68kde~2_202.L
0000375A  740E      
0000375C  4879 0B00 6160          pea       _Instruction.L
00003760  04E2      
00003762  4E95      6161          jsr       (A5)
00003764  DEFC 0010 6162          add.w     #16,A7
00003768  602A      6163          bra.s     DisassembleInstruction_4
                    6164   DisassembleInstruction_3:
                    6165   ; else
                    6166   ; sprintf(Instruction, "ABCD -(A%d),-(A%d)", SourceBits, DestBits) ;
0000376A  322E FFE0 6167          move.w    -32(A6),D1
0000376E  C2BC 0000 6168          and.l     #65535,D1
00003772  FFFF      
00003774  2F01      6169          move.l    D1,-(A7)
00003776  322E FFDE 6170          move.w    -34(A6),D1
0000377A  C2BC 0000 6171          and.l     #65535,D1
0000377E  FFFF      
00003780  2F01      6172          move.l    D1,-(A7)
00003782  4879 0000 6173          pea       @m68kde~2_203.L
00003786  741C      
00003788  4879 0B00 6174          pea       _Instruction.L
0000378C  04E2      
0000378E  4E95      6175          jsr       (A5)
00003790  DEFC 0010 6176          add.w     #16,A7
                    6177   DisassembleInstruction_4:
                    6178   ; }
                    6179   ; /////////////////////////////////////////////////////////////////////////////////
                    6180   ; // if instruction is ADD or ADDA
                    6181   ; /////////////////////////////////////////////////////////////////////////////////
                    6182   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0xD000))   {
00003794  2042      6183          move.l    D2,A0
00003796  3010      6184          move.w    (A0),D0
00003798  C07C F000 6185          and.w     #61440,D0
0000379C  0C40 D000 6186          cmp.w     #53248,D0
000037A0  6600 008C 6187          bne       DisassembleInstruction_8
                    6188   ; InstructionSize = 1;
000037A4  24BC 0000 6189          move.l    #1,(A2)
000037A8  0001      
                    6190   ; OpMode = ((*OpCode >> 6) & (unsigned short int)(0x0007)) ;
000037AA  2042      6191          move.l    D2,A0
000037AC  3010      6192          move.w    (A0),D0
000037AE  EC40      6193          asr.w     #6,D0
000037B0  C07C 0007 6194          and.w     #7,D0
000037B4  3600      6195          move.w    D0,D3
                    6196   ; if( (OpMode == (unsigned short int)(0x0003)) || (OpMode == (unsigned short int)(0x0007)))      // if destination is an address register then use ADDA otherwise use ADD
000037B6  0C43 0003 6197          cmp.w     #3,D3
000037BA  6708      6198          beq.s     DisassembleInstruction_9
000037BC  0C43 0007 6199          cmp.w     #7,D3
000037C0  6600 005A 6200          bne       DisassembleInstruction_7
                    6201   DisassembleInstruction_9:
                    6202   ; {
                    6203   ; if(OpMode == (unsigned short int)(0x0003))
000037C4  0C43 0003 6204          cmp.w     #3,D3
000037C8  660C      6205          bne.s     DisassembleInstruction_10
                    6206   ; strcpyInstruction("ADDA.W ") ;
000037CA  4879 0000 6207          pea       @m68kde~2_204.L
000037CE  7430      
000037D0  4E93      6208          jsr       (A3)
000037D2  584F      6209          addq.w    #4,A7
000037D4  600A      6210          bra.s     DisassembleInstruction_11
                    6211   DisassembleInstruction_10:
                    6212   ; else
                    6213   ; strcpyInstruction("ADDA.L ") ;
000037D6  4879 0000 6214          pea       @m68kde~2_205.L
000037DA  7438      
000037DC  4E93      6215          jsr       (A3)
000037DE  584F      6216          addq.w    #4,A7
                    6217   DisassembleInstruction_11:
                    6218   ; Decode6BitEA(OpCode,0,0,0)  ;
000037E0  42A7      6219          clr.l     -(A7)
000037E2  42A7      6220          clr.l     -(A7)
000037E4  42A7      6221          clr.l     -(A7)
000037E6  2F02      6222          move.l    D2,-(A7)
000037E8  4EB8 30A2 6223          jsr       _Decode6BitEA
000037EC  DEFC 0010 6224          add.w     #16,A7
                    6225   ; sprintf(TempString, ",A%X", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
000037F0  2042      6226          move.l    D2,A0
000037F2  3210      6227          move.w    (A0),D1
000037F4  E041      6228          asr.w     #8,D1
000037F6  E241      6229          asr.w     #1,D1
000037F8  C27C 0007 6230          and.w     #7,D1
000037FC  C2BC 0000 6231          and.l     #65535,D1
00003800  FFFF      
00003802  2F01      6232          move.l    D1,-(A7)
00003804  4879 0000 6233          pea       @m68kde~2_206.L
00003808  7440      
0000380A  2F0C      6234          move.l    A4,-(A7)
0000380C  4E95      6235          jsr       (A5)
0000380E  DEFC 000C 6236          add.w     #12,A7
                    6237   ; strcatInstruction(TempString) ;
00003812  2F0C      6238          move.l    A4,-(A7)
00003814  4EB8 0CCC 6239          jsr       _strcatInstruction
00003818  584F      6240          addq.w    #4,A7
0000381A  6012      6241          bra.s     DisassembleInstruction_8
                    6242   DisassembleInstruction_7:
                    6243   ; }
                    6244   ; else {
                    6245   ; strcpyInstruction("ADD") ;
0000381C  4879 0000 6246          pea       @m68kde~2_207.L
00003820  7446      
00003822  4E93      6247          jsr       (A3)
00003824  584F      6248          addq.w    #4,A7
                    6249   ; Decode3BitOperandMode(OpCode) ;
00003826  2F02      6250          move.l    D2,-(A7)
00003828  4EB8 34CA 6251          jsr       _Decode3BitOperandMode
0000382C  584F      6252          addq.w    #4,A7
                    6253   DisassembleInstruction_8:
                    6254   ; }
                    6255   ; }
                    6256   ; /////////////////////////////////////////////////////////////////////////////////
                    6257   ; // if instruction is ADDI or ANDI or CMPI or EORI or ORI or SUBI
                    6258   ; /////////////////////////////////////////////////////////////////////////////////
                    6259   ; if( (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0600) |
0000382E  2042      6260          move.l    D2,A0
00003830  3010      6261          move.w    (A0),D0
00003832  C07C FF00 6262          and.w     #65280,D0
00003836  0C40 0600 6263          cmp.w     #1536,D0
0000383A  6604      6264          bne.s     DisassembleInstruction_14
0000383C  7001      6265          moveq     #1,D0
0000383E  6002      6266          bra.s     DisassembleInstruction_15
                    6267   DisassembleInstruction_14:
00003840  4280      6268          clr.l     D0
                    6269   DisassembleInstruction_15:
00003842  2042      6270          move.l    D2,A0
00003844  3210      6271          move.w    (A0),D1
00003846  C27C FF00 6272          and.w     #65280,D1
0000384A  0C41 0200 6273          cmp.w     #512,D1
0000384E  6604      6274          bne.s     DisassembleInstruction_16
00003850  7201      6275          moveq     #1,D1
00003852  6002      6276          bra.s     DisassembleInstruction_17
                    6277   DisassembleInstruction_16:
00003854  4281      6278          clr.l     D1
                    6279   DisassembleInstruction_17:
00003856  8041      6280          or.w      D1,D0
00003858  2042      6281          move.l    D2,A0
0000385A  3210      6282          move.w    (A0),D1
0000385C  C27C FF00 6283          and.w     #65280,D1
00003860  0C41 0C00 6284          cmp.w     #3072,D1
00003864  6604      6285          bne.s     DisassembleInstruction_18
00003866  7201      6286          moveq     #1,D1
00003868  6002      6287          bra.s     DisassembleInstruction_19
                    6288   DisassembleInstruction_18:
0000386A  4281      6289          clr.l     D1
                    6290   DisassembleInstruction_19:
0000386C  8041      6291          or.w      D1,D0
0000386E  2042      6292          move.l    D2,A0
00003870  3210      6293          move.w    (A0),D1
00003872  C27C FF00 6294          and.w     #65280,D1
00003876  0C41 0A00 6295          cmp.w     #2560,D1
0000387A  6604      6296          bne.s     DisassembleInstruction_20
0000387C  7201      6297          moveq     #1,D1
0000387E  6002      6298          bra.s     DisassembleInstruction_21
                    6299   DisassembleInstruction_20:
00003880  4281      6300          clr.l     D1
                    6301   DisassembleInstruction_21:
00003882  8041      6302          or.w      D1,D0
00003884  2042      6303          move.l    D2,A0
00003886  3210      6304          move.w    (A0),D1
00003888  C27C FF00 6305          and.w     #65280,D1
0000388C  6604      6306          bne.s     DisassembleInstruction_22
0000388E  7201      6307          moveq     #1,D1
00003890  6002      6308          bra.s     DisassembleInstruction_23
                    6309   DisassembleInstruction_22:
00003892  4281      6310          clr.l     D1
                    6311   DisassembleInstruction_23:
00003894  8041      6312          or.w      D1,D0
00003896  2042      6313          move.l    D2,A0
00003898  3210      6314          move.w    (A0),D1
0000389A  C27C FF00 6315          and.w     #65280,D1
0000389E  0C41 0400 6316          cmp.w     #1024,D1
000038A2  6604      6317          bne.s     DisassembleInstruction_24
000038A4  7201      6318          moveq     #1,D1
000038A6  6002      6319          bra.s     DisassembleInstruction_25
                    6320   DisassembleInstruction_24:
000038A8  4281      6321          clr.l     D1
                    6322   DisassembleInstruction_25:
000038AA  8041      6323          or.w      D1,D0
000038AC  6700 00E4 6324          beq       DisassembleInstruction_12
                    6325   ; (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0200) |
                    6326   ; (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0C00) |
                    6327   ; (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0A00) |
                    6328   ; (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0000) |
                    6329   ; (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0400))
                    6330   ; {
                    6331   ; InstructionSize = 1;
000038B0  24BC 0000 6332          move.l    #1,(A2)
000038B4  0001      
                    6333   ; if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0600))
000038B6  2042      6334          move.l    D2,A0
000038B8  3010      6335          move.w    (A0),D0
000038BA  C07C FF00 6336          and.w     #65280,D0
000038BE  0C40 0600 6337          cmp.w     #1536,D0
000038C2  660E      6338          bne.s     DisassembleInstruction_26
                    6339   ; strcpyInstruction("ADDI") ;
000038C4  4879 0000 6340          pea       @m68kde~2_208.L
000038C8  744A      
000038CA  4E93      6341          jsr       (A3)
000038CC  584F      6342          addq.w    #4,A7
000038CE  6000 0084 6343          bra       DisassembleInstruction_36
                    6344   DisassembleInstruction_26:
                    6345   ; else if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0200))
000038D2  2042      6346          move.l    D2,A0
000038D4  3010      6347          move.w    (A0),D0
000038D6  C07C FF00 6348          and.w     #65280,D0
000038DA  0C40 0200 6349          cmp.w     #512,D0
000038DE  660E      6350          bne.s     DisassembleInstruction_28
                    6351   ; strcpyInstruction("ANDI") ;
000038E0  4879 0000 6352          pea       @m68kde~2_209.L
000038E4  7450      
000038E6  4E93      6353          jsr       (A3)
000038E8  584F      6354          addq.w    #4,A7
000038EA  6000 0068 6355          bra       DisassembleInstruction_36
                    6356   DisassembleInstruction_28:
                    6357   ; else if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0C00))
000038EE  2042      6358          move.l    D2,A0
000038F0  3010      6359          move.w    (A0),D0
000038F2  C07C FF00 6360          and.w     #65280,D0
000038F6  0C40 0C00 6361          cmp.w     #3072,D0
000038FA  660E      6362          bne.s     DisassembleInstruction_30
                    6363   ; strcpyInstruction("CMPI") ;
000038FC  4879 0000 6364          pea       @m68kde~2_210.L
00003900  7456      
00003902  4E93      6365          jsr       (A3)
00003904  584F      6366          addq.w    #4,A7
00003906  6000 004C 6367          bra       DisassembleInstruction_36
                    6368   DisassembleInstruction_30:
                    6369   ; else if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0A00))
0000390A  2042      6370          move.l    D2,A0
0000390C  3010      6371          move.w    (A0),D0
0000390E  C07C FF00 6372          and.w     #65280,D0
00003912  0C40 0A00 6373          cmp.w     #2560,D0
00003916  660E      6374          bne.s     DisassembleInstruction_32
                    6375   ; strcpyInstruction("EORI") ;
00003918  4879 0000 6376          pea       @m68kde~2_211.L
0000391C  745C      
0000391E  4E93      6377          jsr       (A3)
00003920  584F      6378          addq.w    #4,A7
00003922  6000 0030 6379          bra       DisassembleInstruction_36
                    6380   DisassembleInstruction_32:
                    6381   ; else if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0000))
00003926  2042      6382          move.l    D2,A0
00003928  3010      6383          move.w    (A0),D0
0000392A  C07C FF00 6384          and.w     #65280,D0
0000392E  660C      6385          bne.s     DisassembleInstruction_34
                    6386   ; strcpyInstruction("ORI") ;
00003930  4879 0000 6387          pea       @m68kde~2_212.L
00003934  7462      
00003936  4E93      6388          jsr       (A3)
00003938  584F      6389          addq.w    #4,A7
0000393A  6018      6390          bra.s     DisassembleInstruction_36
                    6391   DisassembleInstruction_34:
                    6392   ; else if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0400))
0000393C  2042      6393          move.l    D2,A0
0000393E  3010      6394          move.w    (A0),D0
00003940  C07C FF00 6395          and.w     #65280,D0
00003944  0C40 0400 6396          cmp.w     #1024,D0
00003948  660A      6397          bne.s     DisassembleInstruction_36
                    6398   ; strcpyInstruction("SUBI") ;
0000394A  4879 0000 6399          pea       @m68kde~2_213.L
0000394E  7466      
00003950  4E93      6400          jsr       (A3)
00003952  584F      6401          addq.w    #4,A7
                    6402   DisassembleInstruction_36:
                    6403   ; DataSize = Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
00003954  2042      6404          move.l    D2,A0
00003956  3210      6405          move.w    (A0),D1
00003958  C2BC 0000 6406          and.l     #65535,D1
0000395C  FFFF      
0000395E  2F01      6407          move.l    D1,-(A7)
00003960  4EB8 2E0E 6408          jsr       _Decode2BitOperandSize
00003964  584F      6409          addq.w    #4,A7
00003966  3E00      6410          move.w    D0,D7
                    6411   ; DecodeBWLDataAfterOpCode(OpCode);                                // go add the 8,16,32 bit data to instruction string
00003968  2F02      6412          move.l    D2,-(A7)
0000396A  4EB8 2F92 6413          jsr       _DecodeBWLDataAfterOpCode
0000396E  584F      6414          addq.w    #4,A7
                    6415   ; strcatInstruction(",") ;
00003970  4879 0000 6416          pea       @m68kde~2_184.L
00003974  73C4      
00003976  4EB8 0CCC 6417          jsr       _strcatInstruction
0000397A  584F      6418          addq.w    #4,A7
                    6419   ; Decode6BitEA(OpCode,0,DataSize,0) ;                                         // decode EA
0000397C  42A7      6420          clr.l     -(A7)
0000397E  CEBC 0000 6421          and.l     #65535,D7
00003982  FFFF      
00003984  2F07      6422          move.l    D7,-(A7)
00003986  42A7      6423          clr.l     -(A7)
00003988  2F02      6424          move.l    D2,-(A7)
0000398A  4EB8 30A2 6425          jsr       _Decode6BitEA
0000398E  DEFC 0010 6426          add.w     #16,A7
                    6427   DisassembleInstruction_12:
                    6428   ; }
                    6429   ; /////////////////////////////////////////////////////////////////////////////////
                    6430   ; // if instruction is ADDI #data,SR
                    6431   ; /////////////////////////////////////////////////////////////////////////////////
                    6432   ; if(*OpCode  == (unsigned short int)(0x027c))   {
00003992  2042      6433          move.l    D2,A0
00003994  3010      6434          move.w    (A0),D0
00003996  0C40 027C 6435          cmp.w     #636,D0
0000399A  6622      6436          bne.s     DisassembleInstruction_38
                    6437   ; InstructionSize = 2;
0000399C  24BC 0000 6438          move.l    #2,(A2)
000039A0  0002      
                    6439   ; sprintf(Instruction, "ANDI #$%X,SR", OpCode[1]);
000039A2  2042      6440          move.l    D2,A0
000039A4  3228 0002 6441          move.w    2(A0),D1
000039A8  48C1      6442          ext.l     D1
000039AA  2F01      6443          move.l    D1,-(A7)
000039AC  4879 0000 6444          pea       @m68kde~2_214.L
000039B0  746C      
000039B2  4879 0B00 6445          pea       _Instruction.L
000039B6  04E2      
000039B8  4E95      6446          jsr       (A5)
000039BA  DEFC 000C 6447          add.w     #12,A7
                    6448   DisassembleInstruction_38:
                    6449   ; }
                    6450   ; /////////////////////////////////////////////////////////////////////////////////
                    6451   ; // if instruction is ADDQ
                    6452   ; /////////////////////////////////////////////////////////////////////////////////
                    6453   ; if((*OpCode & (unsigned short int)(0xF100 )) == (unsigned short int)(0x5000))   {
000039BE  2042      6454          move.l    D2,A0
000039C0  3010      6455          move.w    (A0),D0
000039C2  C07C F100 6456          and.w     #61696,D0
000039C6  0C40 5000 6457          cmp.w     #20480,D0
000039CA  6600 005E 6458          bne       DisassembleInstruction_40
                    6459   ; InstructionSize = 1;
000039CE  24BC 0000 6460          move.l    #1,(A2)
000039D2  0001      
                    6461   ; strcpyInstruction("ADDQ") ;
000039D4  4879 0000 6462          pea       @m68kde~2_215.L
000039D8  747A      
000039DA  4E93      6463          jsr       (A3)
000039DC  584F      6464          addq.w    #4,A7
                    6465   ; Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
000039DE  2042      6466          move.l    D2,A0
000039E0  3210      6467          move.w    (A0),D1
000039E2  C2BC 0000 6468          and.l     #65535,D1
000039E6  FFFF      
000039E8  2F01      6469          move.l    D1,-(A7)
000039EA  4EB8 2E0E 6470          jsr       _Decode2BitOperandSize
000039EE  584F      6471          addq.w    #4,A7
                    6472   ; sprintf(TempString, "#%1X,", ((*OpCode >> 9) & (unsigned short int)(0x0007)));    // print 3 bit #data in positions 11,10,9 in opcode
000039F0  2042      6473          move.l    D2,A0
000039F2  3210      6474          move.w    (A0),D1
000039F4  E041      6475          asr.w     #8,D1
000039F6  E241      6476          asr.w     #1,D1
000039F8  C27C 0007 6477          and.w     #7,D1
000039FC  C2BC 0000 6478          and.l     #65535,D1
00003A00  FFFF      
00003A02  2F01      6479          move.l    D1,-(A7)
00003A04  4879 0000 6480          pea       @m68kde~2_216.L
00003A08  7480      
00003A0A  2F0C      6481          move.l    A4,-(A7)
00003A0C  4E95      6482          jsr       (A5)
00003A0E  DEFC 000C 6483          add.w     #12,A7
                    6484   ; strcatInstruction(TempString) ;
00003A12  2F0C      6485          move.l    A4,-(A7)
00003A14  4EB8 0CCC 6486          jsr       _strcatInstruction
00003A18  584F      6487          addq.w    #4,A7
                    6488   ; Decode6BitEA(OpCode,0,0,0) ;                                           // decode EA
00003A1A  42A7      6489          clr.l     -(A7)
00003A1C  42A7      6490          clr.l     -(A7)
00003A1E  42A7      6491          clr.l     -(A7)
00003A20  2F02      6492          move.l    D2,-(A7)
00003A22  4EB8 30A2 6493          jsr       _Decode6BitEA
00003A26  DEFC 0010 6494          add.w     #16,A7
                    6495   DisassembleInstruction_40:
                    6496   ; }
                    6497   ; /////////////////////////////////////////////////////////////////////////////////
                    6498   ; // if instruction is ADDX
                    6499   ; /////////////////////////////////////////////////////////////////////////////////
                    6500   ; if((*OpCode & (unsigned short int)(0xF130 )) == (unsigned short int)(0xD100))   {
00003A2A  2042      6501          move.l    D2,A0
00003A2C  3010      6502          move.w    (A0),D0
00003A2E  C07C F130 6503          and.w     #61744,D0
00003A32  0C40 D100 6504          cmp.w     #53504,D0
00003A36  6600 00A4 6505          bne       DisassembleInstruction_44
                    6506   ; InstructionSize = 1;
00003A3A  24BC 0000 6507          move.l    #1,(A2)
00003A3E  0001      
                    6508   ; OpMode = ((*OpCode >> 6) & (unsigned short int)(0x0003)) ;
00003A40  2042      6509          move.l    D2,A0
00003A42  3010      6510          move.w    (A0),D0
00003A44  EC40      6511          asr.w     #6,D0
00003A46  C07C 0003 6512          and.w     #3,D0
00003A4A  3600      6513          move.w    D0,D3
                    6514   ; if(OpMode != (unsigned short int)(0x0003)) // if size = 11 then it's ADDA not ADDX
00003A4C  0C43 0003 6515          cmp.w     #3,D3
00003A50  6700 008A 6516          beq       DisassembleInstruction_44
                    6517   ; {
                    6518   ; strcpyInstruction("ADDX") ;
00003A54  4879 0000 6519          pea       @m68kde~2_217.L
00003A58  7486      
00003A5A  4E93      6520          jsr       (A3)
00003A5C  584F      6521          addq.w    #4,A7
                    6522   ; Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
00003A5E  2042      6523          move.l    D2,A0
00003A60  3210      6524          move.w    (A0),D1
00003A62  C2BC 0000 6525          and.l     #65535,D1
00003A66  FFFF      
00003A68  2F01      6526          move.l    D1,-(A7)
00003A6A  4EB8 2E0E 6527          jsr       _Decode2BitOperandSize
00003A6E  584F      6528          addq.w    #4,A7
                    6529   ; if((*OpCode & (unsigned short int)(0x0008)) == (unsigned short int)(0))    // if bit 3 of opcode is 0 indicates data registers are used as source and destination
00003A70  2042      6530          move.l    D2,A0
00003A72  3010      6531          move.w    (A0),D0
00003A74  C07C 0008 6532          and.w     #8,D0
00003A78  6600 0030 6533          bne       DisassembleInstruction_46
                    6534   ; sprintf(TempString, "D%X,D%X", (*OpCode & 0x0007), ((*OpCode >> 9) & 0x0007)) ;
00003A7C  2042      6535          move.l    D2,A0
00003A7E  3210      6536          move.w    (A0),D1
00003A80  E041      6537          asr.w     #8,D1
00003A82  E241      6538          asr.w     #1,D1
00003A84  C27C 0007 6539          and.w     #7,D1
00003A88  48C1      6540          ext.l     D1
00003A8A  2F01      6541          move.l    D1,-(A7)
00003A8C  2042      6542          move.l    D2,A0
00003A8E  3210      6543          move.w    (A0),D1
00003A90  C27C 0007 6544          and.w     #7,D1
00003A94  48C1      6545          ext.l     D1
00003A96  2F01      6546          move.l    D1,-(A7)
00003A98  4879 0000 6547          pea       @m68kde~2_218.L
00003A9C  748C      
00003A9E  2F0C      6548          move.l    A4,-(A7)
00003AA0  4E95      6549          jsr       (A5)
00003AA2  DEFC 0010 6550          add.w     #16,A7
00003AA6  6000 002C 6551          bra       DisassembleInstruction_47
                    6552   DisassembleInstruction_46:
                    6553   ; else        // -(ax),-(ay) mode used
                    6554   ; sprintf(TempString, "-(A%X),-(A%X)", (*OpCode & 0x0007), ((*OpCode >> 9) & 0x0007)) ;
00003AAA  2042      6555          move.l    D2,A0
00003AAC  3210      6556          move.w    (A0),D1
00003AAE  E041      6557          asr.w     #8,D1
00003AB0  E241      6558          asr.w     #1,D1
00003AB2  C27C 0007 6559          and.w     #7,D1
00003AB6  48C1      6560          ext.l     D1
00003AB8  2F01      6561          move.l    D1,-(A7)
00003ABA  2042      6562          move.l    D2,A0
00003ABC  3210      6563          move.w    (A0),D1
00003ABE  C27C 0007 6564          and.w     #7,D1
00003AC2  48C1      6565          ext.l     D1
00003AC4  2F01      6566          move.l    D1,-(A7)
00003AC6  4879 0000 6567          pea       @m68kde~2_219.L
00003ACA  7494      
00003ACC  2F0C      6568          move.l    A4,-(A7)
00003ACE  4E95      6569          jsr       (A5)
00003AD0  DEFC 0010 6570          add.w     #16,A7
                    6571   DisassembleInstruction_47:
                    6572   ; strcatInstruction(TempString) ;
00003AD4  2F0C      6573          move.l    A4,-(A7)
00003AD6  4EB8 0CCC 6574          jsr       _strcatInstruction
00003ADA  584F      6575          addq.w    #4,A7
                    6576   DisassembleInstruction_44:
                    6577   ; }
                    6578   ; }
                    6579   ; /////////////////////////////////////////////////////////////////////////////////
                    6580   ; // if instruction is AND
                    6581   ; /////////////////////////////////////////////////////////////////////////////////
                    6582   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0xC000))   {
00003ADC  2042      6583          move.l    D2,A0
00003ADE  3010      6584          move.w    (A0),D0
00003AE0  C07C F000 6585          and.w     #61440,D0
00003AE4  0C40 C000 6586          cmp.w     #49152,D0
00003AE8  662A      6587          bne.s     DisassembleInstruction_50
                    6588   ; InstructionSize = 1;
00003AEA  24BC 0000 6589          move.l    #1,(A2)
00003AEE  0001      
                    6590   ; // need to differentiate between AND and ABCD using Mode bits in 5,4,3
                    6591   ; OpMode = (*OpCode >> 4) & (unsigned short int)(0x001F);
00003AF0  2042      6592          move.l    D2,A0
00003AF2  3010      6593          move.w    (A0),D0
00003AF4  E840      6594          asr.w     #4,D0
00003AF6  C07C 001F 6595          and.w     #31,D0
00003AFA  3600      6596          move.w    D0,D3
                    6597   ; if(OpMode != (unsigned short int)(0x0010))   {
00003AFC  0C43 0010 6598          cmp.w     #16,D3
00003B00  6712      6599          beq.s     DisassembleInstruction_50
                    6600   ; strcpyInstruction("AND") ;
00003B02  4879 0000 6601          pea       @m68kde~2_220.L
00003B06  74A2      
00003B08  4E93      6602          jsr       (A3)
00003B0A  584F      6603          addq.w    #4,A7
                    6604   ; Decode3BitOperandMode(OpCode) ;
00003B0C  2F02      6605          move.l    D2,-(A7)
00003B0E  4EB8 34CA 6606          jsr       _Decode3BitOperandMode
00003B12  584F      6607          addq.w    #4,A7
                    6608   DisassembleInstruction_50:
                    6609   ; }
                    6610   ; }
                    6611   ; /////////////////////////////////////////////////////////////////////////////////
                    6612   ; // if instruction is ANDI to CCR
                    6613   ; /////////////////////////////////////////////////////////////////////////////////
                    6614   ; if(*OpCode == (unsigned short int)(0x023C))   {
00003B14  2042      6615          move.l    D2,A0
00003B16  3010      6616          move.w    (A0),D0
00003B18  0C40 023C 6617          cmp.w     #572,D0
00003B1C  662A      6618          bne.s     DisassembleInstruction_52
                    6619   ; sprintf(Instruction, "ANDI #$%2X,CCR", OpCode[1] & (unsigned short int)(0x00FF)) ;
00003B1E  2042      6620          move.l    D2,A0
00003B20  3228 0002 6621          move.w    2(A0),D1
00003B24  C27C 00FF 6622          and.w     #255,D1
00003B28  C2BC 0000 6623          and.l     #65535,D1
00003B2C  FFFF      
00003B2E  2F01      6624          move.l    D1,-(A7)
00003B30  4879 0000 6625          pea       @m68kde~2_221.L
00003B34  74A6      
00003B36  4879 0B00 6626          pea       _Instruction.L
00003B3A  04E2      
00003B3C  4E95      6627          jsr       (A5)
00003B3E  DEFC 000C 6628          add.w     #12,A7
                    6629   ; InstructionSize = 2;
00003B42  24BC 0000 6630          move.l    #2,(A2)
00003B46  0002      
                    6631   DisassembleInstruction_52:
                    6632   ; }
                    6633   ; /////////////////////////////////////////////////////////////////////////////////
                    6634   ; // if instruction is ASL/ASR/LSL/LSR/ROL/ROR NOTE two versions of this with different OPCodes
                    6635   ; /////////////////////////////////////////////////////////////////////////////////
                    6636   ; if( ((*OpCode & (unsigned short int)(0xF018 )) == (unsigned short int)(0xE000)) |   // ASL/ASR
00003B48  2042      6637          move.l    D2,A0
00003B4A  3010      6638          move.w    (A0),D0
00003B4C  C07C F018 6639          and.w     #61464,D0
00003B50  0C40 E000 6640          cmp.w     #57344,D0
00003B54  6604      6641          bne.s     DisassembleInstruction_56
00003B56  7001      6642          moveq     #1,D0
00003B58  6002      6643          bra.s     DisassembleInstruction_57
                    6644   DisassembleInstruction_56:
00003B5A  4280      6645          clr.l     D0
                    6646   DisassembleInstruction_57:
00003B5C  2042      6647          move.l    D2,A0
00003B5E  3210      6648          move.w    (A0),D1
00003B60  C27C FEC0 6649          and.w     #65216,D1
00003B64  0C41 E0C0 6650          cmp.w     #57536,D1
00003B68  6604      6651          bne.s     DisassembleInstruction_58
00003B6A  7201      6652          moveq     #1,D1
00003B6C  6002      6653          bra.s     DisassembleInstruction_59
                    6654   DisassembleInstruction_58:
00003B6E  4281      6655          clr.l     D1
                    6656   DisassembleInstruction_59:
00003B70  8041      6657          or.w      D1,D0
00003B72  2042      6658          move.l    D2,A0
00003B74  3210      6659          move.w    (A0),D1
00003B76  C27C F018 6660          and.w     #61464,D1
00003B7A  0C41 E008 6661          cmp.w     #57352,D1
00003B7E  6604      6662          bne.s     DisassembleInstruction_60
00003B80  7201      6663          moveq     #1,D1
00003B82  6002      6664          bra.s     DisassembleInstruction_61
                    6665   DisassembleInstruction_60:
00003B84  4281      6666          clr.l     D1
                    6667   DisassembleInstruction_61:
00003B86  8041      6668          or.w      D1,D0
00003B88  2042      6669          move.l    D2,A0
00003B8A  3210      6670          move.w    (A0),D1
00003B8C  C27C FEC0 6671          and.w     #65216,D1
00003B90  0C41 E2C0 6672          cmp.w     #58048,D1
00003B94  6604      6673          bne.s     DisassembleInstruction_62
00003B96  7201      6674          moveq     #1,D1
00003B98  6002      6675          bra.s     DisassembleInstruction_63
                    6676   DisassembleInstruction_62:
00003B9A  4281      6677          clr.l     D1
                    6678   DisassembleInstruction_63:
00003B9C  8041      6679          or.w      D1,D0
00003B9E  2042      6680          move.l    D2,A0
00003BA0  3210      6681          move.w    (A0),D1
00003BA2  C27C F018 6682          and.w     #61464,D1
00003BA6  0C41 E018 6683          cmp.w     #57368,D1
00003BAA  6604      6684          bne.s     DisassembleInstruction_64
00003BAC  7201      6685          moveq     #1,D1
00003BAE  6002      6686          bra.s     DisassembleInstruction_65
                    6687   DisassembleInstruction_64:
00003BB0  4281      6688          clr.l     D1
                    6689   DisassembleInstruction_65:
00003BB2  8041      6690          or.w      D1,D0
00003BB4  2042      6691          move.l    D2,A0
00003BB6  3210      6692          move.w    (A0),D1
00003BB8  C27C FEC0 6693          and.w     #65216,D1
00003BBC  0C41 E6C0 6694          cmp.w     #59072,D1
00003BC0  6604      6695          bne.s     DisassembleInstruction_66
00003BC2  7201      6696          moveq     #1,D1
00003BC4  6002      6697          bra.s     DisassembleInstruction_67
                    6698   DisassembleInstruction_66:
00003BC6  4281      6699          clr.l     D1
                    6700   DisassembleInstruction_67:
00003BC8  8041      6701          or.w      D1,D0
00003BCA  2042      6702          move.l    D2,A0
00003BCC  3210      6703          move.w    (A0),D1
00003BCE  C27C F018 6704          and.w     #61464,D1
00003BD2  0C41 E010 6705          cmp.w     #57360,D1
00003BD6  6604      6706          bne.s     DisassembleInstruction_68
00003BD8  7201      6707          moveq     #1,D1
00003BDA  6002      6708          bra.s     DisassembleInstruction_69
                    6709   DisassembleInstruction_68:
00003BDC  4281      6710          clr.l     D1
                    6711   DisassembleInstruction_69:
00003BDE  8041      6712          or.w      D1,D0
00003BE0  2042      6713          move.l    D2,A0
00003BE2  3210      6714          move.w    (A0),D1
00003BE4  C27C FEC0 6715          and.w     #65216,D1
00003BE8  0C41 E4C0 6716          cmp.w     #58560,D1
00003BEC  6604      6717          bne.s     DisassembleInstruction_70
00003BEE  7201      6718          moveq     #1,D1
00003BF0  6002      6719          bra.s     DisassembleInstruction_71
                    6720   DisassembleInstruction_70:
00003BF2  4281      6721          clr.l     D1
                    6722   DisassembleInstruction_71:
00003BF4  8041      6723          or.w      D1,D0
00003BF6  6700 0252 6724          beq       DisassembleInstruction_73
                    6725   ; ((*OpCode & (unsigned short int)(0xFEC0 )) == (unsigned short int)(0xE0C0)) |
                    6726   ; ((*OpCode & (unsigned short int)(0xF018 )) == (unsigned short int)(0xE008)) |   // LSL/LSR
                    6727   ; ((*OpCode & (unsigned short int)(0xFEC0 )) == (unsigned short int)(0xE2C0)) |
                    6728   ; ((*OpCode & (unsigned short int)(0xF018 )) == (unsigned short int)(0xE018)) |   // ROR/ROL
                    6729   ; ((*OpCode & (unsigned short int)(0xFEC0 )) == (unsigned short int)(0xE6C0)) |
                    6730   ; ((*OpCode & (unsigned short int)(0xF018 )) == (unsigned short int)(0xE010)) |   // ROXR/ROXL
                    6731   ; ((*OpCode & (unsigned short int)(0xFEC0 )) == (unsigned short int)(0xE4C0)))
                    6732   ; {
                    6733   ; InstructionSize = 1;
00003BFA  24BC 0000 6734          move.l    #1,(A2)
00003BFE  0001      
                    6735   ; // 2nd version e.g. ASR/ASL/LSR/LSL/ROR/ROL/ROXL/ROXR <EA> shift a word 1 bit
                    6736   ; if((*OpCode & (unsigned short int)(0x00C0)) == (unsigned short int)(0x00C0)) // if bits 7,6 == 1,1
00003C00  2042      6737          move.l    D2,A0
00003C02  3010      6738          move.w    (A0),D0
00003C04  C07C 00C0 6739          and.w     #192,D0
00003C08  0C40 00C0 6740          cmp.w     #192,D0
00003C0C  6600 00EA 6741          bne       DisassembleInstruction_72
                    6742   ; {
                    6743   ; // test direction by testing bit 8
                    6744   ; if((*OpCode & (unsigned short int)(0xFEC0)) == (unsigned short int)(0xE0C0))    //asr/asl
00003C10  2042      6745          move.l    D2,A0
00003C12  3010      6746          move.w    (A0),D0
00003C14  C07C FEC0 6747          and.w     #65216,D0
00003C18  0C40 E0C0 6748          cmp.w     #57536,D0
00003C1C  6624      6749          bne.s     DisassembleInstruction_77
                    6750   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003C1E  2042      6751          move.l    D2,A0
00003C20  3010      6752          move.w    (A0),D0
00003C22  C07C 0100 6753          and.w     #256,D0
00003C26  0C40 0100 6754          cmp.w     #256,D0
00003C2A  660C      6755          bne.s     DisassembleInstruction_76
                    6756   ; strcpyInstruction("ASL") ;
00003C2C  4879 0000 6757          pea       @m68kde~2_222.L
00003C30  74B6      
00003C32  4E93      6758          jsr       (A3)
00003C34  584F      6759          addq.w    #4,A7
00003C36  600A      6760          bra.s     DisassembleInstruction_77
                    6761   DisassembleInstruction_76:
                    6762   ; else
                    6763   ; strcpyInstruction("ASR") ;
00003C38  4879 0000 6764          pea       @m68kde~2_223.L
00003C3C  74BA      
00003C3E  4E93      6765          jsr       (A3)
00003C40  584F      6766          addq.w    #4,A7
                    6767   DisassembleInstruction_77:
                    6768   ; // test direction by testing bit 8
                    6769   ; if((*OpCode & (unsigned short int)(0xFEC0)) == (unsigned short int)(0xE2C0))    //lsr/lsl
00003C42  2042      6770          move.l    D2,A0
00003C44  3010      6771          move.w    (A0),D0
00003C46  C07C FEC0 6772          and.w     #65216,D0
00003C4A  0C40 E2C0 6773          cmp.w     #58048,D0
00003C4E  6624      6774          bne.s     DisassembleInstruction_81
                    6775   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003C50  2042      6776          move.l    D2,A0
00003C52  3010      6777          move.w    (A0),D0
00003C54  C07C 0100 6778          and.w     #256,D0
00003C58  0C40 0100 6779          cmp.w     #256,D0
00003C5C  660C      6780          bne.s     DisassembleInstruction_80
                    6781   ; strcpyInstruction("LSL") ;
00003C5E  4879 0000 6782          pea       @m68kde~2_224.L
00003C62  74BE      
00003C64  4E93      6783          jsr       (A3)
00003C66  584F      6784          addq.w    #4,A7
00003C68  600A      6785          bra.s     DisassembleInstruction_81
                    6786   DisassembleInstruction_80:
                    6787   ; else
                    6788   ; strcpyInstruction("LSR") ;
00003C6A  4879 0000 6789          pea       @m68kde~2_225.L
00003C6E  74C2      
00003C70  4E93      6790          jsr       (A3)
00003C72  584F      6791          addq.w    #4,A7
                    6792   DisassembleInstruction_81:
                    6793   ; // test direction by testing bit 8
                    6794   ; if((*OpCode & (unsigned short int)(0xFEC0)) == (unsigned short int)(0xE6C0))    //ror/rol
00003C74  2042      6795          move.l    D2,A0
00003C76  3010      6796          move.w    (A0),D0
00003C78  C07C FEC0 6797          and.w     #65216,D0
00003C7C  0C40 E6C0 6798          cmp.w     #59072,D0
00003C80  6624      6799          bne.s     DisassembleInstruction_85
                    6800   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003C82  2042      6801          move.l    D2,A0
00003C84  3010      6802          move.w    (A0),D0
00003C86  C07C 0100 6803          and.w     #256,D0
00003C8A  0C40 0100 6804          cmp.w     #256,D0
00003C8E  660C      6805          bne.s     DisassembleInstruction_84
                    6806   ; strcpyInstruction("ROL") ;
00003C90  4879 0000 6807          pea       @m68kde~2_226.L
00003C94  74C6      
00003C96  4E93      6808          jsr       (A3)
00003C98  584F      6809          addq.w    #4,A7
00003C9A  600A      6810          bra.s     DisassembleInstruction_85
                    6811   DisassembleInstruction_84:
                    6812   ; else
                    6813   ; strcpyInstruction("ROR") ;
00003C9C  4879 0000 6814          pea       @m68kde~2_227.L
00003CA0  74CA      
00003CA2  4E93      6815          jsr       (A3)
00003CA4  584F      6816          addq.w    #4,A7
                    6817   DisassembleInstruction_85:
                    6818   ; // test direction by testing bit 8
                    6819   ; if((*OpCode & (unsigned short int)(0xFEC0)) == (unsigned short int)(0xE4C0))    //roxr/roxl
00003CA6  2042      6820          move.l    D2,A0
00003CA8  3010      6821          move.w    (A0),D0
00003CAA  C07C FEC0 6822          and.w     #65216,D0
00003CAE  0C40 E4C0 6823          cmp.w     #58560,D0
00003CB2  6624      6824          bne.s     DisassembleInstruction_89
                    6825   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003CB4  2042      6826          move.l    D2,A0
00003CB6  3010      6827          move.w    (A0),D0
00003CB8  C07C 0100 6828          and.w     #256,D0
00003CBC  0C40 0100 6829          cmp.w     #256,D0
00003CC0  660C      6830          bne.s     DisassembleInstruction_88
                    6831   ; strcpyInstruction("ROXL") ;
00003CC2  4879 0000 6832          pea       @m68kde~2_228.L
00003CC6  74CE      
00003CC8  4E93      6833          jsr       (A3)
00003CCA  584F      6834          addq.w    #4,A7
00003CCC  600A      6835          bra.s     DisassembleInstruction_89
                    6836   DisassembleInstruction_88:
                    6837   ; else
                    6838   ; strcpyInstruction("ROXR") ;
00003CCE  4879 0000 6839          pea       @m68kde~2_229.L
00003CD2  74D4      
00003CD4  4E93      6840          jsr       (A3)
00003CD6  584F      6841          addq.w    #4,A7
                    6842   DisassembleInstruction_89:
                    6843   ; strcatInstruction("  ") ;
00003CD8  4879 0000 6844          pea       @m68kde~2_15.L
00003CDC  6210      
00003CDE  4EB8 0CCC 6845          jsr       _strcatInstruction
00003CE2  584F      6846          addq.w    #4,A7
                    6847   ; Decode6BitEA(OpCode,0, 0,0) ;
00003CE4  42A7      6848          clr.l     -(A7)
00003CE6  42A7      6849          clr.l     -(A7)
00003CE8  42A7      6850          clr.l     -(A7)
00003CEA  2F02      6851          move.l    D2,-(A7)
00003CEC  4EB8 30A2 6852          jsr       _Decode6BitEA
00003CF0  DEFC 0010 6853          add.w     #16,A7
00003CF4  6000 0154 6854          bra       DisassembleInstruction_73
                    6855   DisassembleInstruction_72:
                    6856   ; }
                    6857   ; // first version of above instructions, bit 5 is 0
                    6858   ; else
                    6859   ; {
                    6860   ; // test instruction and direction by testing bits 4,3
                    6861   ; if((*OpCode & (unsigned short int)(0x0018)) == (unsigned short int)(0x0))    //asr/asl
00003CF8  2042      6862          move.l    D2,A0
00003CFA  3010      6863          move.w    (A0),D0
00003CFC  C07C 0018 6864          and.w     #24,D0
00003D00  6624      6865          bne.s     DisassembleInstruction_93
                    6866   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003D02  2042      6867          move.l    D2,A0
00003D04  3010      6868          move.w    (A0),D0
00003D06  C07C 0100 6869          and.w     #256,D0
00003D0A  0C40 0100 6870          cmp.w     #256,D0
00003D0E  660C      6871          bne.s     DisassembleInstruction_92
                    6872   ; strcpyInstruction("ASL") ;
00003D10  4879 0000 6873          pea       @m68kde~2_222.L
00003D14  74B6      
00003D16  4E93      6874          jsr       (A3)
00003D18  584F      6875          addq.w    #4,A7
00003D1A  600A      6876          bra.s     DisassembleInstruction_93
                    6877   DisassembleInstruction_92:
                    6878   ; else
                    6879   ; strcpyInstruction("ASR") ;
00003D1C  4879 0000 6880          pea       @m68kde~2_223.L
00003D20  74BA      
00003D22  4E93      6881          jsr       (A3)
00003D24  584F      6882          addq.w    #4,A7
                    6883   DisassembleInstruction_93:
                    6884   ; // test instruction and direction by testing bits 4,3
                    6885   ; if((*OpCode & (unsigned short int)(0x0018)) == (unsigned short int)(0x0008))    //lsr/lsl
00003D26  2042      6886          move.l    D2,A0
00003D28  3010      6887          move.w    (A0),D0
00003D2A  C07C 0018 6888          and.w     #24,D0
00003D2E  0C40 0008 6889          cmp.w     #8,D0
00003D32  6624      6890          bne.s     DisassembleInstruction_97
                    6891   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003D34  2042      6892          move.l    D2,A0
00003D36  3010      6893          move.w    (A0),D0
00003D38  C07C 0100 6894          and.w     #256,D0
00003D3C  0C40 0100 6895          cmp.w     #256,D0
00003D40  660C      6896          bne.s     DisassembleInstruction_96
                    6897   ; strcpyInstruction("LSL") ;
00003D42  4879 0000 6898          pea       @m68kde~2_224.L
00003D46  74BE      
00003D48  4E93      6899          jsr       (A3)
00003D4A  584F      6900          addq.w    #4,A7
00003D4C  600A      6901          bra.s     DisassembleInstruction_97
                    6902   DisassembleInstruction_96:
                    6903   ; else
                    6904   ; strcpyInstruction("LSR") ;
00003D4E  4879 0000 6905          pea       @m68kde~2_225.L
00003D52  74C2      
00003D54  4E93      6906          jsr       (A3)
00003D56  584F      6907          addq.w    #4,A7
                    6908   DisassembleInstruction_97:
                    6909   ; // test instruction and direction by testing bits 4,3
                    6910   ; if((*OpCode & (unsigned short int)(0x0018)) == (unsigned short int)(0x0018))    //ror/rol
00003D58  2042      6911          move.l    D2,A0
00003D5A  3010      6912          move.w    (A0),D0
00003D5C  C07C 0018 6913          and.w     #24,D0
00003D60  0C40 0018 6914          cmp.w     #24,D0
00003D64  6624      6915          bne.s     DisassembleInstruction_101
                    6916   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003D66  2042      6917          move.l    D2,A0
00003D68  3010      6918          move.w    (A0),D0
00003D6A  C07C 0100 6919          and.w     #256,D0
00003D6E  0C40 0100 6920          cmp.w     #256,D0
00003D72  660C      6921          bne.s     DisassembleInstruction_100
                    6922   ; strcpyInstruction("ROL") ;
00003D74  4879 0000 6923          pea       @m68kde~2_226.L
00003D78  74C6      
00003D7A  4E93      6924          jsr       (A3)
00003D7C  584F      6925          addq.w    #4,A7
00003D7E  600A      6926          bra.s     DisassembleInstruction_101
                    6927   DisassembleInstruction_100:
                    6928   ; else
                    6929   ; strcpyInstruction("ROR") ;
00003D80  4879 0000 6930          pea       @m68kde~2_227.L
00003D84  74CA      
00003D86  4E93      6931          jsr       (A3)
00003D88  584F      6932          addq.w    #4,A7
                    6933   DisassembleInstruction_101:
                    6934   ; // test instruction and direction by testing bits 4,3
                    6935   ; if((*OpCode & (unsigned short int)(0x0018)) == (unsigned short int)(0x0010))    //roxr/roxl
00003D8A  2042      6936          move.l    D2,A0
00003D8C  3010      6937          move.w    (A0),D0
00003D8E  C07C 0018 6938          and.w     #24,D0
00003D92  0C40 0010 6939          cmp.w     #16,D0
00003D96  6624      6940          bne.s     DisassembleInstruction_105
                    6941   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003D98  2042      6942          move.l    D2,A0
00003D9A  3010      6943          move.w    (A0),D0
00003D9C  C07C 0100 6944          and.w     #256,D0
00003DA0  0C40 0100 6945          cmp.w     #256,D0
00003DA4  660C      6946          bne.s     DisassembleInstruction_104
                    6947   ; strcpyInstruction("ROXL") ;
00003DA6  4879 0000 6948          pea       @m68kde~2_228.L
00003DAA  74CE      
00003DAC  4E93      6949          jsr       (A3)
00003DAE  584F      6950          addq.w    #4,A7
00003DB0  600A      6951          bra.s     DisassembleInstruction_105
                    6952   DisassembleInstruction_104:
                    6953   ; else
                    6954   ; strcpyInstruction("ROXR") ;
00003DB2  4879 0000 6955          pea       @m68kde~2_229.L
00003DB6  74D4      
00003DB8  4E93      6956          jsr       (A3)
00003DBA  584F      6957          addq.w    #4,A7
                    6958   DisassembleInstruction_105:
                    6959   ; Decode2BitOperandSize(*OpCode) ;
00003DBC  2042      6960          move.l    D2,A0
00003DBE  3210      6961          move.w    (A0),D1
00003DC0  C2BC 0000 6962          and.l     #65535,D1
00003DC4  FFFF      
00003DC6  2F01      6963          move.l    D1,-(A7)
00003DC8  4EB8 2E0E 6964          jsr       _Decode2BitOperandSize
00003DCC  584F      6965          addq.w    #4,A7
                    6966   ; if((*OpCode & (unsigned short int)(0x0020)) == (unsigned short int)(0)) {   // if shift count defined by #value (bit 5 = 0), e.g. asl #3,d0
00003DCE  2042      6967          move.l    D2,A0
00003DD0  3010      6968          move.w    (A0),D0
00003DD2  C07C 0020 6969          and.w     #32,D0
00003DD6  6600 0038 6970          bne       DisassembleInstruction_106
                    6971   ; sprintf(TempString,"#$%X,D%X",
00003DDA  2042      6972          move.l    D2,A0
00003DDC  3210      6973          move.w    (A0),D1
00003DDE  C27C 0007 6974          and.w     #7,D1
00003DE2  C2BC 0000 6975          and.l     #65535,D1
00003DE6  FFFF      
00003DE8  2F01      6976          move.l    D1,-(A7)
00003DEA  2042      6977          move.l    D2,A0
00003DEC  3210      6978          move.w    (A0),D1
00003DEE  E041      6979          asr.w     #8,D1
00003DF0  E241      6980          asr.w     #1,D1
00003DF2  C27C 0007 6981          and.w     #7,D1
00003DF6  C2BC 0000 6982          and.l     #65535,D1
00003DFA  FFFF      
00003DFC  2F01      6983          move.l    D1,-(A7)
00003DFE  4879 0000 6984          pea       @m68kde~2_230.L
00003E02  74DA      
00003E04  2F0C      6985          move.l    A4,-(A7)
00003E06  4E95      6986          jsr       (A5)
00003E08  DEFC 0010 6987          add.w     #16,A7
00003E0C  6000 0034 6988          bra       DisassembleInstruction_107
                    6989   DisassembleInstruction_106:
                    6990   ; ((*OpCode >> 9) & (unsigned short int)(0x0007)),
                    6991   ; (*OpCode & (unsigned short int)(0x0007))) ;
                    6992   ; }
                    6993   ; else {                                                                      // if shift is for example ASR D1,D2
                    6994   ; sprintf(TempString,"D%X,D%X",
00003E10  2042      6995          move.l    D2,A0
00003E12  3210      6996          move.w    (A0),D1
00003E14  C27C 0007 6997          and.w     #7,D1
00003E18  C2BC 0000 6998          and.l     #65535,D1
00003E1C  FFFF      
00003E1E  2F01      6999          move.l    D1,-(A7)
00003E20  2042      7000          move.l    D2,A0
00003E22  3210      7001          move.w    (A0),D1
00003E24  E041      7002          asr.w     #8,D1
00003E26  E241      7003          asr.w     #1,D1
00003E28  C27C 0007 7004          and.w     #7,D1
00003E2C  C2BC 0000 7005          and.l     #65535,D1
00003E30  FFFF      
00003E32  2F01      7006          move.l    D1,-(A7)
00003E34  4879 0000 7007          pea       @m68kde~2_218.L
00003E38  748C      
00003E3A  2F0C      7008          move.l    A4,-(A7)
00003E3C  4E95      7009          jsr       (A5)
00003E3E  DEFC 0010 7010          add.w     #16,A7
                    7011   DisassembleInstruction_107:
                    7012   ; ((*OpCode >> 9) & (unsigned short int)(0x0007)),
                    7013   ; (*OpCode & (unsigned short int)(0x0007))) ;
                    7014   ; }
                    7015   ; strcatInstruction(TempString) ;
00003E42  2F0C      7016          move.l    A4,-(A7)
00003E44  4EB8 0CCC 7017          jsr       _strcatInstruction
00003E48  584F      7018          addq.w    #4,A7
                    7019   DisassembleInstruction_73:
                    7020   ; }
                    7021   ; }
                    7022   ; /////////////////////////////////////////////////////////////////////////////////
                    7023   ; // if instruction is BCC and BSR and BRA
                    7024   ; /////////////////////////////////////////////////////////////////////////////////
                    7025   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0x6000))
00003E4A  2042      7026          move.l    D2,A0
00003E4C  3010      7027          move.w    (A0),D0
00003E4E  C07C F000 7028          and.w     #61440,D0
00003E52  0C40 6000 7029          cmp.w     #24576,D0
00003E56  6600 00A0 7030          bne       DisassembleInstruction_108
                    7031   ; {
                    7032   ; InstructionSize = 1;
00003E5A  24BC 0000 7033          move.l    #1,(A2)
00003E5E  0001      
                    7034   ; Condition = ((*OpCode >> 8) & (unsigned short int)(0xF)) ;
00003E60  2042      7035          move.l    D2,A0
00003E62  3010      7036          move.w    (A0),D0
00003E64  E040      7037          asr.w     #8,D0
00003E66  C07C 000F 7038          and.w     #15,D0
00003E6A  1D40 FFE9 7039          move.b    D0,-23(A6)
                    7040   ; strcpyInstruction("B") ;
00003E6E  4879 0000 7041          pea       @m68kde~2_231.L
00003E72  74E4      
00003E74  4E93      7042          jsr       (A3)
00003E76  584F      7043          addq.w    #4,A7
                    7044   ; DecodeBranchCondition(Condition) ;
00003E78  122E FFE9 7045          move.b    -23(A6),D1
00003E7C  C27C 00FF 7046          and.w     #255,D1
00003E80  C2BC 0000 7047          and.l     #65535,D1
00003E84  FFFF      
00003E86  2F01      7048          move.l    D1,-(A7)
00003E88  4EB8 3560 7049          jsr       _DecodeBranchCondition
00003E8C  584F      7050          addq.w    #4,A7
                    7051   ; Displacement8Bit = (*OpCode & (unsigned short int)(0xFF)) ;
00003E8E  2042      7052          move.l    D2,A0
00003E90  3010      7053          move.w    (A0),D0
00003E92  C07C 00FF 7054          and.w     #255,D0
00003E96  1D40 FFFB 7055          move.b    D0,-5(A6)
                    7056   ; if(Displacement8Bit == (unsigned short int)(0))  {           // if 16 bit displacement
00003E9A  102E FFFB 7057          move.b    -5(A6),D0
00003E9E  4880      7058          ext.w     D0
00003EA0  4A40      7059          tst.w     D0
00003EA2  662A      7060          bne.s     DisassembleInstruction_110
                    7061   ; sprintf(TempString, "$%X", (int)(OpCode) + (int)(OpCode[1]) +  2) ;
00003EA4  2202      7062          move.l    D2,D1
00003EA6  2042      7063          move.l    D2,A0
00003EA8  2F00      7064          move.l    D0,-(A7)
00003EAA  3028 0002 7065          move.w    2(A0),D0
00003EAE  48C0      7066          ext.l     D0
00003EB0  D280      7067          add.l     D0,D1
00003EB2  201F      7068          move.l    (A7)+,D0
00003EB4  5481      7069          addq.l    #2,D1
00003EB6  2F01      7070          move.l    D1,-(A7)
00003EB8  4879 0000 7071          pea       @m68kde~2_181.L
00003EBC  73B0      
00003EBE  2F0C      7072          move.l    A4,-(A7)
00003EC0  4E95      7073          jsr       (A5)
00003EC2  DEFC 000C 7074          add.w     #12,A7
                    7075   ; InstructionSize = 2 ;
00003EC6  24BC 0000 7076          move.l    #2,(A2)
00003ECA  0002      
00003ECC  6022      7077          bra.s     DisassembleInstruction_111
                    7078   DisassembleInstruction_110:
                    7079   ; }
                    7080   ; else
                    7081   ; sprintf(TempString, "$%X", (int)(OpCode) + Displacement8Bit + 2) ;           // 8 bit displacement
00003ECE  2202      7082          move.l    D2,D1
00003ED0  2F00      7083          move.l    D0,-(A7)
00003ED2  102E FFFB 7084          move.b    -5(A6),D0
00003ED6  4880      7085          ext.w     D0
00003ED8  48C0      7086          ext.l     D0
00003EDA  D280      7087          add.l     D0,D1
00003EDC  201F      7088          move.l    (A7)+,D0
00003EDE  5481      7089          addq.l    #2,D1
00003EE0  2F01      7090          move.l    D1,-(A7)
00003EE2  4879 0000 7091          pea       @m68kde~2_181.L
00003EE6  73B0      
00003EE8  2F0C      7092          move.l    A4,-(A7)
00003EEA  4E95      7093          jsr       (A5)
00003EEC  DEFC 000C 7094          add.w     #12,A7
                    7095   DisassembleInstruction_111:
                    7096   ; strcatInstruction(TempString) ;
00003EF0  2F0C      7097          move.l    A4,-(A7)
00003EF2  4EB8 0CCC 7098          jsr       _strcatInstruction
00003EF6  584F      7099          addq.w    #4,A7
                    7100   DisassembleInstruction_108:
                    7101   ; }
                    7102   ; /////////////////////////////////////////////////////////////////////////////////
                    7103   ; // if instruction is BCHG dn,<EA>
                    7104   ; /////////////////////////////////////////////////////////////////////////////////
                    7105   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x0140))   {
00003EF8  2042      7106          move.l    D2,A0
00003EFA  3010      7107          move.w    (A0),D0
00003EFC  C07C F1C0 7108          and.w     #61888,D0
00003F00  0C40 0140 7109          cmp.w     #320,D0
00003F04  6600 004C 7110          bne       DisassembleInstruction_112
                    7111   ; InstructionSize = 1;
00003F08  24BC 0000 7112          move.l    #1,(A2)
00003F0C  0001      
                    7113   ; strcpyInstruction("BCHG ") ;
00003F0E  4879 0000 7114          pea       @m68kde~2_232.L
00003F12  74E6      
00003F14  4E93      7115          jsr       (A3)
00003F16  584F      7116          addq.w    #4,A7
                    7117   ; sprintf(TempString, "D%d,", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
00003F18  2042      7118          move.l    D2,A0
00003F1A  3210      7119          move.w    (A0),D1
00003F1C  E041      7120          asr.w     #8,D1
00003F1E  E241      7121          asr.w     #1,D1
00003F20  C27C 0007 7122          and.w     #7,D1
00003F24  C2BC 0000 7123          and.l     #65535,D1
00003F28  FFFF      
00003F2A  2F01      7124          move.l    D1,-(A7)
00003F2C  4879 0000 7125          pea       @m68kde~2_233.L
00003F30  74EC      
00003F32  2F0C      7126          move.l    A4,-(A7)
00003F34  4E95      7127          jsr       (A5)
00003F36  DEFC 000C 7128          add.w     #12,A7
                    7129   ; strcatInstruction(TempString) ;
00003F3A  2F0C      7130          move.l    A4,-(A7)
00003F3C  4EB8 0CCC 7131          jsr       _strcatInstruction
00003F40  584F      7132          addq.w    #4,A7
                    7133   ; Decode6BitEA(OpCode,0,0,0) ;
00003F42  42A7      7134          clr.l     -(A7)
00003F44  42A7      7135          clr.l     -(A7)
00003F46  42A7      7136          clr.l     -(A7)
00003F48  2F02      7137          move.l    D2,-(A7)
00003F4A  4EB8 30A2 7138          jsr       _Decode6BitEA
00003F4E  DEFC 0010 7139          add.w     #16,A7
                    7140   DisassembleInstruction_112:
                    7141   ; }
                    7142   ; /////////////////////////////////////////////////////////////////////////////////
                    7143   ; // if instruction is BCHG #data,<EA>
                    7144   ; /////////////////////////////////////////////////////////////////////////////////
                    7145   ; if((*OpCode & (unsigned short int)(0xFFC0 )) == (unsigned short int)(0x0840))   {
00003F52  2042      7146          move.l    D2,A0
00003F54  3010      7147          move.w    (A0),D0
00003F56  C07C FFC0 7148          and.w     #65472,D0
00003F5A  0C40 0840 7149          cmp.w     #2112,D0
00003F5E  6600 0044 7150          bne       DisassembleInstruction_114
                    7151   ; strcpyInstruction("BCHG ") ;
00003F62  4879 0000 7152          pea       @m68kde~2_232.L
00003F66  74E6      
00003F68  4E93      7153          jsr       (A3)
00003F6A  584F      7154          addq.w    #4,A7
                    7155   ; sprintf(TempString, "#$%X,", OpCode[1]) ;
00003F6C  2042      7156          move.l    D2,A0
00003F6E  3228 0002 7157          move.w    2(A0),D1
00003F72  48C1      7158          ext.l     D1
00003F74  2F01      7159          move.l    D1,-(A7)
00003F76  4879 0000 7160          pea       @m68kde~2_234.L
00003F7A  74F2      
00003F7C  2F0C      7161          move.l    A4,-(A7)
00003F7E  4E95      7162          jsr       (A5)
00003F80  DEFC 000C 7163          add.w     #12,A7
                    7164   ; InstructionSize = 2 ;
00003F84  24BC 0000 7165          move.l    #2,(A2)
00003F88  0002      
                    7166   ; strcatInstruction(TempString) ;
00003F8A  2F0C      7167          move.l    A4,-(A7)
00003F8C  4EB8 0CCC 7168          jsr       _strcatInstruction
00003F90  584F      7169          addq.w    #4,A7
                    7170   ; Decode6BitEA(OpCode,0,1,0) ;
00003F92  42A7      7171          clr.l     -(A7)
00003F94  4878 0001 7172          pea       1
00003F98  42A7      7173          clr.l     -(A7)
00003F9A  2F02      7174          move.l    D2,-(A7)
00003F9C  4EB8 30A2 7175          jsr       _Decode6BitEA
00003FA0  DEFC 0010 7176          add.w     #16,A7
                    7177   DisassembleInstruction_114:
                    7178   ; }
                    7179   ; /////////////////////////////////////////////////////////////////////////////////
                    7180   ; // if instruction is BCLR  dn,<EA>
                    7181   ; /////////////////////////////////////////////////////////////////////////////////
                    7182   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x0180))   {
00003FA4  2042      7183          move.l    D2,A0
00003FA6  3010      7184          move.w    (A0),D0
00003FA8  C07C F1C0 7185          and.w     #61888,D0
00003FAC  0C40 0180 7186          cmp.w     #384,D0
00003FB0  6600 004C 7187          bne       DisassembleInstruction_116
                    7188   ; InstructionSize = 1;
00003FB4  24BC 0000 7189          move.l    #1,(A2)
00003FB8  0001      
                    7190   ; strcpyInstruction("BCLR ") ;
00003FBA  4879 0000 7191          pea       @m68kde~2_235.L
00003FBE  74F8      
00003FC0  4E93      7192          jsr       (A3)
00003FC2  584F      7193          addq.w    #4,A7
                    7194   ; sprintf(TempString, "D%d,", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
00003FC4  2042      7195          move.l    D2,A0
00003FC6  3210      7196          move.w    (A0),D1
00003FC8  E041      7197          asr.w     #8,D1
00003FCA  E241      7198          asr.w     #1,D1
00003FCC  C27C 0007 7199          and.w     #7,D1
00003FD0  C2BC 0000 7200          and.l     #65535,D1
00003FD4  FFFF      
00003FD6  2F01      7201          move.l    D1,-(A7)
00003FD8  4879 0000 7202          pea       @m68kde~2_233.L
00003FDC  74EC      
00003FDE  2F0C      7203          move.l    A4,-(A7)
00003FE0  4E95      7204          jsr       (A5)
00003FE2  DEFC 000C 7205          add.w     #12,A7
                    7206   ; strcatInstruction(TempString) ;
00003FE6  2F0C      7207          move.l    A4,-(A7)
00003FE8  4EB8 0CCC 7208          jsr       _strcatInstruction
00003FEC  584F      7209          addq.w    #4,A7
                    7210   ; Decode6BitEA(OpCode,0,0,0) ;
00003FEE  42A7      7211          clr.l     -(A7)
00003FF0  42A7      7212          clr.l     -(A7)
00003FF2  42A7      7213          clr.l     -(A7)
00003FF4  2F02      7214          move.l    D2,-(A7)
00003FF6  4EB8 30A2 7215          jsr       _Decode6BitEA
00003FFA  DEFC 0010 7216          add.w     #16,A7
                    7217   DisassembleInstruction_116:
                    7218   ; }
                    7219   ; /////////////////////////////////////////////////////////////////////////////////
                    7220   ; // if instruction is BCLR #data,<EA>
                    7221   ; /////////////////////////////////////////////////////////////////////////////////
                    7222   ; if((*OpCode & (unsigned short int)(0xFFC0 )) == (unsigned short int)(0x0880))   {
00003FFE  2042      7223          move.l    D2,A0
00004000  3010      7224          move.w    (A0),D0
00004002  C07C FFC0 7225          and.w     #65472,D0
00004006  0C40 0880 7226          cmp.w     #2176,D0
0000400A  6600 0044 7227          bne       DisassembleInstruction_118
                    7228   ; strcpyInstruction("BCLR ") ;
0000400E  4879 0000 7229          pea       @m68kde~2_235.L
00004012  74F8      
00004014  4E93      7230          jsr       (A3)
00004016  584F      7231          addq.w    #4,A7
                    7232   ; sprintf(TempString, "#$%X,", OpCode[1]) ;
00004018  2042      7233          move.l    D2,A0
0000401A  3228 0002 7234          move.w    2(A0),D1
0000401E  48C1      7235          ext.l     D1
00004020  2F01      7236          move.l    D1,-(A7)
00004022  4879 0000 7237          pea       @m68kde~2_234.L
00004026  74F2      
00004028  2F0C      7238          move.l    A4,-(A7)
0000402A  4E95      7239          jsr       (A5)
0000402C  DEFC 000C 7240          add.w     #12,A7
                    7241   ; InstructionSize = 2 ;
00004030  24BC 0000 7242          move.l    #2,(A2)
00004034  0002      
                    7243   ; strcatInstruction(TempString) ;
00004036  2F0C      7244          move.l    A4,-(A7)
00004038  4EB8 0CCC 7245          jsr       _strcatInstruction
0000403C  584F      7246          addq.w    #4,A7
                    7247   ; Decode6BitEA(OpCode,0,1,0) ;
0000403E  42A7      7248          clr.l     -(A7)
00004040  4878 0001 7249          pea       1
00004044  42A7      7250          clr.l     -(A7)
00004046  2F02      7251          move.l    D2,-(A7)
00004048  4EB8 30A2 7252          jsr       _Decode6BitEA
0000404C  DEFC 0010 7253          add.w     #16,A7
                    7254   DisassembleInstruction_118:
                    7255   ; }
                    7256   ; /////////////////////////////////////////////////////////////////////////////////
                    7257   ; // if instruction is BSET dn,<EA>
                    7258   ; /////////////////////////////////////////////////////////////////////////////////
                    7259   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x01C0))   {
00004050  2042      7260          move.l    D2,A0
00004052  3010      7261          move.w    (A0),D0
00004054  C07C F1C0 7262          and.w     #61888,D0
00004058  0C40 01C0 7263          cmp.w     #448,D0
0000405C  6600 004C 7264          bne       DisassembleInstruction_120
                    7265   ; InstructionSize = 1;
00004060  24BC 0000 7266          move.l    #1,(A2)
00004064  0001      
                    7267   ; strcpyInstruction("BSET ") ;
00004066  4879 0000 7268          pea       @m68kde~2_236.L
0000406A  74FE      
0000406C  4E93      7269          jsr       (A3)
0000406E  584F      7270          addq.w    #4,A7
                    7271   ; sprintf(TempString, "D%d,", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
00004070  2042      7272          move.l    D2,A0
00004072  3210      7273          move.w    (A0),D1
00004074  E041      7274          asr.w     #8,D1
00004076  E241      7275          asr.w     #1,D1
00004078  C27C 0007 7276          and.w     #7,D1
0000407C  C2BC 0000 7277          and.l     #65535,D1
00004080  FFFF      
00004082  2F01      7278          move.l    D1,-(A7)
00004084  4879 0000 7279          pea       @m68kde~2_233.L
00004088  74EC      
0000408A  2F0C      7280          move.l    A4,-(A7)
0000408C  4E95      7281          jsr       (A5)
0000408E  DEFC 000C 7282          add.w     #12,A7
                    7283   ; strcatInstruction(TempString) ;
00004092  2F0C      7284          move.l    A4,-(A7)
00004094  4EB8 0CCC 7285          jsr       _strcatInstruction
00004098  584F      7286          addq.w    #4,A7
                    7287   ; Decode6BitEA(OpCode,0,0,0) ;
0000409A  42A7      7288          clr.l     -(A7)
0000409C  42A7      7289          clr.l     -(A7)
0000409E  42A7      7290          clr.l     -(A7)
000040A0  2F02      7291          move.l    D2,-(A7)
000040A2  4EB8 30A2 7292          jsr       _Decode6BitEA
000040A6  DEFC 0010 7293          add.w     #16,A7
                    7294   DisassembleInstruction_120:
                    7295   ; }
                    7296   ; /////////////////////////////////////////////////////////////////////////////////
                    7297   ; // if instruction is BSET #data,<EA>
                    7298   ; /////////////////////////////////////////////////////////////////////////////////
                    7299   ; if((*OpCode & (unsigned short int)(0xFFC0 )) == (unsigned short int)(0x08C0))   {
000040AA  2042      7300          move.l    D2,A0
000040AC  3010      7301          move.w    (A0),D0
000040AE  C07C FFC0 7302          and.w     #65472,D0
000040B2  0C40 08C0 7303          cmp.w     #2240,D0
000040B6  6600 0044 7304          bne       DisassembleInstruction_122
                    7305   ; strcpyInstruction("BSET ") ;
000040BA  4879 0000 7306          pea       @m68kde~2_236.L
000040BE  74FE      
000040C0  4E93      7307          jsr       (A3)
000040C2  584F      7308          addq.w    #4,A7
                    7309   ; sprintf(TempString, "#$%X,", OpCode[1]) ;
000040C4  2042      7310          move.l    D2,A0
000040C6  3228 0002 7311          move.w    2(A0),D1
000040CA  48C1      7312          ext.l     D1
000040CC  2F01      7313          move.l    D1,-(A7)
000040CE  4879 0000 7314          pea       @m68kde~2_234.L
000040D2  74F2      
000040D4  2F0C      7315          move.l    A4,-(A7)
000040D6  4E95      7316          jsr       (A5)
000040D8  DEFC 000C 7317          add.w     #12,A7
                    7318   ; InstructionSize = 2 ;
000040DC  24BC 0000 7319          move.l    #2,(A2)
000040E0  0002      
                    7320   ; strcatInstruction(TempString) ;
000040E2  2F0C      7321          move.l    A4,-(A7)
000040E4  4EB8 0CCC 7322          jsr       _strcatInstruction
000040E8  584F      7323          addq.w    #4,A7
                    7324   ; Decode6BitEA(OpCode,0,1,0) ;
000040EA  42A7      7325          clr.l     -(A7)
000040EC  4878 0001 7326          pea       1
000040F0  42A7      7327          clr.l     -(A7)
000040F2  2F02      7328          move.l    D2,-(A7)
000040F4  4EB8 30A2 7329          jsr       _Decode6BitEA
000040F8  DEFC 0010 7330          add.w     #16,A7
                    7331   DisassembleInstruction_122:
                    7332   ; }
                    7333   ; /////////////////////////////////////////////////////////////////////////////////
                    7334   ; // if instruction is BTST dn,<EA>
                    7335   ; /////////////////////////////////////////////////////////////////////////////////
                    7336   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x0100))   {
000040FC  2042      7337          move.l    D2,A0
000040FE  3010      7338          move.w    (A0),D0
00004100  C07C F1C0 7339          and.w     #61888,D0
00004104  0C40 0100 7340          cmp.w     #256,D0
00004108  6600 004C 7341          bne       DisassembleInstruction_124
                    7342   ; InstructionSize = 1;
0000410C  24BC 0000 7343          move.l    #1,(A2)
00004110  0001      
                    7344   ; strcpyInstruction("BTST ") ;
00004112  4879 0000 7345          pea       @m68kde~2_237.L
00004116  7504      
00004118  4E93      7346          jsr       (A3)
0000411A  584F      7347          addq.w    #4,A7
                    7348   ; sprintf(TempString, "D%d,", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
0000411C  2042      7349          move.l    D2,A0
0000411E  3210      7350          move.w    (A0),D1
00004120  E041      7351          asr.w     #8,D1
00004122  E241      7352          asr.w     #1,D1
00004124  C27C 0007 7353          and.w     #7,D1
00004128  C2BC 0000 7354          and.l     #65535,D1
0000412C  FFFF      
0000412E  2F01      7355          move.l    D1,-(A7)
00004130  4879 0000 7356          pea       @m68kde~2_233.L
00004134  74EC      
00004136  2F0C      7357          move.l    A4,-(A7)
00004138  4E95      7358          jsr       (A5)
0000413A  DEFC 000C 7359          add.w     #12,A7
                    7360   ; strcatInstruction(TempString) ;
0000413E  2F0C      7361          move.l    A4,-(A7)
00004140  4EB8 0CCC 7362          jsr       _strcatInstruction
00004144  584F      7363          addq.w    #4,A7
                    7364   ; Decode6BitEA(OpCode,0,0,0) ;
00004146  42A7      7365          clr.l     -(A7)
00004148  42A7      7366          clr.l     -(A7)
0000414A  42A7      7367          clr.l     -(A7)
0000414C  2F02      7368          move.l    D2,-(A7)
0000414E  4EB8 30A2 7369          jsr       _Decode6BitEA
00004152  DEFC 0010 7370          add.w     #16,A7
                    7371   DisassembleInstruction_124:
                    7372   ; }
                    7373   ; /////////////////////////////////////////////////////////////////////////////////
                    7374   ; // if instruction is BTST #data,<EA>
                    7375   ; /////////////////////////////////////////////////////////////////////////////////
                    7376   ; if((*OpCode & (unsigned short int)(0xFFC0 )) == (unsigned short int)(0x0800))   {
00004156  2042      7377          move.l    D2,A0
00004158  3010      7378          move.w    (A0),D0
0000415A  C07C FFC0 7379          and.w     #65472,D0
0000415E  0C40 0800 7380          cmp.w     #2048,D0
00004162  6600 0044 7381          bne       DisassembleInstruction_126
                    7382   ; strcpyInstruction("BTST ") ;
00004166  4879 0000 7383          pea       @m68kde~2_237.L
0000416A  7504      
0000416C  4E93      7384          jsr       (A3)
0000416E  584F      7385          addq.w    #4,A7
                    7386   ; sprintf(TempString, "#$%X,", OpCode[1]) ;
00004170  2042      7387          move.l    D2,A0
00004172  3228 0002 7388          move.w    2(A0),D1
00004176  48C1      7389          ext.l     D1
00004178  2F01      7390          move.l    D1,-(A7)
0000417A  4879 0000 7391          pea       @m68kde~2_234.L
0000417E  74F2      
00004180  2F0C      7392          move.l    A4,-(A7)
00004182  4E95      7393          jsr       (A5)
00004184  DEFC 000C 7394          add.w     #12,A7
                    7395   ; InstructionSize = 2 ;
00004188  24BC 0000 7396          move.l    #2,(A2)
0000418C  0002      
                    7397   ; strcatInstruction(TempString) ;
0000418E  2F0C      7398          move.l    A4,-(A7)
00004190  4EB8 0CCC 7399          jsr       _strcatInstruction
00004194  584F      7400          addq.w    #4,A7
                    7401   ; Decode6BitEA(OpCode,0,1,0) ;
00004196  42A7      7402          clr.l     -(A7)
00004198  4878 0001 7403          pea       1
0000419C  42A7      7404          clr.l     -(A7)
0000419E  2F02      7405          move.l    D2,-(A7)
000041A0  4EB8 30A2 7406          jsr       _Decode6BitEA
000041A4  DEFC 0010 7407          add.w     #16,A7
                    7408   DisassembleInstruction_126:
                    7409   ; }
                    7410   ; /////////////////////////////////////////////////////////////////////////////////
                    7411   ; // if instruction is CHK.W <EA>,DN
                    7412   ; /////////////////////////////////////////////////////////////////////////////////
                    7413   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x4180))   {
000041A8  2042      7414          move.l    D2,A0
000041AA  3010      7415          move.w    (A0),D0
000041AC  C07C F1C0 7416          and.w     #61888,D0
000041B0  0C40 4180 7417          cmp.w     #16768,D0
000041B4  6600 004C 7418          bne       DisassembleInstruction_128
                    7419   ; InstructionSize = 1;
000041B8  24BC 0000 7420          move.l    #1,(A2)
000041BC  0001      
                    7421   ; strcpyInstruction("CHK ") ;
000041BE  4879 0000 7422          pea       @m68kde~2_238.L
000041C2  750A      
000041C4  4E93      7423          jsr       (A3)
000041C6  584F      7424          addq.w    #4,A7
                    7425   ; Decode6BitEA(OpCode,0,0,0) ;
000041C8  42A7      7426          clr.l     -(A7)
000041CA  42A7      7427          clr.l     -(A7)
000041CC  42A7      7428          clr.l     -(A7)
000041CE  2F02      7429          move.l    D2,-(A7)
000041D0  4EB8 30A2 7430          jsr       _Decode6BitEA
000041D4  DEFC 0010 7431          add.w     #16,A7
                    7432   ; sprintf(TempString, ",D%d", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
000041D8  2042      7433          move.l    D2,A0
000041DA  3210      7434          move.w    (A0),D1
000041DC  E041      7435          asr.w     #8,D1
000041DE  E241      7436          asr.w     #1,D1
000041E0  C27C 0007 7437          and.w     #7,D1
000041E4  C2BC 0000 7438          and.l     #65535,D1
000041E8  FFFF      
000041EA  2F01      7439          move.l    D1,-(A7)
000041EC  4879 0000 7440          pea       @m68kde~2_239.L
000041F0  7510      
000041F2  2F0C      7441          move.l    A4,-(A7)
000041F4  4E95      7442          jsr       (A5)
000041F6  DEFC 000C 7443          add.w     #12,A7
                    7444   ; strcatInstruction(TempString) ;
000041FA  2F0C      7445          move.l    A4,-(A7)
000041FC  4EB8 0CCC 7446          jsr       _strcatInstruction
00004200  584F      7447          addq.w    #4,A7
                    7448   DisassembleInstruction_128:
                    7449   ; }
                    7450   ; /////////////////////////////////////////////////////////////////////////////////
                    7451   ; // if instruction is CLR <EA>
                    7452   ; /////////////////////////////////////////////////////////////////////////////////
                    7453   ; if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x4200))   {
00004202  2042      7454          move.l    D2,A0
00004204  3010      7455          move.w    (A0),D0
00004206  C07C FF00 7456          and.w     #65280,D0
0000420A  0C40 4200 7457          cmp.w     #16896,D0
0000420E  6600 0034 7458          bne       DisassembleInstruction_130
                    7459   ; InstructionSize = 1;
00004212  24BC 0000 7460          move.l    #1,(A2)
00004216  0001      
                    7461   ; strcpyInstruction("CLR") ;
00004218  4879 0000 7462          pea       @m68kde~2_240.L
0000421C  7516      
0000421E  4E93      7463          jsr       (A3)
00004220  584F      7464          addq.w    #4,A7
                    7465   ; Decode2BitOperandSize(*OpCode) ;
00004222  2042      7466          move.l    D2,A0
00004224  3210      7467          move.w    (A0),D1
00004226  C2BC 0000 7468          and.l     #65535,D1
0000422A  FFFF      
0000422C  2F01      7469          move.l    D1,-(A7)
0000422E  4EB8 2E0E 7470          jsr       _Decode2BitOperandSize
00004232  584F      7471          addq.w    #4,A7
                    7472   ; Decode6BitEA(OpCode,0,0,0) ;
00004234  42A7      7473          clr.l     -(A7)
00004236  42A7      7474          clr.l     -(A7)
00004238  42A7      7475          clr.l     -(A7)
0000423A  2F02      7476          move.l    D2,-(A7)
0000423C  4EB8 30A2 7477          jsr       _Decode6BitEA
00004240  DEFC 0010 7478          add.w     #16,A7
                    7479   DisassembleInstruction_130:
                    7480   ; }
                    7481   ; /////////////////////////////////////////////////////////////////////////////////
                    7482   ; // if instruction is CMP, CMPA
                    7483   ; /////////////////////////////////////////////////////////////////////////////////
                    7484   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0xB000))
00004244  2042      7485          move.l    D2,A0
00004246  3010      7486          move.w    (A0),D0
00004248  C07C F000 7487          and.w     #61440,D0
0000424C  0C40 B000 7488          cmp.w     #45056,D0
00004250  6600 008C 7489          bne       DisassembleInstruction_135
                    7490   ; {
                    7491   ; InstructionSize = 1;
00004254  24BC 0000 7492          move.l    #1,(A2)
00004258  0001      
                    7493   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0007) ;
0000425A  2042      7494          move.l    D2,A0
0000425C  3010      7495          move.w    (A0),D0
0000425E  EC40      7496          asr.w     #6,D0
00004260  C07C 0007 7497          and.w     #7,D0
00004264  3600      7498          move.w    D0,D3
                    7499   ; if((OpMode == (unsigned short int)(0x0003)) || (OpMode == (unsigned short int)(0x0007)))    {
00004266  0C43 0003 7500          cmp.w     #3,D3
0000426A  6708      7501          beq.s     DisassembleInstruction_136
0000426C  0C43 0007 7502          cmp.w     #7,D3
00004270  6600 005A 7503          bne       DisassembleInstruction_134
                    7504   DisassembleInstruction_136:
                    7505   ; if(OpMode == (unsigned short int)(0x0003))
00004274  0C43 0003 7506          cmp.w     #3,D3
00004278  660C      7507          bne.s     DisassembleInstruction_137
                    7508   ; strcpyInstruction("CMPA.W ") ;
0000427A  4879 0000 7509          pea       @m68kde~2_241.L
0000427E  751A      
00004280  4E93      7510          jsr       (A3)
00004282  584F      7511          addq.w    #4,A7
00004284  600A      7512          bra.s     DisassembleInstruction_138
                    7513   DisassembleInstruction_137:
                    7514   ; else
                    7515   ; strcpyInstruction("CMPA.L ") ;
00004286  4879 0000 7516          pea       @m68kde~2_242.L
0000428A  7522      
0000428C  4E93      7517          jsr       (A3)
0000428E  584F      7518          addq.w    #4,A7
                    7519   DisassembleInstruction_138:
                    7520   ; Decode6BitEA(OpCode,0,0,0) ;
00004290  42A7      7521          clr.l     -(A7)
00004292  42A7      7522          clr.l     -(A7)
00004294  42A7      7523          clr.l     -(A7)
00004296  2F02      7524          move.l    D2,-(A7)
00004298  4EB8 30A2 7525          jsr       _Decode6BitEA
0000429C  DEFC 0010 7526          add.w     #16,A7
                    7527   ; sprintf(TempString, ",A%d", ((*OpCode >> 9) & (unsigned short int)(0x0007))) ;
000042A0  2042      7528          move.l    D2,A0
000042A2  3210      7529          move.w    (A0),D1
000042A4  E041      7530          asr.w     #8,D1
000042A6  E241      7531          asr.w     #1,D1
000042A8  C27C 0007 7532          and.w     #7,D1
000042AC  C2BC 0000 7533          and.l     #65535,D1
000042B0  FFFF      
000042B2  2F01      7534          move.l    D1,-(A7)
000042B4  4879 0000 7535          pea       @m68kde~2_243.L
000042B8  752A      
000042BA  2F0C      7536          move.l    A4,-(A7)
000042BC  4E95      7537          jsr       (A5)
000042BE  DEFC 000C 7538          add.w     #12,A7
                    7539   ; strcatInstruction(TempString) ;
000042C2  2F0C      7540          move.l    A4,-(A7)
000042C4  4EB8 0CCC 7541          jsr       _strcatInstruction
000042C8  584F      7542          addq.w    #4,A7
000042CA  6012      7543          bra.s     DisassembleInstruction_135
                    7544   DisassembleInstruction_134:
                    7545   ; }
                    7546   ; else {
                    7547   ; strcpyInstruction("CMP") ;
000042CC  4879 0000 7548          pea       @m68kde~2_244.L
000042D0  7530      
000042D2  4E93      7549          jsr       (A3)
000042D4  584F      7550          addq.w    #4,A7
                    7551   ; Decode3BitOperandMode(OpCode) ;
000042D6  2F02      7552          move.l    D2,-(A7)
000042D8  4EB8 34CA 7553          jsr       _Decode3BitOperandMode
000042DC  584F      7554          addq.w    #4,A7
                    7555   DisassembleInstruction_135:
                    7556   ; }
                    7557   ; }
                    7558   ; /////////////////////////////////////////////////////////////////////////////////
                    7559   ; // if instruction is CMPM
                    7560   ; /////////////////////////////////////////////////////////////////////////////////
                    7561   ; if((*OpCode & (unsigned short int)(0xF138 )) == (unsigned short int)(0xB108))
000042DE  2042      7562          move.l    D2,A0
000042E0  3010      7563          move.w    (A0),D0
000042E2  C07C F138 7564          and.w     #61752,D0
000042E6  0C40 B108 7565          cmp.w     #45320,D0
000042EA  6600 007A 7566          bne       DisassembleInstruction_141
                    7567   ; {
                    7568   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0003) ;
000042EE  2042      7569          move.l    D2,A0
000042F0  3010      7570          move.w    (A0),D0
000042F2  EC40      7571          asr.w     #6,D0
000042F4  C07C 0003 7572          and.w     #3,D0
000042F8  3600      7573          move.w    D0,D3
                    7574   ; if((OpMode >= (unsigned short int)(0x0000)) && (OpMode <= (unsigned short int)(0x0002)))
000042FA  0C43 0000 7575          cmp.w     #0,D3
000042FE  6500 0066 7576          blo       DisassembleInstruction_141
00004302  0C43 0002 7577          cmp.w     #2,D3
00004306  6200 005E 7578          bhi       DisassembleInstruction_141
                    7579   ; {
                    7580   ; InstructionSize = 1;
0000430A  24BC 0000 7581          move.l    #1,(A2)
0000430E  0001      
                    7582   ; strcpyInstruction("CMPM") ;
00004310  4879 0000 7583          pea       @m68kde~2_245.L
00004314  7534      
00004316  4E93      7584          jsr       (A3)
00004318  584F      7585          addq.w    #4,A7
                    7586   ; Decode2BitOperandSize(*OpCode) ;
0000431A  2042      7587          move.l    D2,A0
0000431C  3210      7588          move.w    (A0),D1
0000431E  C2BC 0000 7589          and.l     #65535,D1
00004322  FFFF      
00004324  2F01      7590          move.l    D1,-(A7)
00004326  4EB8 2E0E 7591          jsr       _Decode2BitOperandSize
0000432A  584F      7592          addq.w    #4,A7
                    7593   ; sprintf(TempString, "(A%d)+,(A%d)+", (*OpCode & (unsigned short int)(0x7)) , ((*OpCode >> 9) & (unsigned short int)(0x7)));
0000432C  2042      7594          move.l    D2,A0
0000432E  3210      7595          move.w    (A0),D1
00004330  E041      7596          asr.w     #8,D1
00004332  E241      7597          asr.w     #1,D1
00004334  C27C 0007 7598          and.w     #7,D1
00004338  C2BC 0000 7599          and.l     #65535,D1
0000433C  FFFF      
0000433E  2F01      7600          move.l    D1,-(A7)
00004340  2042      7601          move.l    D2,A0
00004342  3210      7602          move.w    (A0),D1
00004344  C27C 0007 7603          and.w     #7,D1
00004348  C2BC 0000 7604          and.l     #65535,D1
0000434C  FFFF      
0000434E  2F01      7605          move.l    D1,-(A7)
00004350  4879 0000 7606          pea       @m68kde~2_246.L
00004354  753A      
00004356  2F0C      7607          move.l    A4,-(A7)
00004358  4E95      7608          jsr       (A5)
0000435A  DEFC 0010 7609          add.w     #16,A7
                    7610   ; strcatInstruction(TempString) ;
0000435E  2F0C      7611          move.l    A4,-(A7)
00004360  4EB8 0CCC 7612          jsr       _strcatInstruction
00004364  584F      7613          addq.w    #4,A7
                    7614   DisassembleInstruction_141:
                    7615   ; }
                    7616   ; }
                    7617   ; /////////////////////////////////////////////////////////////////////////////////
                    7618   ; // if instruction is DBCC
                    7619   ; /////////////////////////////////////////////////////////////////////////////////
                    7620   ; if((*OpCode & (unsigned short int)(0xF0F8 )) == (unsigned short int)(0x50C8))
00004366  2042      7621          move.l    D2,A0
00004368  3010      7622          move.w    (A0),D0
0000436A  C07C F0F8 7623          and.w     #61688,D0
0000436E  0C40 50C8 7624          cmp.w     #20680,D0
00004372  6600 0084 7625          bne       DisassembleInstruction_143
                    7626   ; {
                    7627   ; InstructionSize = 2;
00004376  24BC 0000 7628          move.l    #2,(A2)
0000437A  0002      
                    7629   ; strcpy(Instruction,"DB") ;
0000437C  4879 0000 7630          pea       @m68kde~2_247.L
00004380  7548      
00004382  4879 0B00 7631          pea       _Instruction.L
00004386  04E2      
00004388  4EB9 0000 7632          jsr       _strcpy
0000438C  5558      
0000438E  504F      7633          addq.w    #8,A7
                    7634   ; Condition = ((*OpCode >> 8) & (unsigned short int)(0x000F)) ;
00004390  2042      7635          move.l    D2,A0
00004392  3010      7636          move.w    (A0),D0
00004394  E040      7637          asr.w     #8,D0
00004396  C07C 000F 7638          and.w     #15,D0
0000439A  1D40 FFE9 7639          move.b    D0,-23(A6)
                    7640   ; DecodeBranchCondition(Condition) ;
0000439E  122E FFE9 7641          move.b    -23(A6),D1
000043A2  C27C 00FF 7642          and.w     #255,D1
000043A6  C2BC 0000 7643          and.l     #65535,D1
000043AA  FFFF      
000043AC  2F01      7644          move.l    D1,-(A7)
000043AE  4EB8 3560 7645          jsr       _DecodeBranchCondition
000043B2  584F      7646          addq.w    #4,A7
                    7647   ; sprintf(TempString, "D%d,%+d(PC) to Addr:$%X",(*OpCode & (unsigned short int)(0x7)), (int)(OpCode[1]), (int)(OpCode) + (int)(OpCode[1]) +  2) ;
000043B4  2202      7648          move.l    D2,D1
000043B6  2042      7649          move.l    D2,A0
000043B8  2F00      7650          move.l    D0,-(A7)
000043BA  3028 0002 7651          move.w    2(A0),D0
000043BE  48C0      7652          ext.l     D0
000043C0  D280      7653          add.l     D0,D1
000043C2  201F      7654          move.l    (A7)+,D0
000043C4  5481      7655          addq.l    #2,D1
000043C6  2F01      7656          move.l    D1,-(A7)
000043C8  2042      7657          move.l    D2,A0
000043CA  3228 0002 7658          move.w    2(A0),D1
000043CE  48C1      7659          ext.l     D1
000043D0  2F01      7660          move.l    D1,-(A7)
000043D2  2042      7661          move.l    D2,A0
000043D4  3210      7662          move.w    (A0),D1
000043D6  C27C 0007 7663          and.w     #7,D1
000043DA  C2BC 0000 7664          and.l     #65535,D1
000043DE  FFFF      
000043E0  2F01      7665          move.l    D1,-(A7)
000043E2  4879 0000 7666          pea       @m68kde~2_248.L
000043E6  754C      
000043E8  2F0C      7667          move.l    A4,-(A7)
000043EA  4E95      7668          jsr       (A5)
000043EC  DEFC 0014 7669          add.w     #20,A7
                    7670   ; strcatInstruction(TempString) ;
000043F0  2F0C      7671          move.l    A4,-(A7)
000043F2  4EB8 0CCC 7672          jsr       _strcatInstruction
000043F6  584F      7673          addq.w    #4,A7
                    7674   DisassembleInstruction_143:
                    7675   ; }
                    7676   ; /////////////////////////////////////////////////////////////////////////////////
                    7677   ; // if instruction is DIVS
                    7678   ; /////////////////////////////////////////////////////////////////////////////////
                    7679   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x81C0))
000043F8  2042      7680          move.l    D2,A0
000043FA  3010      7681          move.w    (A0),D0
000043FC  C07C F1C0 7682          and.w     #61888,D0
00004400  0C40 81C0 7683          cmp.w     #33216,D0
00004404  6600 004A 7684          bne       DisassembleInstruction_145
                    7685   ; {
                    7686   ; InstructionSize = 1;
00004408  24BC 0000 7687          move.l    #1,(A2)
0000440C  0001      
                    7688   ; strcpy(Instruction,"DIVS ") ;
0000440E  4879 0000 7689          pea       @m68kde~2_249.L
00004412  7564      
00004414  4879 0B00 7690          pea       _Instruction.L
00004418  04E2      
0000441A  4EB9 0000 7691          jsr       _strcpy
0000441E  5558      
00004420  504F      7692          addq.w    #8,A7
                    7693   ; Decode6BitEA(OpCode,0,0,0) ;
00004422  42A7      7694          clr.l     -(A7)
00004424  42A7      7695          clr.l     -(A7)
00004426  42A7      7696          clr.l     -(A7)
00004428  2F02      7697          move.l    D2,-(A7)
0000442A  4EB8 30A2 7698          jsr       _Decode6BitEA
0000442E  DEFC 0010 7699          add.w     #16,A7
                    7700   ; strcatInstruction(",") ;
00004432  4879 0000 7701          pea       @m68kde~2_184.L
00004436  73C4      
00004438  4EB8 0CCC 7702          jsr       _strcatInstruction
0000443C  584F      7703          addq.w    #4,A7
                    7704   ; Decode3BitDataRegister(*OpCode) ;
0000443E  2042      7705          move.l    D2,A0
00004440  3210      7706          move.w    (A0),D1
00004442  C2BC 0000 7707          and.l     #65535,D1
00004446  FFFF      
00004448  2F01      7708          move.l    D1,-(A7)
0000444A  4EB8 2E6A 7709          jsr       _Decode3BitDataRegister
0000444E  584F      7710          addq.w    #4,A7
                    7711   DisassembleInstruction_145:
                    7712   ; }
                    7713   ; /////////////////////////////////////////////////////////////////////////////////
                    7714   ; // if instruction is DIVU
                    7715   ; /////////////////////////////////////////////////////////////////////////////////
                    7716   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x80C0))
00004450  2042      7717          move.l    D2,A0
00004452  3010      7718          move.w    (A0),D0
00004454  C07C F1C0 7719          and.w     #61888,D0
00004458  0C40 80C0 7720          cmp.w     #32960,D0
0000445C  6600 004A 7721          bne       DisassembleInstruction_147
                    7722   ; {
                    7723   ; InstructionSize = 1;
00004460  24BC 0000 7724          move.l    #1,(A2)
00004464  0001      
                    7725   ; strcpy(Instruction,"DIVU ") ;
00004466  4879 0000 7726          pea       @m68kde~2_250.L
0000446A  756A      
0000446C  4879 0B00 7727          pea       _Instruction.L
00004470  04E2      
00004472  4EB9 0000 7728          jsr       _strcpy
00004476  5558      
00004478  504F      7729          addq.w    #8,A7
                    7730   ; Decode6BitEA(OpCode,0,0,0) ;
0000447A  42A7      7731          clr.l     -(A7)
0000447C  42A7      7732          clr.l     -(A7)
0000447E  42A7      7733          clr.l     -(A7)
00004480  2F02      7734          move.l    D2,-(A7)
00004482  4EB8 30A2 7735          jsr       _Decode6BitEA
00004486  DEFC 0010 7736          add.w     #16,A7
                    7737   ; strcatInstruction(",") ;
0000448A  4879 0000 7738          pea       @m68kde~2_184.L
0000448E  73C4      
00004490  4EB8 0CCC 7739          jsr       _strcatInstruction
00004494  584F      7740          addq.w    #4,A7
                    7741   ; Decode3BitDataRegister(*OpCode) ;
00004496  2042      7742          move.l    D2,A0
00004498  3210      7743          move.w    (A0),D1
0000449A  C2BC 0000 7744          and.l     #65535,D1
0000449E  FFFF      
000044A0  2F01      7745          move.l    D1,-(A7)
000044A2  4EB8 2E6A 7746          jsr       _Decode3BitDataRegister
000044A6  584F      7747          addq.w    #4,A7
                    7748   DisassembleInstruction_147:
                    7749   ; }
                    7750   ; /////////////////////////////////////////////////////////////////////////////////
                    7751   ; // if instruction is EOR
                    7752   ; /////////////////////////////////////////////////////////////////////////////////
                    7753   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0xB000))   {
000044A8  2042      7754          move.l    D2,A0
000044AA  3010      7755          move.w    (A0),D0
000044AC  C07C F000 7756          and.w     #61440,D0
000044B0  0C40 B000 7757          cmp.w     #45056,D0
000044B4  6600 004A 7758          bne       DisassembleInstruction_151
                    7759   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0007) ;
000044B8  2042      7760          move.l    D2,A0
000044BA  3010      7761          move.w    (A0),D0
000044BC  EC40      7762          asr.w     #6,D0
000044BE  C07C 0007 7763          and.w     #7,D0
000044C2  3600      7764          move.w    D0,D3
                    7765   ; EAMode = (*OpCode >> 3) & (unsigned short int)(0x0007) ;    // mode cannot be 1 for EOR as it it used by CMPM instruction as a differentiator
000044C4  2042      7766          move.l    D2,A0
000044C6  3010      7767          move.w    (A0),D0
000044C8  E640      7768          asr.w     #3,D0
000044CA  C07C 0007 7769          and.w     #7,D0
000044CE  3D40 FFEC 7770          move.w    D0,-20(A6)
                    7771   ; if( (OpMode >= (unsigned short int)(0x0004)) &&
000044D2  0C43 0004 7772          cmp.w     #4,D3
000044D6  6528      7773          blo.s     DisassembleInstruction_151
000044D8  0C43 0006 7774          cmp.w     #6,D3
000044DC  6222      7775          bhi.s     DisassembleInstruction_151
000044DE  302E FFEC 7776          move.w    -20(A6),D0
000044E2  0C40 0001 7777          cmp.w     #1,D0
000044E6  6718      7778          beq.s     DisassembleInstruction_151
                    7779   ; (OpMode <= (unsigned short int)(0x0006)) &&
                    7780   ; (EAMode != (unsigned short int)(0x0001)))
                    7781   ; {
                    7782   ; InstructionSize = 1;
000044E8  24BC 0000 7783          move.l    #1,(A2)
000044EC  0001      
                    7784   ; strcpyInstruction("EOR") ;
000044EE  4879 0000 7785          pea       @m68kde~2_251.L
000044F2  7570      
000044F4  4E93      7786          jsr       (A3)
000044F6  584F      7787          addq.w    #4,A7
                    7788   ; Decode3BitOperandMode(OpCode);
000044F8  2F02      7789          move.l    D2,-(A7)
000044FA  4EB8 34CA 7790          jsr       _Decode3BitOperandMode
000044FE  584F      7791          addq.w    #4,A7
                    7792   DisassembleInstruction_151:
                    7793   ; }
                    7794   ; }
                    7795   ; /////////////////////////////////////////////////////////////////////////////////
                    7796   ; // if instruction is EOR to CCR
                    7797   ; /////////////////////////////////////////////////////////////////////////////////
                    7798   ; if(*OpCode == (unsigned short int)(0x0A3C))   {
00004500  2042      7799          move.l    D2,A0
00004502  3010      7800          move.w    (A0),D0
00004504  0C40 0A3C 7801          cmp.w     #2620,D0
00004508  662C      7802          bne.s     DisassembleInstruction_153
                    7803   ; InstructionSize = 1;
0000450A  24BC 0000 7804          move.l    #1,(A2)
0000450E  0001      
                    7805   ; sprintf(Instruction, "EORI #$%2X,CCR", OpCode[1] & (unsigned short int)(0x00FF)) ;
00004510  2042      7806          move.l    D2,A0
00004512  3228 0002 7807          move.w    2(A0),D1
00004516  C27C 00FF 7808          and.w     #255,D1
0000451A  C2BC 0000 7809          and.l     #65535,D1
0000451E  FFFF      
00004520  2F01      7810          move.l    D1,-(A7)
00004522  4879 0000 7811          pea       @m68kde~2_252.L
00004526  7574      
00004528  4879 0B00 7812          pea       _Instruction.L
0000452C  04E2      
0000452E  4E95      7813          jsr       (A5)
00004530  DEFC 000C 7814          add.w     #12,A7
                    7815   ; InstructionSize += 1;
00004534  5292      7816          addq.l    #1,(A2)
                    7817   DisassembleInstruction_153:
                    7818   ; }
                    7819   ; /////////////////////////////////////////////////////////////////////////////////
                    7820   ; // if instruction is EORI #data,SR
                    7821   ; /////////////////////////////////////////////////////////////////////////////////
                    7822   ; if(*OpCode  == (unsigned short int)(0x0A7C))   {
00004536  2042      7823          move.l    D2,A0
00004538  3010      7824          move.w    (A0),D0
0000453A  0C40 0A7C 7825          cmp.w     #2684,D0
0000453E  6622      7826          bne.s     DisassembleInstruction_155
                    7827   ; InstructionSize = 2;
00004540  24BC 0000 7828          move.l    #2,(A2)
00004544  0002      
                    7829   ; sprintf(Instruction, "EORI #$%X,SR", OpCode[1]);
00004546  2042      7830          move.l    D2,A0
00004548  3228 0002 7831          move.w    2(A0),D1
0000454C  48C1      7832          ext.l     D1
0000454E  2F01      7833          move.l    D1,-(A7)
00004550  4879 0000 7834          pea       @m68kde~2_253.L
00004554  7584      
00004556  4879 0B00 7835          pea       _Instruction.L
0000455A  04E2      
0000455C  4E95      7836          jsr       (A5)
0000455E  DEFC 000C 7837          add.w     #12,A7
                    7838   DisassembleInstruction_155:
                    7839   ; }
                    7840   ; /////////////////////////////////////////////////////////////////////////////////
                    7841   ; // if instruction is EXG
                    7842   ; /////////////////////////////////////////////////////////////////////////////////
                    7843   ; if((*OpCode & (unsigned short int)(0xF100 )) == (unsigned short int)(0xC100))   {
00004562  2042      7844          move.l    D2,A0
00004564  3010      7845          move.w    (A0),D0
00004566  C07C F100 7846          and.w     #61696,D0
0000456A  0C40 C100 7847          cmp.w     #49408,D0
0000456E  6600 00E0 7848          bne       DisassembleInstruction_163
                    7849   ; Rx = ((*OpCode >> 9) & (unsigned short int)(0x7)) ;
00004572  2042      7850          move.l    D2,A0
00004574  3010      7851          move.w    (A0),D0
00004576  E040      7852          asr.w     #8,D0
00004578  E240      7853          asr.w     #1,D0
0000457A  C07C 0007 7854          and.w     #7,D0
0000457E  3D40 FFF0 7855          move.w    D0,-16(A6)
                    7856   ; Ry = (*OpCode & (unsigned short int)(0x7)) ;
00004582  2042      7857          move.l    D2,A0
00004584  3010      7858          move.w    (A0),D0
00004586  C07C 0007 7859          and.w     #7,D0
0000458A  3D40 FFF2 7860          move.w    D0,-14(A6)
                    7861   ; EXGOpMode = ((*OpCode >> 3) & (unsigned short int)(0x1F)) ;
0000458E  2042      7862          move.l    D2,A0
00004590  3010      7863          move.w    (A0),D0
00004592  E640      7864          asr.w     #3,D0
00004594  C07C 001F 7865          and.w     #31,D0
00004598  3D40 FFF4 7866          move.w    D0,-12(A6)
                    7867   ; if(EXGOpMode == (unsigned short int)(0x0008))   {
0000459C  302E FFF4 7868          move.w    -12(A6),D0
000045A0  0C40 0008 7869          cmp.w     #8,D0
000045A4  6634      7870          bne.s     DisassembleInstruction_159
                    7871   ; InstructionSize = 1;
000045A6  24BC 0000 7872          move.l    #1,(A2)
000045AA  0001      
                    7873   ; sprintf(Instruction, "EXG D%d,D%d", Rx, Ry) ;
000045AC  322E FFF2 7874          move.w    -14(A6),D1
000045B0  C2BC 0000 7875          and.l     #65535,D1
000045B4  FFFF      
000045B6  2F01      7876          move.l    D1,-(A7)
000045B8  322E FFF0 7877          move.w    -16(A6),D1
000045BC  C2BC 0000 7878          and.l     #65535,D1
000045C0  FFFF      
000045C2  2F01      7879          move.l    D1,-(A7)
000045C4  4879 0000 7880          pea       @m68kde~2_254.L
000045C8  7592      
000045CA  4879 0B00 7881          pea       _Instruction.L
000045CE  04E2      
000045D0  4E95      7882          jsr       (A5)
000045D2  DEFC 0010 7883          add.w     #16,A7
000045D6  6000 0078 7884          bra       DisassembleInstruction_163
                    7885   DisassembleInstruction_159:
                    7886   ; }
                    7887   ; else if(EXGOpMode == (unsigned short int)(0x0009))  {
000045DA  302E FFF4 7888          move.w    -12(A6),D0
000045DE  0C40 0009 7889          cmp.w     #9,D0
000045E2  6632      7890          bne.s     DisassembleInstruction_161
                    7891   ; InstructionSize = 1;
000045E4  24BC 0000 7892          move.l    #1,(A2)
000045E8  0001      
                    7893   ; sprintf(Instruction, "EXG A%d,A%d", Rx, Ry) ;
000045EA  322E FFF2 7894          move.w    -14(A6),D1
000045EE  C2BC 0000 7895          and.l     #65535,D1
000045F2  FFFF      
000045F4  2F01      7896          move.l    D1,-(A7)
000045F6  322E FFF0 7897          move.w    -16(A6),D1
000045FA  C2BC 0000 7898          and.l     #65535,D1
000045FE  FFFF      
00004600  2F01      7899          move.l    D1,-(A7)
00004602  4879 0000 7900          pea       @m68kde~2_255.L
00004606  759E      
00004608  4879 0B00 7901          pea       _Instruction.L
0000460C  04E2      
0000460E  4E95      7902          jsr       (A5)
00004610  DEFC 0010 7903          add.w     #16,A7
00004614  603A      7904          bra.s     DisassembleInstruction_163
                    7905   DisassembleInstruction_161:
                    7906   ; }
                    7907   ; else if(EXGOpMode == (unsigned short int)(0x0011))  {
00004616  302E FFF4 7908          move.w    -12(A6),D0
0000461A  0C40 0011 7909          cmp.w     #17,D0
0000461E  6630      7910          bne.s     DisassembleInstruction_163
                    7911   ; InstructionSize = 1;
00004620  24BC 0000 7912          move.l    #1,(A2)
00004624  0001      
                    7913   ; sprintf(Instruction, "EXG D%d,A%d", Rx, Ry) ;
00004626  322E FFF2 7914          move.w    -14(A6),D1
0000462A  C2BC 0000 7915          and.l     #65535,D1
0000462E  FFFF      
00004630  2F01      7916          move.l    D1,-(A7)
00004632  322E FFF0 7917          move.w    -16(A6),D1
00004636  C2BC 0000 7918          and.l     #65535,D1
0000463A  FFFF      
0000463C  2F01      7919          move.l    D1,-(A7)
0000463E  4879 0000 7920          pea       @m68kde~2_256.L
00004642  75AA      
00004644  4879 0B00 7921          pea       _Instruction.L
00004648  04E2      
0000464A  4E95      7922          jsr       (A5)
0000464C  DEFC 0010 7923          add.w     #16,A7
                    7924   DisassembleInstruction_163:
                    7925   ; }
                    7926   ; }
                    7927   ; /////////////////////////////////////////////////////////////////////////////////
                    7928   ; // if instruction is EXT
                    7929   ; /////////////////////////////////////////////////////////////////////////////////
                    7930   ; if((*OpCode & (unsigned short int)(0xFE38)) == (unsigned short int)(0x4800))
00004650  2042      7931          move.l    D2,A0
00004652  3010      7932          move.w    (A0),D0
00004654  C07C FE38 7933          and.w     #65080,D0
00004658  0C40 4800 7934          cmp.w     #18432,D0
0000465C  6600 0054 7935          bne       DisassembleInstruction_165
                    7936   ; {
                    7937   ; InstructionSize = 1;
00004660  24BC 0000 7938          move.l    #1,(A2)
00004664  0001      
                    7939   ; strcpy(Instruction,"EXT") ;
00004666  4879 0000 7940          pea       @m68kde~2_257.L
0000466A  75B6      
0000466C  4879 0B00 7941          pea       _Instruction.L
00004670  04E2      
00004672  4EB9 0000 7942          jsr       _strcpy
00004676  5558      
00004678  504F      7943          addq.w    #8,A7
                    7944   ; if((*OpCode & (unsigned short int)(0x00C0)) == (unsigned short int)(0x00C0))
0000467A  2042      7945          move.l    D2,A0
0000467C  3010      7946          move.w    (A0),D0
0000467E  C07C 00C0 7947          and.w     #192,D0
00004682  0C40 00C0 7948          cmp.w     #192,D0
00004686  660E      7949          bne.s     DisassembleInstruction_167
                    7950   ; strcatInstruction(".L ") ;
00004688  4879 0000 7951          pea       @m68kde~2_168.L
0000468C  737A      
0000468E  4EB8 0CCC 7952          jsr       _strcatInstruction
00004692  584F      7953          addq.w    #4,A7
00004694  600C      7954          bra.s     DisassembleInstruction_168
                    7955   DisassembleInstruction_167:
                    7956   ; else
                    7957   ; strcatInstruction(".W ") ;
00004696  4879 0000 7958          pea       @m68kde~2_167.L
0000469A  7376      
0000469C  4EB8 0CCC 7959          jsr       _strcatInstruction
000046A0  584F      7960          addq.w    #4,A7
                    7961   DisassembleInstruction_168:
                    7962   ; Decode6BitEA(OpCode,0,0,0) ;
000046A2  42A7      7963          clr.l     -(A7)
000046A4  42A7      7964          clr.l     -(A7)
000046A6  42A7      7965          clr.l     -(A7)
000046A8  2F02      7966          move.l    D2,-(A7)
000046AA  4EB8 30A2 7967          jsr       _Decode6BitEA
000046AE  DEFC 0010 7968          add.w     #16,A7
                    7969   DisassembleInstruction_165:
                    7970   ; }
                    7971   ; /////////////////////////////////////////////////////////////////////////////////
                    7972   ; // if instruction is ILLEGAL $4afc
                    7973   ; /////////////////////////////////////////////////////////////////////////////////
                    7974   ; if(*OpCode == (unsigned short int)(0x4AFC)) {
000046B2  2042      7975          move.l    D2,A0
000046B4  3010      7976          move.w    (A0),D0
000046B6  0C40 4AFC 7977          cmp.w     #19196,D0
000046BA  661A      7978          bne.s     DisassembleInstruction_169
                    7979   ; InstructionSize = 1;
000046BC  24BC 0000 7980          move.l    #1,(A2)
000046C0  0001      
                    7981   ; strcpy(Instruction,"ILLEGAL ($4AFC)") ;
000046C2  4879 0000 7982          pea       @m68kde~2_258.L
000046C6  75BA      
000046C8  4879 0B00 7983          pea       _Instruction.L
000046CC  04E2      
000046CE  4EB9 0000 7984          jsr       _strcpy
000046D2  5558      
000046D4  504F      7985          addq.w    #8,A7
                    7986   DisassembleInstruction_169:
                    7987   ; }
                    7988   ; /////////////////////////////////////////////////////////////////////////////////
                    7989   ; // if instruction is JMP
                    7990   ; /////////////////////////////////////////////////////////////////////////////////
                    7991   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x4EC0))
000046D6  2042      7992          move.l    D2,A0
000046D8  3010      7993          move.w    (A0),D0
000046DA  C07C FFC0 7994          and.w     #65472,D0
000046DE  0C40 4EC0 7995          cmp.w     #20160,D0
000046E2  662A      7996          bne.s     DisassembleInstruction_171
                    7997   ; {
                    7998   ; InstructionSize = 1;
000046E4  24BC 0000 7999          move.l    #1,(A2)
000046E8  0001      
                    8000   ; strcpy(Instruction,"JMP ") ;
000046EA  4879 0000 8001          pea       @m68kde~2_259.L
000046EE  75CA      
000046F0  4879 0B00 8002          pea       _Instruction.L
000046F4  04E2      
000046F6  4EB9 0000 8003          jsr       _strcpy
000046FA  5558      
000046FC  504F      8004          addq.w    #8,A7
                    8005   ; Decode6BitEA(OpCode,0,0,0) ;
000046FE  42A7      8006          clr.l     -(A7)
00004700  42A7      8007          clr.l     -(A7)
00004702  42A7      8008          clr.l     -(A7)
00004704  2F02      8009          move.l    D2,-(A7)
00004706  4EB8 30A2 8010          jsr       _Decode6BitEA
0000470A  DEFC 0010 8011          add.w     #16,A7
                    8012   DisassembleInstruction_171:
                    8013   ; }
                    8014   ; /////////////////////////////////////////////////////////////////////////////////
                    8015   ; // if instruction is JSR
                    8016   ; /////////////////////////////////////////////////////////////////////////////////
                    8017   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x4E80))
0000470E  2042      8018          move.l    D2,A0
00004710  3010      8019          move.w    (A0),D0
00004712  C07C FFC0 8020          and.w     #65472,D0
00004716  0C40 4E80 8021          cmp.w     #20096,D0
0000471A  662A      8022          bne.s     DisassembleInstruction_173
                    8023   ; {
                    8024   ; InstructionSize = 1;
0000471C  24BC 0000 8025          move.l    #1,(A2)
00004720  0001      
                    8026   ; strcpy(Instruction,"JSR ") ;
00004722  4879 0000 8027          pea       @m68kde~2_260.L
00004726  75D0      
00004728  4879 0B00 8028          pea       _Instruction.L
0000472C  04E2      
0000472E  4EB9 0000 8029          jsr       _strcpy
00004732  5558      
00004734  504F      8030          addq.w    #8,A7
                    8031   ; Decode6BitEA(OpCode,0,0,0) ;
00004736  42A7      8032          clr.l     -(A7)
00004738  42A7      8033          clr.l     -(A7)
0000473A  42A7      8034          clr.l     -(A7)
0000473C  2F02      8035          move.l    D2,-(A7)
0000473E  4EB8 30A2 8036          jsr       _Decode6BitEA
00004742  DEFC 0010 8037          add.w     #16,A7
                    8038   DisassembleInstruction_173:
                    8039   ; }
                    8040   ; /////////////////////////////////////////////////////////////////////////////////
                    8041   ; // if instruction is LEA
                    8042   ; /////////////////////////////////////////////////////////////////////////////////
                    8043   ; if((*OpCode & (unsigned short int)(0xF1C0)) == (unsigned short int)(0x41C0))
00004746  2042      8044          move.l    D2,A0
00004748  3010      8045          move.w    (A0),D0
0000474A  C07C F1C0 8046          and.w     #61888,D0
0000474E  0C40 41C0 8047          cmp.w     #16832,D0
00004752  6600 0056 8048          bne       DisassembleInstruction_175
                    8049   ; {
                    8050   ; InstructionSize = 1;
00004756  24BC 0000 8051          move.l    #1,(A2)
0000475A  0001      
                    8052   ; strcpy(Instruction,"LEA ") ;
0000475C  4879 0000 8053          pea       @m68kde~2_261.L
00004760  75D6      
00004762  4879 0B00 8054          pea       _Instruction.L
00004766  04E2      
00004768  4EB9 0000 8055          jsr       _strcpy
0000476C  5558      
0000476E  504F      8056          addq.w    #8,A7
                    8057   ; Decode6BitEA(OpCode,0,0,0) ;
00004770  42A7      8058          clr.l     -(A7)
00004772  42A7      8059          clr.l     -(A7)
00004774  42A7      8060          clr.l     -(A7)
00004776  2F02      8061          move.l    D2,-(A7)
00004778  4EB8 30A2 8062          jsr       _Decode6BitEA
0000477C  DEFC 0010 8063          add.w     #16,A7
                    8064   ; sprintf(TempString, ",A%d", ((*OpCode >> 9) & (unsigned short int)(0x7)));
00004780  2042      8065          move.l    D2,A0
00004782  3210      8066          move.w    (A0),D1
00004784  E041      8067          asr.w     #8,D1
00004786  E241      8068          asr.w     #1,D1
00004788  C27C 0007 8069          and.w     #7,D1
0000478C  C2BC 0000 8070          and.l     #65535,D1
00004790  FFFF      
00004792  2F01      8071          move.l    D1,-(A7)
00004794  4879 0000 8072          pea       @m68kde~2_243.L
00004798  752A      
0000479A  2F0C      8073          move.l    A4,-(A7)
0000479C  4E95      8074          jsr       (A5)
0000479E  DEFC 000C 8075          add.w     #12,A7
                    8076   ; strcatInstruction(TempString);
000047A2  2F0C      8077          move.l    A4,-(A7)
000047A4  4EB8 0CCC 8078          jsr       _strcatInstruction
000047A8  584F      8079          addq.w    #4,A7
                    8080   DisassembleInstruction_175:
                    8081   ; }
                    8082   ; /////////////////////////////////////////////////////////////////////////////////
                    8083   ; // if instruction is LINK.W
                    8084   ; /////////////////////////////////////////////////////////////////////////////////
                    8085   ; if((*OpCode & (unsigned short int)(0xFFF8)) == (unsigned short int)(0x4E50))
000047AA  2042      8086          move.l    D2,A0
000047AC  3010      8087          move.w    (A0),D0
000047AE  C07C FFF8 8088          and.w     #65528,D0
000047B2  0C40 4E50 8089          cmp.w     #20048,D0
000047B6  6600 0052 8090          bne       DisassembleInstruction_177
                    8091   ; {
                    8092   ; InstructionSize = 1;
000047BA  24BC 0000 8093          move.l    #1,(A2)
000047BE  0001      
                    8094   ; strcpy(Instruction,"LINK ") ;
000047C0  4879 0000 8095          pea       @m68kde~2_262.L
000047C4  75DC      
000047C6  4879 0B00 8096          pea       _Instruction.L
000047CA  04E2      
000047CC  4EB9 0000 8097          jsr       _strcpy
000047D0  5558      
000047D2  504F      8098          addq.w    #8,A7
                    8099   ; sprintf(TempString, "A%d,#%d", ((*OpCode) & (unsigned short int)(0x7)),OpCode[1]);
000047D4  2042      8100          move.l    D2,A0
000047D6  3228 0002 8101          move.w    2(A0),D1
000047DA  48C1      8102          ext.l     D1
000047DC  2F01      8103          move.l    D1,-(A7)
000047DE  2042      8104          move.l    D2,A0
000047E0  3210      8105          move.w    (A0),D1
000047E2  C27C 0007 8106          and.w     #7,D1
000047E6  C2BC 0000 8107          and.l     #65535,D1
000047EA  FFFF      
000047EC  2F01      8108          move.l    D1,-(A7)
000047EE  4879 0000 8109          pea       @m68kde~2_263.L
000047F2  75E2      
000047F4  2F0C      8110          move.l    A4,-(A7)
000047F6  4E95      8111          jsr       (A5)
000047F8  DEFC 0010 8112          add.w     #16,A7
                    8113   ; InstructionSize = 2 ;
000047FC  24BC 0000 8114          move.l    #2,(A2)
00004800  0002      
                    8115   ; strcatInstruction(TempString);
00004802  2F0C      8116          move.l    A4,-(A7)
00004804  4EB8 0CCC 8117          jsr       _strcatInstruction
00004808  584F      8118          addq.w    #4,A7
                    8119   DisassembleInstruction_177:
                    8120   ; }
                    8121   ; /////////////////////////////////////////////////////////////////////////////////
                    8122   ; // if instruction is MOVE, MOVEA
                    8123   ; /////////////////////////////////////////////////////////////////////////////////
                    8124   ; if((*OpCode & (unsigned short int)(0xC000)) == (unsigned short int)(0x0000))
0000480A  2042      8125          move.l    D2,A0
0000480C  3010      8126          move.w    (A0),D0
0000480E  C07C C000 8127          and.w     #49152,D0
00004812  6600 00F0 8128          bne       DisassembleInstruction_193
                    8129   ; {
                    8130   ; Size = (*OpCode & (unsigned short int)(0x3000)) >> 12 ;   // get 2 bit size in bits 13/12 into 1,0
00004816  2042      8131          move.l    D2,A0
00004818  3010      8132          move.w    (A0),D0
0000481A  C07C 3000 8133          and.w     #12288,D0
0000481E  E048      8134          lsr.w     #8,D0
00004820  E848      8135          lsr.w     #4,D0
00004822  3D40 FFE2 8136          move.w    D0,-30(A6)
                    8137   ; OpMode = (*OpCode >> 3) & (unsigned short int)(0x0007);   // get 3 bit source mode operand
00004826  2042      8138          move.l    D2,A0
00004828  3010      8139          move.w    (A0),D0
0000482A  E640      8140          asr.w     #3,D0
0000482C  C07C 0007 8141          and.w     #7,D0
00004830  3600      8142          move.w    D0,D3
                    8143   ; SourceReg = (*OpCode) & (unsigned short int)(0x0007);     // get 3 bit source register number
00004832  2042      8144          move.l    D2,A0
00004834  3010      8145          move.w    (A0),D0
00004836  C07C 0007 8146          and.w     #7,D0
0000483A  3D40 FFF6 8147          move.w    D0,-10(A6)
                    8148   ; DataSize = 0 ;
0000483E  7E00      8149          moveq     #0,D7
                    8150   ; // if source addressing mode is d16(a0) or d8(a0,d0)
                    8151   ; if((OpMode == (unsigned short int)(0x0005)) || (OpMode == (unsigned short int)(0x0006)))
00004840  0C43 0005 8152          cmp.w     #5,D3
00004844  6706      8153          beq.s     DisassembleInstruction_183
00004846  0C43 0006 8154          cmp.w     #6,D3
0000484A  6602      8155          bne.s     DisassembleInstruction_181
                    8156   DisassembleInstruction_183:
                    8157   ; DataSize = 1;  // source operands has 1 word after EA
0000484C  7E01      8158          moveq     #1,D7
                    8159   DisassembleInstruction_181:
                    8160   ; // if source addressing mode is a 16 or 32 bit address
                    8161   ; if((OpMode == (unsigned short int)(0x0007))) {
0000484E  0C43 0007 8162          cmp.w     #7,D3
00004852  660C      8163          bne.s     DisassembleInstruction_187
                    8164   ; if(SourceReg == (unsigned short int)(0x0000))         // short address
00004854  302E FFF6 8165          move.w    -10(A6),D0
00004858  6604      8166          bne.s     DisassembleInstruction_186
                    8167   ; DataSize = 1 ;
0000485A  7E01      8168          moveq     #1,D7
0000485C  6002      8169          bra.s     DisassembleInstruction_187
                    8170   DisassembleInstruction_186:
                    8171   ; else
                    8172   ; DataSize = 2 ;
0000485E  7E02      8173          moveq     #2,D7
                    8174   DisassembleInstruction_187:
                    8175   ; }
                    8176   ; // if source addressing mode is # then figure out size
                    8177   ; if((OpMode == (unsigned short int)(0x0007)) && (SourceReg == (unsigned short int)(0x0004)))    {
00004860  0C43 0007 8178          cmp.w     #7,D3
00004864  6624      8179          bne.s     DisassembleInstruction_191
00004866  302E FFF6 8180          move.w    -10(A6),D0
0000486A  0C40 0004 8181          cmp.w     #4,D0
0000486E  661A      8182          bne.s     DisassembleInstruction_191
                    8183   ; if((Size == (unsigned short int)(1)) || (Size == (unsigned short int)(3)))
00004870  302E FFE2 8184          move.w    -30(A6),D0
00004874  0C40 0001 8185          cmp.w     #1,D0
00004878  670A      8186          beq.s     DisassembleInstruction_192
0000487A  302E FFE2 8187          move.w    -30(A6),D0
0000487E  0C40 0003 8188          cmp.w     #3,D0
00004882  6604      8189          bne.s     DisassembleInstruction_190
                    8190   DisassembleInstruction_192:
                    8191   ; DataSize = 1;
00004884  7E01      8192          moveq     #1,D7
00004886  6002      8193          bra.s     DisassembleInstruction_191
                    8194   DisassembleInstruction_190:
                    8195   ; else
                    8196   ; DataSize = 2 ;
00004888  7E02      8197          moveq     #2,D7
                    8198   DisassembleInstruction_191:
                    8199   ; //printf("DataSize = %d",DataSize) ;
                    8200   ; }
                    8201   ; if(Size != 0)
0000488A  302E FFE2 8202          move.w    -30(A6),D0
0000488E  6700 0074 8203          beq       DisassembleInstruction_193
                    8204   ; {
                    8205   ; InstructionSize = 1;
00004892  24BC 0000 8206          move.l    #1,(A2)
00004896  0001      
                    8207   ; if(Size == 1)
00004898  302E FFE2 8208          move.w    -30(A6),D0
0000489C  0C40 0001 8209          cmp.w     #1,D0
000048A0  660C      8210          bne.s     DisassembleInstruction_195
                    8211   ; strcpyInstruction("MOVE.B ") ;
000048A2  4879 0000 8212          pea       @m68kde~2_264.L
000048A6  75EA      
000048A8  4E93      8213          jsr       (A3)
000048AA  584F      8214          addq.w    #4,A7
000048AC  6020      8215          bra.s     DisassembleInstruction_198
                    8216   DisassembleInstruction_195:
                    8217   ; else if(Size == 2)
000048AE  302E FFE2 8218          move.w    -30(A6),D0
000048B2  0C40 0002 8219          cmp.w     #2,D0
000048B6  660C      8220          bne.s     DisassembleInstruction_197
                    8221   ; strcpyInstruction("MOVE.L ") ;
000048B8  4879 0000 8222          pea       @m68kde~2_265.L
000048BC  75F2      
000048BE  4E93      8223          jsr       (A3)
000048C0  584F      8224          addq.w    #4,A7
000048C2  600A      8225          bra.s     DisassembleInstruction_198
                    8226   DisassembleInstruction_197:
                    8227   ; else
                    8228   ; strcpyInstruction("MOVE.W ") ;
000048C4  4879 0000 8229          pea       @m68kde~2_266.L
000048C8  75FA      
000048CA  4E93      8230          jsr       (A3)
000048CC  584F      8231          addq.w    #4,A7
                    8232   DisassembleInstruction_198:
                    8233   ; Decode6BitEA(OpCode,0,0,1) ;
000048CE  4878 0001 8234          pea       1
000048D2  42A7      8235          clr.l     -(A7)
000048D4  42A7      8236          clr.l     -(A7)
000048D6  2F02      8237          move.l    D2,-(A7)
000048D8  4EB8 30A2 8238          jsr       _Decode6BitEA
000048DC  DEFC 0010 8239          add.w     #16,A7
                    8240   ; strcatInstruction(",") ;
000048E0  4879 0000 8241          pea       @m68kde~2_184.L
000048E4  73C4      
000048E6  4EB8 0CCC 8242          jsr       _strcatInstruction
000048EA  584F      8243          addq.w    #4,A7
                    8244   ; // tell next function how many words lie between opcode and destination, could be 1 or 2 e.g. with # addressing move.bwl #$data,<EA>
                    8245   ; // but subtract 1 to make the maths correct in the called function
                    8246   ; Decode6BitEA(OpCode,2,(DataSize),0) ;
000048EC  42A7      8247          clr.l     -(A7)
000048EE  CEBC 0000 8248          and.l     #65535,D7
000048F2  FFFF      
000048F4  2F07      8249          move.l    D7,-(A7)
000048F6  4878 0002 8250          pea       2
000048FA  2F02      8251          move.l    D2,-(A7)
000048FC  4EB8 30A2 8252          jsr       _Decode6BitEA
00004900  DEFC 0010 8253          add.w     #16,A7
                    8254   DisassembleInstruction_193:
                    8255   ; }
                    8256   ; }
                    8257   ; /////////////////////////////////////////////////////////////////////////////////
                    8258   ; // if instruction is MOVE <EA>,CCR
                    8259   ; /////////////////////////////////////////////////////////////////////////////////
                    8260   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x44C0))
00004904  2042      8261          move.l    D2,A0
00004906  3010      8262          move.w    (A0),D0
00004908  C07C FFC0 8263          and.w     #65472,D0
0000490C  0C40 44C0 8264          cmp.w     #17600,D0
00004910  6636      8265          bne.s     DisassembleInstruction_199
                    8266   ; {
                    8267   ; InstructionSize = 1;
00004912  24BC 0000 8268          move.l    #1,(A2)
00004916  0001      
                    8269   ; strcpy(Instruction,"MOVE ") ;
00004918  4879 0000 8270          pea       @m68kde~2_267.L
0000491C  7602      
0000491E  4879 0B00 8271          pea       _Instruction.L
00004922  04E2      
00004924  4EB9 0000 8272          jsr       _strcpy
00004928  5558      
0000492A  504F      8273          addq.w    #8,A7
                    8274   ; Decode6BitEA(OpCode,0,0,0) ;
0000492C  42A7      8275          clr.l     -(A7)
0000492E  42A7      8276          clr.l     -(A7)
00004930  42A7      8277          clr.l     -(A7)
00004932  2F02      8278          move.l    D2,-(A7)
00004934  4EB8 30A2 8279          jsr       _Decode6BitEA
00004938  DEFC 0010 8280          add.w     #16,A7
                    8281   ; strcatInstruction(",CCR") ;
0000493C  4879 0000 8282          pea       @m68kde~2_268.L
00004940  7608      
00004942  4EB8 0CCC 8283          jsr       _strcatInstruction
00004946  584F      8284          addq.w    #4,A7
                    8285   DisassembleInstruction_199:
                    8286   ; }
                    8287   ; /////////////////////////////////////////////////////////////////////////////////
                    8288   ; // if instruction is MOVE SR,<EA>
                    8289   ; /////////////////////////////////////////////////////////////////////////////////
                    8290   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x40C0))
00004948  2042      8291          move.l    D2,A0
0000494A  3010      8292          move.w    (A0),D0
0000494C  C07C FFC0 8293          and.w     #65472,D0
00004950  0C40 40C0 8294          cmp.w     #16576,D0
00004954  662A      8295          bne.s     DisassembleInstruction_201
                    8296   ; {
                    8297   ; InstructionSize = 1;
00004956  24BC 0000 8298          move.l    #1,(A2)
0000495A  0001      
                    8299   ; strcpy(Instruction,"MOVE SR,") ;
0000495C  4879 0000 8300          pea       @m68kde~2_269.L
00004960  760E      
00004962  4879 0B00 8301          pea       _Instruction.L
00004966  04E2      
00004968  4EB9 0000 8302          jsr       _strcpy
0000496C  5558      
0000496E  504F      8303          addq.w    #8,A7
                    8304   ; Decode6BitEA(OpCode,0,0,0) ;
00004970  42A7      8305          clr.l     -(A7)
00004972  42A7      8306          clr.l     -(A7)
00004974  42A7      8307          clr.l     -(A7)
00004976  2F02      8308          move.l    D2,-(A7)
00004978  4EB8 30A2 8309          jsr       _Decode6BitEA
0000497C  DEFC 0010 8310          add.w     #16,A7
                    8311   DisassembleInstruction_201:
                    8312   ; }
                    8313   ; /////////////////////////////////////////////////////////////////////////////////
                    8314   ; // if instruction is MOVE <EA>,SR
                    8315   ; /////////////////////////////////////////////////////////////////////////////////
                    8316   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x46C0))
00004980  2042      8317          move.l    D2,A0
00004982  3010      8318          move.w    (A0),D0
00004984  C07C FFC0 8319          and.w     #65472,D0
00004988  0C40 46C0 8320          cmp.w     #18112,D0
0000498C  6636      8321          bne.s     DisassembleInstruction_203
                    8322   ; {
                    8323   ; InstructionSize = 1;
0000498E  24BC 0000 8324          move.l    #1,(A2)
00004992  0001      
                    8325   ; strcpy(Instruction,"MOVE ") ;
00004994  4879 0000 8326          pea       @m68kde~2_267.L
00004998  7602      
0000499A  4879 0B00 8327          pea       _Instruction.L
0000499E  04E2      
000049A0  4EB9 0000 8328          jsr       _strcpy
000049A4  5558      
000049A6  504F      8329          addq.w    #8,A7
                    8330   ; Decode6BitEA(OpCode,0,0,0) ;
000049A8  42A7      8331          clr.l     -(A7)
000049AA  42A7      8332          clr.l     -(A7)
000049AC  42A7      8333          clr.l     -(A7)
000049AE  2F02      8334          move.l    D2,-(A7)
000049B0  4EB8 30A2 8335          jsr       _Decode6BitEA
000049B4  DEFC 0010 8336          add.w     #16,A7
                    8337   ; strcatInstruction(",SR") ;
000049B8  4879 0000 8338          pea       @m68kde~2_270.L
000049BC  7618      
000049BE  4EB8 0CCC 8339          jsr       _strcatInstruction
000049C2  584F      8340          addq.w    #4,A7
                    8341   DisassembleInstruction_203:
                    8342   ; }
                    8343   ; /////////////////////////////////////////////////////////////////////////////////
                    8344   ; // if instruction is MOVE USP,An
                    8345   ; /////////////////////////////////////////////////////////////////////////////////
                    8346   ; if((*OpCode & (unsigned short int)(0xFFF0)) == (unsigned short int)(0x4E60))
000049C4  2042      8347          move.l    D2,A0
000049C6  3010      8348          move.w    (A0),D0
000049C8  C07C FFF0 8349          and.w     #65520,D0
000049CC  0C40 4E60 8350          cmp.w     #20064,D0
000049D0  6600 0060 8351          bne       DisassembleInstruction_208
                    8352   ; {
                    8353   ; InstructionSize = 1;
000049D4  24BC 0000 8354          move.l    #1,(A2)
000049D8  0001      
                    8355   ; Register = (*OpCode & (unsigned short int)(0x0007)) ;
000049DA  2042      8356          move.l    D2,A0
000049DC  3010      8357          move.w    (A0),D0
000049DE  C07C 0007 8358          and.w     #7,D0
000049E2  3D40 FFEA 8359          move.w    D0,-22(A6)
                    8360   ; if((*OpCode & (unsigned short int)(0x0008)) == (unsigned short int)(0x0008))        // transfer sp to address regier
000049E6  2042      8361          move.l    D2,A0
000049E8  3010      8362          move.w    (A0),D0
000049EA  C07C 0008 8363          and.w     #8,D0
000049EE  0C40 0008 8364          cmp.w     #8,D0
000049F2  6620      8365          bne.s     DisassembleInstruction_207
                    8366   ; sprintf(Instruction, "MOVE USP,A%d", Register);
000049F4  322E FFEA 8367          move.w    -22(A6),D1
000049F8  C2BC 0000 8368          and.l     #65535,D1
000049FC  FFFF      
000049FE  2F01      8369          move.l    D1,-(A7)
00004A00  4879 0000 8370          pea       @m68kde~2_271.L
00004A04  761C      
00004A06  4879 0B00 8371          pea       _Instruction.L
00004A0A  04E2      
00004A0C  4E95      8372          jsr       (A5)
00004A0E  DEFC 000C 8373          add.w     #12,A7
00004A12  601E      8374          bra.s     DisassembleInstruction_208
                    8375   DisassembleInstruction_207:
                    8376   ; else
                    8377   ; sprintf(Instruction, "MOVE A%d,USP", Register);
00004A14  322E FFEA 8378          move.w    -22(A6),D1
00004A18  C2BC 0000 8379          and.l     #65535,D1
00004A1C  FFFF      
00004A1E  2F01      8380          move.l    D1,-(A7)
00004A20  4879 0000 8381          pea       @m68kde~2_272.L
00004A24  762A      
00004A26  4879 0B00 8382          pea       _Instruction.L
00004A2A  04E2      
00004A2C  4E95      8383          jsr       (A5)
00004A2E  DEFC 000C 8384          add.w     #12,A7
                    8385   DisassembleInstruction_208:
                    8386   ; }
                    8387   ; /////////////////////////////////////////////////////////////////////////////////
                    8388   ; // if instruction is MOVEM
                    8389   ; /////////////////////////////////////////////////////////////////////////////////
                    8390   ; if((*OpCode & (unsigned short int)(0xFB80)) == (unsigned short int)(0x4880))
00004A32  2042      8391          move.l    D2,A0
00004A34  3010      8392          move.w    (A0),D0
00004A36  C07C FB80 8393          and.w     #64384,D0
00004A3A  0C40 4880 8394          cmp.w     #18560,D0
00004A3E  6600 01FC 8395          bne       DisassembleInstruction_230
                    8396   ; {
                    8397   ; OpMode = (*OpCode >> 3) & (unsigned short int)(0x0007) ;
00004A42  2042      8398          move.l    D2,A0
00004A44  3010      8399          move.w    (A0),D0
00004A46  E640      8400          asr.w     #3,D0
00004A48  C07C 0007 8401          and.w     #7,D0
00004A4C  3600      8402          move.w    D0,D3
                    8403   ; if( (OpMode != (unsigned short int)(0x0)) &&
00004A4E  4A43      8404          tst.w     D3
00004A50  6700 01EA 8405          beq       DisassembleInstruction_230
00004A54  0C43 0001 8406          cmp.w     #1,D3
00004A58  6700 01E2 8407          beq       DisassembleInstruction_230
00004A5C  4A43      8408          tst.w     D3
00004A5E  6700 01DC 8409          beq       DisassembleInstruction_230
                    8410   ; (OpMode != (unsigned short int)(0x1)) &&
                    8411   ; (OpMode != (unsigned short int)(0x0)))
                    8412   ; {
                    8413   ; InstructionSize = 1;
00004A62  24BC 0000 8414          move.l    #1,(A2)
00004A66  0001      
                    8415   ; strcpy(Instruction,"MOVEM") ;
00004A68  4879 0000 8416          pea       @m68kde~2_273.L
00004A6C  7638      
00004A6E  4879 0B00 8417          pea       _Instruction.L
00004A72  04E2      
00004A74  4EB9 0000 8418          jsr       _strcpy
00004A78  5558      
00004A7A  504F      8419          addq.w    #8,A7
                    8420   ; InstructionSize ++ ;
00004A7C  5292      8421          addq.l    #1,(A2)
                    8422   ; if((*OpCode & (unsigned short int)(0x0040)) == (unsigned short int)(0x0))
00004A7E  2042      8423          move.l    D2,A0
00004A80  3010      8424          move.w    (A0),D0
00004A82  C07C 0040 8425          and.w     #64,D0
00004A86  660E      8426          bne.s     DisassembleInstruction_213
                    8427   ; strcatInstruction(".W ") ;
00004A88  4879 0000 8428          pea       @m68kde~2_167.L
00004A8C  7376      
00004A8E  4EB8 0CCC 8429          jsr       _strcatInstruction
00004A92  584F      8430          addq.w    #4,A7
00004A94  600C      8431          bra.s     DisassembleInstruction_214
                    8432   DisassembleInstruction_213:
                    8433   ; else
                    8434   ; strcatInstruction(".L ") ;
00004A96  4879 0000 8435          pea       @m68kde~2_168.L
00004A9A  737A      
00004A9C  4EB8 0CCC 8436          jsr       _strcatInstruction
00004AA0  584F      8437          addq.w    #4,A7
                    8438   DisassembleInstruction_214:
                    8439   ; // movem  reg,-(An) if bit 10 = 0
                    8440   ; if((*OpCode & (unsigned short int)(0x0400))  == (unsigned short int)(0x0000))
00004AA2  2042      8441          move.l    D2,A0
00004AA4  3010      8442          move.w    (A0),D0
00004AA6  C07C 0400 8443          and.w     #1024,D0
00004AAA  6600 00D2 8444          bne       DisassembleInstruction_215
                    8445   ; {
                    8446   ; Mask = 0x8000 ;                     // bit 15 = 1
00004AAE  3D7C 8000 8447          move.w    #32768,-2(A6)
00004AB2  FFFE      
                    8448   ; DoneSlash = 0 ;
00004AB4  4246      8449          clr.w     D6
                    8450   ; for(i = 0; i < 16; i ++)    {
00004AB6  4284      8451          clr.l     D4
                    8452   DisassembleInstruction_217:
00004AB8  0C84 0000 8453          cmp.l     #16,D4
00004ABC  0010      
00004ABE  6C00 009E 8454          bge       DisassembleInstruction_219
                    8455   ; printf("") ;    // fixes bug otherwise the address registers doen't get printed (don't know why), something to do with sprintf I guess
00004AC2  4879 0000 8456          pea       @m68kde~2_33.L
00004AC6  63EA      
00004AC8  4EB9 0000 8457          jsr       _printf
00004ACC  5756      
00004ACE  584F      8458          addq.w    #4,A7
                    8459   ; if((OpCode[1] & Mask) == Mask)    {
00004AD0  2042      8460          move.l    D2,A0
00004AD2  3028 0002 8461          move.w    2(A0),D0
00004AD6  C06E FFFE 8462          and.w     -2(A6),D0
00004ADA  B06E FFFE 8463          cmp.w     -2(A6),D0
00004ADE  6600 006E 8464          bne       DisassembleInstruction_220
                    8465   ; if(i < 8 )  {
00004AE2  0C84 0000 8466          cmp.l     #8,D4
00004AE6  0008      
00004AE8  6C2C      8467          bge.s     DisassembleInstruction_222
                    8468   ; if(DoneSlash == 0)  {
00004AEA  4A46      8469          tst.w     D6
00004AEC  6614      8470          bne.s     DisassembleInstruction_224
                    8471   ; sprintf(TempString, "D%d", i) ;
00004AEE  2F04      8472          move.l    D4,-(A7)
00004AF0  4879 0000 8473          pea       @m68kde~2_274.L
00004AF4  763E      
00004AF6  2F0C      8474          move.l    A4,-(A7)
00004AF8  4E95      8475          jsr       (A5)
00004AFA  DEFC 000C 8476          add.w     #12,A7
                    8477   ; DoneSlash = 1;
00004AFE  7C01      8478          moveq     #1,D6
00004B00  6010      8479          bra.s     DisassembleInstruction_225
                    8480   DisassembleInstruction_224:
                    8481   ; }
                    8482   ; else
                    8483   ; sprintf(TempString, "/D%d", i) ;
00004B02  2F04      8484          move.l    D4,-(A7)
00004B04  4879 0000 8485          pea       @m68kde~2_275.L
00004B08  7642      
00004B0A  2F0C      8486          move.l    A4,-(A7)
00004B0C  4E95      8487          jsr       (A5)
00004B0E  DEFC 000C 8488          add.w     #12,A7
                    8489   DisassembleInstruction_225:
00004B12  6000 0032 8490          bra       DisassembleInstruction_227
                    8491   DisassembleInstruction_222:
                    8492   ; }
                    8493   ; else   {
                    8494   ; if(DoneSlash == 0)  {
00004B16  4A46      8495          tst.w     D6
00004B18  6618      8496          bne.s     DisassembleInstruction_226
                    8497   ; sprintf(TempString, "A%d", i-8) ;
00004B1A  2204      8498          move.l    D4,D1
00004B1C  5181      8499          subq.l    #8,D1
00004B1E  2F01      8500          move.l    D1,-(A7)
00004B20  4879 0000 8501          pea       @m68kde~2_276.L
00004B24  7648      
00004B26  2F0C      8502          move.l    A4,-(A7)
00004B28  4E95      8503          jsr       (A5)
00004B2A  DEFC 000C 8504          add.w     #12,A7
                    8505   ; DoneSlash = 1;
00004B2E  7C01      8506          moveq     #1,D6
00004B30  6014      8507          bra.s     DisassembleInstruction_227
                    8508   DisassembleInstruction_226:
                    8509   ; }
                    8510   ; else
                    8511   ; sprintf(TempString, "/A%d", i-8) ;
00004B32  2204      8512          move.l    D4,D1
00004B34  5181      8513          subq.l    #8,D1
00004B36  2F01      8514          move.l    D1,-(A7)
00004B38  4879 0000 8515          pea       @m68kde~2_277.L
00004B3C  764C      
00004B3E  2F0C      8516          move.l    A4,-(A7)
00004B40  4E95      8517          jsr       (A5)
00004B42  DEFC 000C 8518          add.w     #12,A7
                    8519   DisassembleInstruction_227:
                    8520   ; }
                    8521   ; strcatInstruction(TempString) ;
00004B46  2F0C      8522          move.l    A4,-(A7)
00004B48  4EB8 0CCC 8523          jsr       _strcatInstruction
00004B4C  584F      8524          addq.w    #4,A7
                    8525   DisassembleInstruction_220:
                    8526   ; }
                    8527   ; Mask = Mask >> 1 ;
00004B4E  302E FFFE 8528          move.w    -2(A6),D0
00004B52  E240      8529          asr.w     #1,D0
00004B54  3D40 FFFE 8530          move.w    D0,-2(A6)
00004B58  5284      8531          addq.l    #1,D4
00004B5A  6000 FF5C 8532          bra       DisassembleInstruction_217
                    8533   DisassembleInstruction_219:
                    8534   ; }
                    8535   ; strcatInstruction(",") ;
00004B5E  4879 0000 8536          pea       @m68kde~2_184.L
00004B62  73C4      
00004B64  4EB8 0CCC 8537          jsr       _strcatInstruction
00004B68  584F      8538          addq.w    #4,A7
                    8539   ; Decode6BitEA(OpCode,0,0,0) ;
00004B6A  42A7      8540          clr.l     -(A7)
00004B6C  42A7      8541          clr.l     -(A7)
00004B6E  42A7      8542          clr.l     -(A7)
00004B70  2F02      8543          move.l    D2,-(A7)
00004B72  4EB8 30A2 8544          jsr       _Decode6BitEA
00004B76  DEFC 0010 8545          add.w     #16,A7
00004B7A  6000 00C0 8546          bra       DisassembleInstruction_230
                    8547   DisassembleInstruction_215:
                    8548   ; }
                    8549   ; //movem  (An)+,reg
                    8550   ; else    {
                    8551   ; Decode6BitEA(OpCode,0,0,0) ;
00004B7E  42A7      8552          clr.l     -(A7)
00004B80  42A7      8553          clr.l     -(A7)
00004B82  42A7      8554          clr.l     -(A7)
00004B84  2F02      8555          move.l    D2,-(A7)
00004B86  4EB8 30A2 8556          jsr       _Decode6BitEA
00004B8A  DEFC 0010 8557          add.w     #16,A7
                    8558   ; strcatInstruction(",") ;
00004B8E  4879 0000 8559          pea       @m68kde~2_184.L
00004B92  73C4      
00004B94  4EB8 0CCC 8560          jsr       _strcatInstruction
00004B98  584F      8561          addq.w    #4,A7
                    8562   ; Mask = 0x0001 ;                     // bit 0 = 1
00004B9A  3D7C 0001 8563          move.w    #1,-2(A6)
00004B9E  FFFE      
                    8564   ; DoneSlash = 0 ;
00004BA0  4246      8565          clr.w     D6
                    8566   ; for(i = 0; i < 16 ; i ++)    {
00004BA2  4284      8567          clr.l     D4
                    8568   DisassembleInstruction_228:
00004BA4  0C84 0000 8569          cmp.l     #16,D4
00004BA8  0010      
00004BAA  6C00 0090 8570          bge       DisassembleInstruction_230
                    8571   ; if((OpCode[1] & Mask) == Mask)    {
00004BAE  2042      8572          move.l    D2,A0
00004BB0  3028 0002 8573          move.w    2(A0),D0
00004BB4  C06E FFFE 8574          and.w     -2(A6),D0
00004BB8  B06E FFFE 8575          cmp.w     -2(A6),D0
00004BBC  6600 006E 8576          bne       DisassembleInstruction_231
                    8577   ; if(i < 8)   {       // data registers in bits 7-0
00004BC0  0C84 0000 8578          cmp.l     #8,D4
00004BC4  0008      
00004BC6  6C2C      8579          bge.s     DisassembleInstruction_233
                    8580   ; if(DoneSlash == 0)  {
00004BC8  4A46      8581          tst.w     D6
00004BCA  6614      8582          bne.s     DisassembleInstruction_235
                    8583   ; sprintf(TempString, "D%d", i) ;
00004BCC  2F04      8584          move.l    D4,-(A7)
00004BCE  4879 0000 8585          pea       @m68kde~2_274.L
00004BD2  763E      
00004BD4  2F0C      8586          move.l    A4,-(A7)
00004BD6  4E95      8587          jsr       (A5)
00004BD8  DEFC 000C 8588          add.w     #12,A7
                    8589   ; DoneSlash = 1;
00004BDC  7C01      8590          moveq     #1,D6
00004BDE  6010      8591          bra.s     DisassembleInstruction_236
                    8592   DisassembleInstruction_235:
                    8593   ; }
                    8594   ; else
                    8595   ; sprintf(TempString, "/D%d", i) ;
00004BE0  2F04      8596          move.l    D4,-(A7)
00004BE2  4879 0000 8597          pea       @m68kde~2_275.L
00004BE6  7642      
00004BE8  2F0C      8598          move.l    A4,-(A7)
00004BEA  4E95      8599          jsr       (A5)
00004BEC  DEFC 000C 8600          add.w     #12,A7
                    8601   DisassembleInstruction_236:
00004BF0  6000 0032 8602          bra       DisassembleInstruction_238
                    8603   DisassembleInstruction_233:
                    8604   ; }
                    8605   ; else    {
                    8606   ; if(DoneSlash == 0)  {
00004BF4  4A46      8607          tst.w     D6
00004BF6  6618      8608          bne.s     DisassembleInstruction_237
                    8609   ; sprintf(TempString, "A%d", i-8) ;
00004BF8  2204      8610          move.l    D4,D1
00004BFA  5181      8611          subq.l    #8,D1
00004BFC  2F01      8612          move.l    D1,-(A7)
00004BFE  4879 0000 8613          pea       @m68kde~2_276.L
00004C02  7648      
00004C04  2F0C      8614          move.l    A4,-(A7)
00004C06  4E95      8615          jsr       (A5)
00004C08  DEFC 000C 8616          add.w     #12,A7
                    8617   ; DoneSlash = 1;
00004C0C  7C01      8618          moveq     #1,D6
00004C0E  6014      8619          bra.s     DisassembleInstruction_238
                    8620   DisassembleInstruction_237:
                    8621   ; }
                    8622   ; else
                    8623   ; sprintf(TempString, "/A%d", i-8) ;
00004C10  2204      8624          move.l    D4,D1
00004C12  5181      8625          subq.l    #8,D1
00004C14  2F01      8626          move.l    D1,-(A7)
00004C16  4879 0000 8627          pea       @m68kde~2_277.L
00004C1A  764C      
00004C1C  2F0C      8628          move.l    A4,-(A7)
00004C1E  4E95      8629          jsr       (A5)
00004C20  DEFC 000C 8630          add.w     #12,A7
                    8631   DisassembleInstruction_238:
                    8632   ; }
                    8633   ; strcatInstruction(TempString) ;
00004C24  2F0C      8634          move.l    A4,-(A7)
00004C26  4EB8 0CCC 8635          jsr       _strcatInstruction
00004C2A  584F      8636          addq.w    #4,A7
                    8637   DisassembleInstruction_231:
                    8638   ; }
                    8639   ; Mask = Mask << 1 ;
00004C2C  302E FFFE 8640          move.w    -2(A6),D0
00004C30  E340      8641          asl.w     #1,D0
00004C32  3D40 FFFE 8642          move.w    D0,-2(A6)
00004C36  5284      8643          addq.l    #1,D4
00004C38  6000 FF6A 8644          bra       DisassembleInstruction_228
                    8645   DisassembleInstruction_230:
                    8646   ; }
                    8647   ; }
                    8648   ; }
                    8649   ; }
                    8650   ; /////////////////////////////////////////////////////////////////////////////////
                    8651   ; // if instruction is MOVEP
                    8652   ; /////////////////////////////////////////////////////////////////////////////////
                    8653   ; if((*OpCode & (unsigned short int)(0xF038)) == (unsigned short int)(0x0008))
00004C3C  2042      8654          move.l    D2,A0
00004C3E  3010      8655          move.w    (A0),D0
00004C40  C07C F038 8656          and.w     #61496,D0
00004C44  0C40 0008 8657          cmp.w     #8,D0
00004C48  6600 0112 8658          bne       DisassembleInstruction_247
                    8659   ; {
                    8660   ; InstructionSize = 1;
00004C4C  24BC 0000 8661          move.l    #1,(A2)
00004C50  0001      
                    8662   ; DataRegister = (*OpCode >> 9) & (unsigned short int)(0x0007);
00004C52  2042      8663          move.l    D2,A0
00004C54  3010      8664          move.w    (A0),D0
00004C56  E040      8665          asr.w     #8,D0
00004C58  E240      8666          asr.w     #1,D0
00004C5A  C07C 0007 8667          and.w     #7,D0
00004C5E  3A00      8668          move.w    D0,D5
                    8669   ; AddressRegister = (*OpCode & (unsigned short int)(0x0007)) ;
00004C60  2042      8670          move.l    D2,A0
00004C62  3010      8671          move.w    (A0),D0
00004C64  C07C 0007 8672          and.w     #7,D0
00004C68  3D40 FFF8 8673          move.w    D0,-8(A6)
                    8674   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0007)  ;
00004C6C  2042      8675          move.l    D2,A0
00004C6E  3010      8676          move.w    (A0),D0
00004C70  EC40      8677          asr.w     #6,D0
00004C72  C07C 0007 8678          and.w     #7,D0
00004C76  3600      8679          move.w    D0,D3
                    8680   ; InstructionSize++ ;
00004C78  5292      8681          addq.l    #1,(A2)
                    8682   ; if(OpMode == (unsigned short int)(0x4)) // transfer word from memory to register
00004C7A  0C43 0004 8683          cmp.w     #4,D3
00004C7E  6634      8684          bne.s     DisassembleInstruction_241
                    8685   ; sprintf(Instruction, "MOVEP.W $%X(A%d),D%d", OpCode[1], AddressRegister, DataRegister) ;
00004C80  CABC 0000 8686          and.l     #65535,D5
00004C84  FFFF      
00004C86  2F05      8687          move.l    D5,-(A7)
00004C88  322E FFF8 8688          move.w    -8(A6),D1
00004C8C  C2BC 0000 8689          and.l     #65535,D1
00004C90  FFFF      
00004C92  2F01      8690          move.l    D1,-(A7)
00004C94  2042      8691          move.l    D2,A0
00004C96  3228 0002 8692          move.w    2(A0),D1
00004C9A  48C1      8693          ext.l     D1
00004C9C  2F01      8694          move.l    D1,-(A7)
00004C9E  4879 0000 8695          pea       @m68kde~2_278.L
00004CA2  7652      
00004CA4  4879 0B00 8696          pea       _Instruction.L
00004CA8  04E2      
00004CAA  4E95      8697          jsr       (A5)
00004CAC  DEFC 0014 8698          add.w     #20,A7
00004CB0  6000 00AA 8699          bra       DisassembleInstruction_247
                    8700   DisassembleInstruction_241:
                    8701   ; else if(OpMode == (unsigned short int)(0x5)) // transfer long from memory to register
00004CB4  0C43 0005 8702          cmp.w     #5,D3
00004CB8  6634      8703          bne.s     DisassembleInstruction_243
                    8704   ; sprintf(Instruction, "MOVEP.L $%X(A%d),D%d", OpCode[1], AddressRegister, DataRegister) ;
00004CBA  CABC 0000 8705          and.l     #65535,D5
00004CBE  FFFF      
00004CC0  2F05      8706          move.l    D5,-(A7)
00004CC2  322E FFF8 8707          move.w    -8(A6),D1
00004CC6  C2BC 0000 8708          and.l     #65535,D1
00004CCA  FFFF      
00004CCC  2F01      8709          move.l    D1,-(A7)
00004CCE  2042      8710          move.l    D2,A0
00004CD0  3228 0002 8711          move.w    2(A0),D1
00004CD4  48C1      8712          ext.l     D1
00004CD6  2F01      8713          move.l    D1,-(A7)
00004CD8  4879 0000 8714          pea       @m68kde~2_279.L
00004CDC  7668      
00004CDE  4879 0B00 8715          pea       _Instruction.L
00004CE2  04E2      
00004CE4  4E95      8716          jsr       (A5)
00004CE6  DEFC 0014 8717          add.w     #20,A7
00004CEA  6000 0070 8718          bra       DisassembleInstruction_247
                    8719   DisassembleInstruction_243:
                    8720   ; else if(OpMode == (unsigned short int)(0x6)) // transfer long from register to memory
00004CEE  0C43 0006 8721          cmp.w     #6,D3
00004CF2  6632      8722          bne.s     DisassembleInstruction_245
                    8723   ; sprintf(Instruction, "MOVEP.W D%d,$%X(A%d)", DataRegister, OpCode[1], AddressRegister ) ;
00004CF4  322E FFF8 8724          move.w    -8(A6),D1
00004CF8  C2BC 0000 8725          and.l     #65535,D1
00004CFC  FFFF      
00004CFE  2F01      8726          move.l    D1,-(A7)
00004D00  2042      8727          move.l    D2,A0
00004D02  3228 0002 8728          move.w    2(A0),D1
00004D06  48C1      8729          ext.l     D1
00004D08  2F01      8730          move.l    D1,-(A7)
00004D0A  CABC 0000 8731          and.l     #65535,D5
00004D0E  FFFF      
00004D10  2F05      8732          move.l    D5,-(A7)
00004D12  4879 0000 8733          pea       @m68kde~2_280.L
00004D16  767E      
00004D18  4879 0B00 8734          pea       _Instruction.L
00004D1C  04E2      
00004D1E  4E95      8735          jsr       (A5)
00004D20  DEFC 0014 8736          add.w     #20,A7
00004D24  6036      8737          bra.s     DisassembleInstruction_247
                    8738   DisassembleInstruction_245:
                    8739   ; else if(OpMode == (unsigned short int)(0x7)) // transfer long from register to memory
00004D26  0C43 0007 8740          cmp.w     #7,D3
00004D2A  6630      8741          bne.s     DisassembleInstruction_247
                    8742   ; sprintf(Instruction, "MOVEP.L D%d,$%X(A%d)", DataRegister, OpCode[1], AddressRegister ) ;
00004D2C  322E FFF8 8743          move.w    -8(A6),D1
00004D30  C2BC 0000 8744          and.l     #65535,D1
00004D34  FFFF      
00004D36  2F01      8745          move.l    D1,-(A7)
00004D38  2042      8746          move.l    D2,A0
00004D3A  3228 0002 8747          move.w    2(A0),D1
00004D3E  48C1      8748          ext.l     D1
00004D40  2F01      8749          move.l    D1,-(A7)
00004D42  CABC 0000 8750          and.l     #65535,D5
00004D46  FFFF      
00004D48  2F05      8751          move.l    D5,-(A7)
00004D4A  4879 0000 8752          pea       @m68kde~2_281.L
00004D4E  7694      
00004D50  4879 0B00 8753          pea       _Instruction.L
00004D54  04E2      
00004D56  4E95      8754          jsr       (A5)
00004D58  DEFC 0014 8755          add.w     #20,A7
                    8756   DisassembleInstruction_247:
                    8757   ; }
                    8758   ; /////////////////////////////////////////////////////////////////////////////////
                    8759   ; // if instruction is MOVEQ
                    8760   ; /////////////////////////////////////////////////////////////////////////////////
                    8761   ; if((*OpCode & (unsigned short int)(0xF100)) == (unsigned short int)(0x7000))
00004D5C  2042      8762          move.l    D2,A0
00004D5E  3010      8763          move.w    (A0),D0
00004D60  C07C F100 8764          and.w     #61696,D0
00004D64  0C40 7000 8765          cmp.w     #28672,D0
00004D68  6600 0040 8766          bne       DisassembleInstruction_249
                    8767   ; {
                    8768   ; InstructionSize = 1;
00004D6C  24BC 0000 8769          move.l    #1,(A2)
00004D70  0001      
                    8770   ; DataRegister = (*OpCode >> 9) & (unsigned short int)(0x0007) ;
00004D72  2042      8771          move.l    D2,A0
00004D74  3010      8772          move.w    (A0),D0
00004D76  E040      8773          asr.w     #8,D0
00004D78  E240      8774          asr.w     #1,D0
00004D7A  C07C 0007 8775          and.w     #7,D0
00004D7E  3A00      8776          move.w    D0,D5
                    8777   ; sprintf(Instruction, "MOVEQ #$%X,D%d", (*OpCode & (unsigned short int)(0x00FF)), DataRegister) ;
00004D80  CABC 0000 8778          and.l     #65535,D5
00004D84  FFFF      
00004D86  2F05      8779          move.l    D5,-(A7)
00004D88  2042      8780          move.l    D2,A0
00004D8A  3210      8781          move.w    (A0),D1
00004D8C  C27C 00FF 8782          and.w     #255,D1
00004D90  C2BC 0000 8783          and.l     #65535,D1
00004D94  FFFF      
00004D96  2F01      8784          move.l    D1,-(A7)
00004D98  4879 0000 8785          pea       @m68kde~2_282.L
00004D9C  76AA      
00004D9E  4879 0B00 8786          pea       _Instruction.L
00004DA2  04E2      
00004DA4  4E95      8787          jsr       (A5)
00004DA6  DEFC 0010 8788          add.w     #16,A7
                    8789   DisassembleInstruction_249:
                    8790   ; }
                    8791   ; /////////////////////////////////////////////////////////////////////////////////
                    8792   ; // if instruction is MULS.W
                    8793   ; /////////////////////////////////////////////////////////////////////////////////
                    8794   ; if((*OpCode & (unsigned short int)(0xF1C0)) == (unsigned short int)(0xC1C0))
00004DAA  2042      8795          move.l    D2,A0
00004DAC  3010      8796          move.w    (A0),D0
00004DAE  C07C F1C0 8797          and.w     #61888,D0
00004DB2  0C40 C1C0 8798          cmp.w     #49600,D0
00004DB6  6600 004E 8799          bne       DisassembleInstruction_251
                    8800   ; {
                    8801   ; InstructionSize = 1;
00004DBA  24BC 0000 8802          move.l    #1,(A2)
00004DBE  0001      
                    8803   ; DataRegister = (*OpCode >> 9) & (unsigned short int)(0x0007);
00004DC0  2042      8804          move.l    D2,A0
00004DC2  3010      8805          move.w    (A0),D0
00004DC4  E040      8806          asr.w     #8,D0
00004DC6  E240      8807          asr.w     #1,D0
00004DC8  C07C 0007 8808          and.w     #7,D0
00004DCC  3A00      8809          move.w    D0,D5
                    8810   ; strcpyInstruction("MULS ");
00004DCE  4879 0000 8811          pea       @m68kde~2_283.L
00004DD2  76BA      
00004DD4  4E93      8812          jsr       (A3)
00004DD6  584F      8813          addq.w    #4,A7
                    8814   ; Decode6BitEA(OpCode,0,0,0) ;
00004DD8  42A7      8815          clr.l     -(A7)
00004DDA  42A7      8816          clr.l     -(A7)
00004DDC  42A7      8817          clr.l     -(A7)
00004DDE  2F02      8818          move.l    D2,-(A7)
00004DE0  4EB8 30A2 8819          jsr       _Decode6BitEA
00004DE4  DEFC 0010 8820          add.w     #16,A7
                    8821   ; sprintf(TempString, ",D%d", DataRegister) ;
00004DE8  CABC 0000 8822          and.l     #65535,D5
00004DEC  FFFF      
00004DEE  2F05      8823          move.l    D5,-(A7)
00004DF0  4879 0000 8824          pea       @m68kde~2_239.L
00004DF4  7510      
00004DF6  2F0C      8825          move.l    A4,-(A7)
00004DF8  4E95      8826          jsr       (A5)
00004DFA  DEFC 000C 8827          add.w     #12,A7
                    8828   ; strcatInstruction(TempString);
00004DFE  2F0C      8829          move.l    A4,-(A7)
00004E00  4EB8 0CCC 8830          jsr       _strcatInstruction
00004E04  584F      8831          addq.w    #4,A7
                    8832   DisassembleInstruction_251:
                    8833   ; }
                    8834   ; /////////////////////////////////////////////////////////////////////////////////
                    8835   ; // if instruction is MULU.W
                    8836   ; /////////////////////////////////////////////////////////////////////////////////
                    8837   ; if((*OpCode & (unsigned short int)(0xF1C0)) == (unsigned short int)(0xC0C0))
00004E06  2042      8838          move.l    D2,A0
00004E08  3010      8839          move.w    (A0),D0
00004E0A  C07C F1C0 8840          and.w     #61888,D0
00004E0E  0C40 C0C0 8841          cmp.w     #49344,D0
00004E12  6600 004E 8842          bne       DisassembleInstruction_253
                    8843   ; {
                    8844   ; InstructionSize = 1;
00004E16  24BC 0000 8845          move.l    #1,(A2)
00004E1A  0001      
                    8846   ; DataRegister = (*OpCode >> 9) & (unsigned short int)(0x0007);
00004E1C  2042      8847          move.l    D2,A0
00004E1E  3010      8848          move.w    (A0),D0
00004E20  E040      8849          asr.w     #8,D0
00004E22  E240      8850          asr.w     #1,D0
00004E24  C07C 0007 8851          and.w     #7,D0
00004E28  3A00      8852          move.w    D0,D5
                    8853   ; strcpyInstruction("MULU ");
00004E2A  4879 0000 8854          pea       @m68kde~2_284.L
00004E2E  76C0      
00004E30  4E93      8855          jsr       (A3)
00004E32  584F      8856          addq.w    #4,A7
                    8857   ; Decode6BitEA(OpCode,0,0,0) ;
00004E34  42A7      8858          clr.l     -(A7)
00004E36  42A7      8859          clr.l     -(A7)
00004E38  42A7      8860          clr.l     -(A7)
00004E3A  2F02      8861          move.l    D2,-(A7)
00004E3C  4EB8 30A2 8862          jsr       _Decode6BitEA
00004E40  DEFC 0010 8863          add.w     #16,A7
                    8864   ; sprintf(TempString, ",D%d", DataRegister) ;
00004E44  CABC 0000 8865          and.l     #65535,D5
00004E48  FFFF      
00004E4A  2F05      8866          move.l    D5,-(A7)
00004E4C  4879 0000 8867          pea       @m68kde~2_239.L
00004E50  7510      
00004E52  2F0C      8868          move.l    A4,-(A7)
00004E54  4E95      8869          jsr       (A5)
00004E56  DEFC 000C 8870          add.w     #12,A7
                    8871   ; strcatInstruction(TempString);
00004E5A  2F0C      8872          move.l    A4,-(A7)
00004E5C  4EB8 0CCC 8873          jsr       _strcatInstruction
00004E60  584F      8874          addq.w    #4,A7
                    8875   DisassembleInstruction_253:
                    8876   ; }
                    8877   ; /////////////////////////////////////////////////////////////////////////////////
                    8878   ; // if instruction is NBCD <EA>
                    8879   ; /////////////////////////////////////////////////////////////////////////////////
                    8880   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x4800))
00004E62  2042      8881          move.l    D2,A0
00004E64  3010      8882          move.w    (A0),D0
00004E66  C07C FFC0 8883          and.w     #65472,D0
00004E6A  0C40 4800 8884          cmp.w     #18432,D0
00004E6E  6620      8885          bne.s     DisassembleInstruction_255
                    8886   ; {
                    8887   ; InstructionSize = 1;
00004E70  24BC 0000 8888          move.l    #1,(A2)
00004E74  0001      
                    8889   ; strcpyInstruction("NBCD ");
00004E76  4879 0000 8890          pea       @m68kde~2_285.L
00004E7A  76C6      
00004E7C  4E93      8891          jsr       (A3)
00004E7E  584F      8892          addq.w    #4,A7
                    8893   ; Decode6BitEA(OpCode,0,0,0);
00004E80  42A7      8894          clr.l     -(A7)
00004E82  42A7      8895          clr.l     -(A7)
00004E84  42A7      8896          clr.l     -(A7)
00004E86  2F02      8897          move.l    D2,-(A7)
00004E88  4EB8 30A2 8898          jsr       _Decode6BitEA
00004E8C  DEFC 0010 8899          add.w     #16,A7
                    8900   DisassembleInstruction_255:
                    8901   ; }
                    8902   ; /////////////////////////////////////////////////////////////////////////////////
                    8903   ; // if instruction is NEG <EA>
                    8904   ; /////////////////////////////////////////////////////////////////////////////////
                    8905   ; if((*OpCode & (unsigned short int)(0xFF00)) == (unsigned short int)(0x4400))
00004E90  2042      8906          move.l    D2,A0
00004E92  3010      8907          move.w    (A0),D0
00004E94  C07C FF00 8908          and.w     #65280,D0
00004E98  0C40 4400 8909          cmp.w     #17408,D0
00004E9C  6600 0046 8910          bne       DisassembleInstruction_259
                    8911   ; {
                    8912   ; if(((*OpCode >> 6) & (unsigned short int)(0x0003)) != (unsigned short int)(0x0003))
00004EA0  2042      8913          move.l    D2,A0
00004EA2  3010      8914          move.w    (A0),D0
00004EA4  EC40      8915          asr.w     #6,D0
00004EA6  C07C 0003 8916          and.w     #3,D0
00004EAA  0C40 0003 8917          cmp.w     #3,D0
00004EAE  6700 0034 8918          beq       DisassembleInstruction_259
                    8919   ; {
                    8920   ; InstructionSize = 1;
00004EB2  24BC 0000 8921          move.l    #1,(A2)
00004EB6  0001      
                    8922   ; strcpyInstruction("NEG");
00004EB8  4879 0000 8923          pea       @m68kde~2_286.L
00004EBC  76CC      
00004EBE  4E93      8924          jsr       (A3)
00004EC0  584F      8925          addq.w    #4,A7
                    8926   ; Decode2BitOperandSize(*OpCode) ;
00004EC2  2042      8927          move.l    D2,A0
00004EC4  3210      8928          move.w    (A0),D1
00004EC6  C2BC 0000 8929          and.l     #65535,D1
00004ECA  FFFF      
00004ECC  2F01      8930          move.l    D1,-(A7)
00004ECE  4EB8 2E0E 8931          jsr       _Decode2BitOperandSize
00004ED2  584F      8932          addq.w    #4,A7
                    8933   ; Decode6BitEA(OpCode,0,0,0);
00004ED4  42A7      8934          clr.l     -(A7)
00004ED6  42A7      8935          clr.l     -(A7)
00004ED8  42A7      8936          clr.l     -(A7)
00004EDA  2F02      8937          move.l    D2,-(A7)
00004EDC  4EB8 30A2 8938          jsr       _Decode6BitEA
00004EE0  DEFC 0010 8939          add.w     #16,A7
                    8940   DisassembleInstruction_259:
                    8941   ; }
                    8942   ; }
                    8943   ; /////////////////////////////////////////////////////////////////////////////////
                    8944   ; // if instruction is NEGX <EA>
                    8945   ; /////////////////////////////////////////////////////////////////////////////////
                    8946   ; if((*OpCode & (unsigned short int)(0xFF00)) == (unsigned short int)(0x4000))
00004EE4  2042      8947          move.l    D2,A0
00004EE6  3010      8948          move.w    (A0),D0
00004EE8  C07C FF00 8949          and.w     #65280,D0
00004EEC  0C40 4000 8950          cmp.w     #16384,D0
00004EF0  6600 0046 8951          bne       DisassembleInstruction_263
                    8952   ; {
                    8953   ; if(((*OpCode >> 6) & (unsigned short int)(0x0003)) != (unsigned short int)(0x0003))
00004EF4  2042      8954          move.l    D2,A0
00004EF6  3010      8955          move.w    (A0),D0
00004EF8  EC40      8956          asr.w     #6,D0
00004EFA  C07C 0003 8957          and.w     #3,D0
00004EFE  0C40 0003 8958          cmp.w     #3,D0
00004F02  6700 0034 8959          beq       DisassembleInstruction_263
                    8960   ; {
                    8961   ; InstructionSize = 1;
00004F06  24BC 0000 8962          move.l    #1,(A2)
00004F0A  0001      
                    8963   ; strcpyInstruction("NEGX");
00004F0C  4879 0000 8964          pea       @m68kde~2_287.L
00004F10  76D0      
00004F12  4E93      8965          jsr       (A3)
00004F14  584F      8966          addq.w    #4,A7
                    8967   ; Decode2BitOperandSize(*OpCode) ;
00004F16  2042      8968          move.l    D2,A0
00004F18  3210      8969          move.w    (A0),D1
00004F1A  C2BC 0000 8970          and.l     #65535,D1
00004F1E  FFFF      
00004F20  2F01      8971          move.l    D1,-(A7)
00004F22  4EB8 2E0E 8972          jsr       _Decode2BitOperandSize
00004F26  584F      8973          addq.w    #4,A7
                    8974   ; Decode6BitEA(OpCode,0,0,0);
00004F28  42A7      8975          clr.l     -(A7)
00004F2A  42A7      8976          clr.l     -(A7)
00004F2C  42A7      8977          clr.l     -(A7)
00004F2E  2F02      8978          move.l    D2,-(A7)
00004F30  4EB8 30A2 8979          jsr       _Decode6BitEA
00004F34  DEFC 0010 8980          add.w     #16,A7
                    8981   DisassembleInstruction_263:
                    8982   ; }
                    8983   ; }
                    8984   ; /////////////////////////////////////////////////////////////////////////////////
                    8985   ; // if instruction is NOP
                    8986   ; /////////////////////////////////////////////////////////////////////////////////
                    8987   ; if(*OpCode == (unsigned short int)(0x4E71))
00004F38  2042      8988          move.l    D2,A0
00004F3A  3010      8989          move.w    (A0),D0
00004F3C  0C40 4E71 8990          cmp.w     #20081,D0
00004F40  6610      8991          bne.s     DisassembleInstruction_265
                    8992   ; {
                    8993   ; InstructionSize = 1;
00004F42  24BC 0000 8994          move.l    #1,(A2)
00004F46  0001      
                    8995   ; strcpyInstruction("NOP");
00004F48  4879 0000 8996          pea       @m68kde~2_288.L
00004F4C  76D6      
00004F4E  4E93      8997          jsr       (A3)
00004F50  584F      8998          addq.w    #4,A7
                    8999   DisassembleInstruction_265:
                    9000   ; }
                    9001   ; /////////////////////////////////////////////////////////////////////////////////
                    9002   ; // if instruction is NOT <EA>
                    9003   ; /////////////////////////////////////////////////////////////////////////////////
                    9004   ; if((*OpCode & (unsigned short int)(0xFF00)) == (unsigned short int)(0x4600))
00004F52  2042      9005          move.l    D2,A0
00004F54  3010      9006          move.w    (A0),D0
00004F56  C07C FF00 9007          and.w     #65280,D0
00004F5A  0C40 4600 9008          cmp.w     #17920,D0
00004F5E  6600 0046 9009          bne       DisassembleInstruction_269
                    9010   ; {
                    9011   ; if(((*OpCode >> 6) & (unsigned short int)(0x0003)) != (unsigned short int)(0x0003))
00004F62  2042      9012          move.l    D2,A0
00004F64  3010      9013          move.w    (A0),D0
00004F66  EC40      9014          asr.w     #6,D0
00004F68  C07C 0003 9015          and.w     #3,D0
00004F6C  0C40 0003 9016          cmp.w     #3,D0
00004F70  6700 0034 9017          beq       DisassembleInstruction_269
                    9018   ; {
                    9019   ; InstructionSize = 1;
00004F74  24BC 0000 9020          move.l    #1,(A2)
00004F78  0001      
                    9021   ; strcpyInstruction("NOT");
00004F7A  4879 0000 9022          pea       @m68kde~2_289.L
00004F7E  76DA      
00004F80  4E93      9023          jsr       (A3)
00004F82  584F      9024          addq.w    #4,A7
                    9025   ; Decode2BitOperandSize(*OpCode) ;
00004F84  2042      9026          move.l    D2,A0
00004F86  3210      9027          move.w    (A0),D1
00004F88  C2BC 0000 9028          and.l     #65535,D1
00004F8C  FFFF      
00004F8E  2F01      9029          move.l    D1,-(A7)
00004F90  4EB8 2E0E 9030          jsr       _Decode2BitOperandSize
00004F94  584F      9031          addq.w    #4,A7
                    9032   ; Decode6BitEA(OpCode,0,0,0);
00004F96  42A7      9033          clr.l     -(A7)
00004F98  42A7      9034          clr.l     -(A7)
00004F9A  42A7      9035          clr.l     -(A7)
00004F9C  2F02      9036          move.l    D2,-(A7)
00004F9E  4EB8 30A2 9037          jsr       _Decode6BitEA
00004FA2  DEFC 0010 9038          add.w     #16,A7
                    9039   DisassembleInstruction_269:
                    9040   ; }
                    9041   ; }
                    9042   ; /////////////////////////////////////////////////////////////////////////////////
                    9043   ; // if instruction is OR <EA>,Dn or OR Dn,<EA>
                    9044   ; /////////////////////////////////////////////////////////////////////////////////
                    9045   ; if((*OpCode & (unsigned short int)(0xF000)) == (unsigned short int)(0x8000))
00004FA6  2042      9046          move.l    D2,A0
00004FA8  3010      9047          move.w    (A0),D0
00004FAA  C07C F000 9048          and.w     #61440,D0
00004FAE  0C40 8000 9049          cmp.w     #32768,D0
00004FB2  6600 0038 9050          bne       DisassembleInstruction_273
                    9051   ; {
                    9052   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0007) ;
00004FB6  2042      9053          move.l    D2,A0
00004FB8  3010      9054          move.w    (A0),D0
00004FBA  EC40      9055          asr.w     #6,D0
00004FBC  C07C 0007 9056          and.w     #7,D0
00004FC0  3600      9057          move.w    D0,D3
                    9058   ; if( (OpMode <= (unsigned short int)(0x0002)) ||
00004FC2  0C43 0002 9059          cmp.w     #2,D3
00004FC6  630C      9060          bls.s     DisassembleInstruction_275
00004FC8  0C43 0004 9061          cmp.w     #4,D3
00004FCC  651E      9062          blo.s     DisassembleInstruction_273
00004FCE  0C43 0006 9063          cmp.w     #6,D3
00004FD2  6218      9064          bhi.s     DisassembleInstruction_273
                    9065   DisassembleInstruction_275:
                    9066   ; ((OpMode >= (unsigned short int)(0x0004)) && (OpMode <= (unsigned short int)(0x0006))))
                    9067   ; {
                    9068   ; InstructionSize = 1;
00004FD4  24BC 0000 9069          move.l    #1,(A2)
00004FD8  0001      
                    9070   ; strcpyInstruction("OR") ;
00004FDA  4879 0000 9071          pea       @m68kde~2_290.L
00004FDE  76DE      
00004FE0  4E93      9072          jsr       (A3)
00004FE2  584F      9073          addq.w    #4,A7
                    9074   ; Decode3BitOperandMode(OpCode) ;
00004FE4  2F02      9075          move.l    D2,-(A7)
00004FE6  4EB8 34CA 9076          jsr       _Decode3BitOperandMode
00004FEA  584F      9077          addq.w    #4,A7
                    9078   DisassembleInstruction_273:
                    9079   ; }
                    9080   ; }
                    9081   ; /////////////////////////////////////////////////////////////////////////////////
                    9082   ; // if instruction is ORI to CCR
                    9083   ; /////////////////////////////////////////////////////////////////////////////////
                    9084   ; if(*OpCode == (unsigned short int)(0x003C))   {
00004FEC  2042      9085          move.l    D2,A0
00004FEE  3010      9086          move.w    (A0),D0
00004FF0  0C40 003C 9087          cmp.w     #60,D0
00004FF4  662A      9088          bne.s     DisassembleInstruction_276
                    9089   ; sprintf(Instruction, "ORI #$%2X,CCR", OpCode[1] & (unsigned short int)(0x00FF)) ;
00004FF6  2042      9090          move.l    D2,A0
00004FF8  3228 0002 9091          move.w    2(A0),D1
00004FFC  C27C 00FF 9092          and.w     #255,D1
00005000  C2BC 0000 9093          and.l     #65535,D1
00005004  FFFF      
00005006  2F01      9094          move.l    D1,-(A7)
00005008  4879 0000 9095          pea       @m68kde~2_291.L
0000500C  76E2      
0000500E  4879 0B00 9096          pea       _Instruction.L
00005012  04E2      
00005014  4E95      9097          jsr       (A5)
00005016  DEFC 000C 9098          add.w     #12,A7
                    9099   ; InstructionSize = 2;
0000501A  24BC 0000 9100          move.l    #2,(A2)
0000501E  0002      
                    9101   DisassembleInstruction_276:
                    9102   ; }
                    9103   ; /////////////////////////////////////////////////////////////////////////////////
                    9104   ; // if instruction is ORI #data,SR
                    9105   ; /////////////////////////////////////////////////////////////////////////////////
                    9106   ; if(*OpCode  == (unsigned short int)(0x007c))
00005020  2042      9107          move.l    D2,A0
00005022  3010      9108          move.w    (A0),D0
00005024  0C40 007C 9109          cmp.w     #124,D0
00005028  6622      9110          bne.s     DisassembleInstruction_278
                    9111   ; {
                    9112   ; InstructionSize = 2;
0000502A  24BC 0000 9113          move.l    #2,(A2)
0000502E  0002      
                    9114   ; sprintf(Instruction, "ORI  #$%X,SR", OpCode[1]);
00005030  2042      9115          move.l    D2,A0
00005032  3228 0002 9116          move.w    2(A0),D1
00005036  48C1      9117          ext.l     D1
00005038  2F01      9118          move.l    D1,-(A7)
0000503A  4879 0000 9119          pea       @m68kde~2_292.L
0000503E  76F0      
00005040  4879 0B00 9120          pea       _Instruction.L
00005044  04E2      
00005046  4E95      9121          jsr       (A5)
00005048  DEFC 000C 9122          add.w     #12,A7
                    9123   DisassembleInstruction_278:
                    9124   ; }
                    9125   ; /////////////////////////////////////////////////////////////////////////////////
                    9126   ; // if instruction is PEA
                    9127   ; /////////////////////////////////////////////////////////////////////////////////
                    9128   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x4840))
0000504C  2042      9129          move.l    D2,A0
0000504E  3010      9130          move.w    (A0),D0
00005050  C07C FFC0 9131          and.w     #65472,D0
00005054  0C40 4840 9132          cmp.w     #18496,D0
00005058  6620      9133          bne.s     DisassembleInstruction_280
                    9134   ; {
                    9135   ; InstructionSize = 1;
0000505A  24BC 0000 9136          move.l    #1,(A2)
0000505E  0001      
                    9137   ; strcpyInstruction("PEA ");
00005060  4879 0000 9138          pea       @m68kde~2_293.L
00005064  76FE      
00005066  4E93      9139          jsr       (A3)
00005068  584F      9140          addq.w    #4,A7
                    9141   ; Decode6BitEA(OpCode,0,0,0);
0000506A  42A7      9142          clr.l     -(A7)
0000506C  42A7      9143          clr.l     -(A7)
0000506E  42A7      9144          clr.l     -(A7)
00005070  2F02      9145          move.l    D2,-(A7)
00005072  4EB8 30A2 9146          jsr       _Decode6BitEA
00005076  DEFC 0010 9147          add.w     #16,A7
                    9148   DisassembleInstruction_280:
                    9149   ; }
                    9150   ; /////////////////////////////////////////////////////////////////////////////////
                    9151   ; // if instruction is reset
                    9152   ; /////////////////////////////////////////////////////////////////////////////////
                    9153   ; if(*OpCode  == (unsigned short int)(0x4E70))
0000507A  2042      9154          move.l    D2,A0
0000507C  3010      9155          move.w    (A0),D0
0000507E  0C40 4E70 9156          cmp.w     #20080,D0
00005082  6616      9157          bne.s     DisassembleInstruction_282
                    9158   ; {
                    9159   ; InstructionSize = 1;
00005084  24BC 0000 9160          move.l    #1,(A2)
00005088  0001      
                    9161   ; sprintf(Instruction, "RESET");
0000508A  4879 0000 9162          pea       @m68kde~2_294.L
0000508E  7704      
00005090  4879 0B00 9163          pea       _Instruction.L
00005094  04E2      
00005096  4E95      9164          jsr       (A5)
00005098  504F      9165          addq.w    #8,A7
                    9166   DisassembleInstruction_282:
                    9167   ; }
                    9168   ; /////////////////////////////////////////////////////////////////////////////////
                    9169   ; // if instruction is RTE
                    9170   ; /////////////////////////////////////////////////////////////////////////////////
                    9171   ; if(*OpCode  == (unsigned short int)(0x4E73))
0000509A  2042      9172          move.l    D2,A0
0000509C  3010      9173          move.w    (A0),D0
0000509E  0C40 4E73 9174          cmp.w     #20083,D0
000050A2  6616      9175          bne.s     DisassembleInstruction_284
                    9176   ; {
                    9177   ; InstructionSize = 1;
000050A4  24BC 0000 9178          move.l    #1,(A2)
000050A8  0001      
                    9179   ; sprintf(Instruction, "RTE");
000050AA  4879 0000 9180          pea       @m68kde~2_295.L
000050AE  770A      
000050B0  4879 0B00 9181          pea       _Instruction.L
000050B4  04E2      
000050B6  4E95      9182          jsr       (A5)
000050B8  504F      9183          addq.w    #8,A7
                    9184   DisassembleInstruction_284:
                    9185   ; }
                    9186   ; /////////////////////////////////////////////////////////////////////////////////
                    9187   ; // if instruction is RTR
                    9188   ; /////////////////////////////////////////////////////////////////////////////////
                    9189   ; if(*OpCode == (unsigned short int)(0x4E77))
000050BA  2042      9190          move.l    D2,A0
000050BC  3010      9191          move.w    (A0),D0
000050BE  0C40 4E77 9192          cmp.w     #20087,D0
000050C2  6610      9193          bne.s     DisassembleInstruction_286
                    9194   ; {
                    9195   ; InstructionSize = 1;
000050C4  24BC 0000 9196          move.l    #1,(A2)
000050C8  0001      
                    9197   ; strcpyInstruction("RTR");
000050CA  4879 0000 9198          pea       @m68kde~2_296.L
000050CE  770E      
000050D0  4E93      9199          jsr       (A3)
000050D2  584F      9200          addq.w    #4,A7
                    9201   DisassembleInstruction_286:
                    9202   ; }
                    9203   ; /////////////////////////////////////////////////////////////////////////////////
                    9204   ; // if instruction is RTS
                    9205   ; /////////////////////////////////////////////////////////////////////////////////
                    9206   ; if(*OpCode == (unsigned short int)(0x4E75))
000050D4  2042      9207          move.l    D2,A0
000050D6  3010      9208          move.w    (A0),D0
000050D8  0C40 4E75 9209          cmp.w     #20085,D0
000050DC  6610      9210          bne.s     DisassembleInstruction_288
                    9211   ; {
                    9212   ; InstructionSize = 1;
000050DE  24BC 0000 9213          move.l    #1,(A2)
000050E2  0001      
                    9214   ; strcpyInstruction("RTS");
000050E4  4879 0000 9215          pea       @m68kde~2_297.L
000050E8  7712      
000050EA  4E93      9216          jsr       (A3)
000050EC  584F      9217          addq.w    #4,A7
                    9218   DisassembleInstruction_288:
                    9219   ; }
                    9220   ; /////////////////////////////////////////////////////////////////////////////////
                    9221   ; // if instruction is STOP
                    9222   ; /////////////////////////////////////////////////////////////////////////////////
                    9223   ; if(*OpCode  == (unsigned short int)(0x4E72))
000050EE  2042      9224          move.l    D2,A0
000050F0  3010      9225          move.w    (A0),D0
000050F2  0C40 4E72 9226          cmp.w     #20082,D0
000050F6  6622      9227          bne.s     DisassembleInstruction_290
                    9228   ; {
                    9229   ; InstructionSize = 2;
000050F8  24BC 0000 9230          move.l    #2,(A2)
000050FC  0002      
                    9231   ; sprintf(Instruction, "STOP #$%X", OpCode[1]);
000050FE  2042      9232          move.l    D2,A0
00005100  3228 0002 9233          move.w    2(A0),D1
00005104  48C1      9234          ext.l     D1
00005106  2F01      9235          move.l    D1,-(A7)
00005108  4879 0000 9236          pea       @m68kde~2_298.L
0000510C  7716      
0000510E  4879 0B00 9237          pea       _Instruction.L
00005112  04E2      
00005114  4E95      9238          jsr       (A5)
00005116  DEFC 000C 9239          add.w     #12,A7
                    9240   DisassembleInstruction_290:
                    9241   ; }
                    9242   ; /////////////////////////////////////////////////////////////////////////////////
                    9243   ; // if instruction is SBCD
                    9244   ; /////////////////////////////////////////////////////////////////////////////////
                    9245   ; if((*OpCode & (unsigned short int)(0xF1F0 )) == (unsigned short int)(0x8100))
0000511A  2042      9246          move.l    D2,A0
0000511C  3010      9247          move.w    (A0),D0
0000511E  C07C F1F0 9248          and.w     #61936,D0
00005122  0C40 8100 9249          cmp.w     #33024,D0
00005126  6600 0092 9250          bne       DisassembleInstruction_295
                    9251   ; {
                    9252   ; InstructionSize = 1;
0000512A  24BC 0000 9253          move.l    #1,(A2)
0000512E  0001      
                    9254   ; DestBits = (*OpCode >> 9) & (unsigned short int )(0x0007) ;
00005130  2042      9255          move.l    D2,A0
00005132  3010      9256          move.w    (A0),D0
00005134  E040      9257          asr.w     #8,D0
00005136  E240      9258          asr.w     #1,D0
00005138  C07C 0007 9259          and.w     #7,D0
0000513C  3D40 FFE0 9260          move.w    D0,-32(A6)
                    9261   ; SourceBits = (*OpCode & (unsigned short int )(0x0007));
00005140  2042      9262          move.l    D2,A0
00005142  3010      9263          move.w    (A0),D0
00005144  C07C 0007 9264          and.w     #7,D0
00005148  3D40 FFDE 9265          move.w    D0,-34(A6)
                    9266   ; Mode = (*OpCode >> 3) & (unsigned short int )(0x0001) ;
0000514C  2042      9267          move.l    D2,A0
0000514E  3010      9268          move.w    (A0),D0
00005150  E640      9269          asr.w     #3,D0
00005152  48C0      9270          ext.l     D0
00005154  C0BC 0000 9271          and.l     #1,D0
00005158  0001      
0000515A  2D40 FFE4 9272          move.l    D0,-28(A6)
                    9273   ; if(Mode == 0)
0000515E  202E FFE4 9274          move.l    -28(A6),D0
00005162  662C      9275          bne.s     DisassembleInstruction_294
                    9276   ; sprintf(Instruction, "SBCD D%d,D%d", SourceBits, DestBits) ;
00005164  322E FFE0 9277          move.w    -32(A6),D1
00005168  C2BC 0000 9278          and.l     #65535,D1
0000516C  FFFF      
0000516E  2F01      9279          move.l    D1,-(A7)
00005170  322E FFDE 9280          move.w    -34(A6),D1
00005174  C2BC 0000 9281          and.l     #65535,D1
00005178  FFFF      
0000517A  2F01      9282          move.l    D1,-(A7)
0000517C  4879 0000 9283          pea       @m68kde~2_299.L
00005180  7720      
00005182  4879 0B00 9284          pea       _Instruction.L
00005186  04E2      
00005188  4E95      9285          jsr       (A5)
0000518A  DEFC 0010 9286          add.w     #16,A7
0000518E  602A      9287          bra.s     DisassembleInstruction_295
                    9288   DisassembleInstruction_294:
                    9289   ; else
                    9290   ; sprintf(Instruction, "SBCD -(A%d),-(A%d)", SourceBits, DestBits) ;
00005190  322E FFE0 9291          move.w    -32(A6),D1
00005194  C2BC 0000 9292          and.l     #65535,D1
00005198  FFFF      
0000519A  2F01      9293          move.l    D1,-(A7)
0000519C  322E FFDE 9294          move.w    -34(A6),D1
000051A0  C2BC 0000 9295          and.l     #65535,D1
000051A4  FFFF      
000051A6  2F01      9296          move.l    D1,-(A7)
000051A8  4879 0000 9297          pea       @m68kde~2_300.L
000051AC  772E      
000051AE  4879 0B00 9298          pea       _Instruction.L
000051B2  04E2      
000051B4  4E95      9299          jsr       (A5)
000051B6  DEFC 0010 9300          add.w     #16,A7
                    9301   DisassembleInstruction_295:
                    9302   ; }
                    9303   ; /////////////////////////////////////////////////////////////////////////////////
                    9304   ; // if instruction is Scc
                    9305   ; /////////////////////////////////////////////////////////////////////////////////
                    9306   ; if((*OpCode & (unsigned short int)(0xF0C0 )) == (unsigned short int)(0x50C0))
000051BA  2042      9307          move.l    D2,A0
000051BC  3010      9308          move.w    (A0),D0
000051BE  C07C F0C0 9309          and.w     #61632,D0
000051C2  0C40 50C0 9310          cmp.w     #20672,D0
000051C6  6600 0060 9311          bne       DisassembleInstruction_298
                    9312   ; {
                    9313   ; EAMode = (*OpCode >> 3) & (unsigned short int)(0x0007) ;    // mode cannot be 1 for Scc as it it used by DBcc instruction as a differentiator
000051CA  2042      9314          move.l    D2,A0
000051CC  3010      9315          move.w    (A0),D0
000051CE  E640      9316          asr.w     #3,D0
000051D0  C07C 0007 9317          and.w     #7,D0
000051D4  3D40 FFEC 9318          move.w    D0,-20(A6)
                    9319   ; if(EAMode != (unsigned short int)(0x0001))
000051D8  302E FFEC 9320          move.w    -20(A6),D0
000051DC  0C40 0001 9321          cmp.w     #1,D0
000051E0  6700 0046 9322          beq       DisassembleInstruction_298
                    9323   ; {
                    9324   ; InstructionSize = 1;
000051E4  24BC 0000 9325          move.l    #1,(A2)
000051E8  0001      
                    9326   ; Condition = ((*OpCode >> 8) & (unsigned short int)(0xF)) ;
000051EA  2042      9327          move.l    D2,A0
000051EC  3010      9328          move.w    (A0),D0
000051EE  E040      9329          asr.w     #8,D0
000051F0  C07C 000F 9330          and.w     #15,D0
000051F4  1D40 FFE9 9331          move.b    D0,-23(A6)
                    9332   ; strcpyInstruction("S") ;
000051F8  4879 0000 9333          pea       @m68kde~2_301.L
000051FC  7742      
000051FE  4E93      9334          jsr       (A3)
00005200  584F      9335          addq.w    #4,A7
                    9336   ; DecodeBranchCondition(Condition) ;
00005202  122E FFE9 9337          move.b    -23(A6),D1
00005206  C27C 00FF 9338          and.w     #255,D1
0000520A  C2BC 0000 9339          and.l     #65535,D1
0000520E  FFFF      
00005210  2F01      9340          move.l    D1,-(A7)
00005212  4EB8 3560 9341          jsr       _DecodeBranchCondition
00005216  584F      9342          addq.w    #4,A7
                    9343   ; Decode6BitEA(OpCode,0,0,0);
00005218  42A7      9344          clr.l     -(A7)
0000521A  42A7      9345          clr.l     -(A7)
0000521C  42A7      9346          clr.l     -(A7)
0000521E  2F02      9347          move.l    D2,-(A7)
00005220  4EB8 30A2 9348          jsr       _Decode6BitEA
00005224  DEFC 0010 9349          add.w     #16,A7
                    9350   DisassembleInstruction_298:
                    9351   ; }
                    9352   ; }
                    9353   ; /////////////////////////////////////////////////////////////////////////////////
                    9354   ; // if instruction is SUB or SUBA
                    9355   ; /////////////////////////////////////////////////////////////////////////////////
                    9356   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0x9000))   {
00005228  2042      9357          move.l    D2,A0
0000522A  3010      9358          move.w    (A0),D0
0000522C  C07C F000 9359          and.w     #61440,D0
00005230  0C40 9000 9360          cmp.w     #36864,D0
00005234  6600 008C 9361          bne       DisassembleInstruction_303
                    9362   ; OpMode = ((*OpCode >> 6) & (unsigned short int)(0x0007)) ;
00005238  2042      9363          move.l    D2,A0
0000523A  3010      9364          move.w    (A0),D0
0000523C  EC40      9365          asr.w     #6,D0
0000523E  C07C 0007 9366          and.w     #7,D0
00005242  3600      9367          move.w    D0,D3
                    9368   ; InstructionSize = 1;
00005244  24BC 0000 9369          move.l    #1,(A2)
00005248  0001      
                    9370   ; if((OpMode == (unsigned short int)(0x0003)) || (OpMode == (unsigned short int)(0x0007)))      // if destination is an address register then use ADDA otherwise use ADD
0000524A  0C43 0003 9371          cmp.w     #3,D3
0000524E  6708      9372          beq.s     DisassembleInstruction_304
00005250  0C43 0007 9373          cmp.w     #7,D3
00005254  6600 005A 9374          bne       DisassembleInstruction_302
                    9375   DisassembleInstruction_304:
                    9376   ; {
                    9377   ; if(OpMode == (unsigned short int)(0x0003))
00005258  0C43 0003 9378          cmp.w     #3,D3
0000525C  660C      9379          bne.s     DisassembleInstruction_305
                    9380   ; strcpyInstruction("SUBA.W ") ;
0000525E  4879 0000 9381          pea       @m68kde~2_302.L
00005262  7744      
00005264  4E93      9382          jsr       (A3)
00005266  584F      9383          addq.w    #4,A7
00005268  600A      9384          bra.s     DisassembleInstruction_306
                    9385   DisassembleInstruction_305:
                    9386   ; else
                    9387   ; strcpyInstruction("SUBA.L ") ;
0000526A  4879 0000 9388          pea       @m68kde~2_303.L
0000526E  774C      
00005270  4E93      9389          jsr       (A3)
00005272  584F      9390          addq.w    #4,A7
                    9391   DisassembleInstruction_306:
                    9392   ; Decode6BitEA(OpCode,0,0,0)  ;
00005274  42A7      9393          clr.l     -(A7)
00005276  42A7      9394          clr.l     -(A7)
00005278  42A7      9395          clr.l     -(A7)
0000527A  2F02      9396          move.l    D2,-(A7)
0000527C  4EB8 30A2 9397          jsr       _Decode6BitEA
00005280  DEFC 0010 9398          add.w     #16,A7
                    9399   ; sprintf(TempString, ",A%X", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
00005284  2042      9400          move.l    D2,A0
00005286  3210      9401          move.w    (A0),D1
00005288  E041      9402          asr.w     #8,D1
0000528A  E241      9403          asr.w     #1,D1
0000528C  C27C 0007 9404          and.w     #7,D1
00005290  C2BC 0000 9405          and.l     #65535,D1
00005294  FFFF      
00005296  2F01      9406          move.l    D1,-(A7)
00005298  4879 0000 9407          pea       @m68kde~2_206.L
0000529C  7440      
0000529E  2F0C      9408          move.l    A4,-(A7)
000052A0  4E95      9409          jsr       (A5)
000052A2  DEFC 000C 9410          add.w     #12,A7
                    9411   ; strcatInstruction(TempString) ;
000052A6  2F0C      9412          move.l    A4,-(A7)
000052A8  4EB8 0CCC 9413          jsr       _strcatInstruction
000052AC  584F      9414          addq.w    #4,A7
000052AE  6012      9415          bra.s     DisassembleInstruction_303
                    9416   DisassembleInstruction_302:
                    9417   ; }
                    9418   ; else {
                    9419   ; strcpyInstruction("SUB") ;
000052B0  4879 0000 9420          pea       @m68kde~2_304.L
000052B4  7754      
000052B6  4E93      9421          jsr       (A3)
000052B8  584F      9422          addq.w    #4,A7
                    9423   ; Decode3BitOperandMode(OpCode) ;
000052BA  2F02      9424          move.l    D2,-(A7)
000052BC  4EB8 34CA 9425          jsr       _Decode3BitOperandMode
000052C0  584F      9426          addq.w    #4,A7
                    9427   DisassembleInstruction_303:
                    9428   ; }
                    9429   ; }
                    9430   ; /////////////////////////////////////////////////////////////////////////////////
                    9431   ; // if instruction is SUBQ
                    9432   ; /////////////////////////////////////////////////////////////////////////////////
                    9433   ; if((*OpCode & (unsigned short int)(0xF100 )) == (unsigned short int)(0x5100))
000052C2  2042      9434          move.l    D2,A0
000052C4  3010      9435          move.w    (A0),D0
000052C6  C07C F100 9436          and.w     #61696,D0
000052CA  0C40 5100 9437          cmp.w     #20736,D0
000052CE  6600 0072 9438          bne       DisassembleInstruction_309
                    9439   ; {
                    9440   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0003) ;
000052D2  2042      9441          move.l    D2,A0
000052D4  3010      9442          move.w    (A0),D0
000052D6  EC40      9443          asr.w     #6,D0
000052D8  C07C 0003 9444          and.w     #3,D0
000052DC  3600      9445          move.w    D0,D3
                    9446   ; if(OpMode <= (unsigned short int)(0x0002))
000052DE  0C43 0002 9447          cmp.w     #2,D3
000052E2  6200 005E 9448          bhi       DisassembleInstruction_309
                    9449   ; {
                    9450   ; InstructionSize = 1;
000052E6  24BC 0000 9451          move.l    #1,(A2)
000052EA  0001      
                    9452   ; strcpyInstruction("SUBQ") ;
000052EC  4879 0000 9453          pea       @m68kde~2_305.L
000052F0  7758      
000052F2  4E93      9454          jsr       (A3)
000052F4  584F      9455          addq.w    #4,A7
                    9456   ; Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
000052F6  2042      9457          move.l    D2,A0
000052F8  3210      9458          move.w    (A0),D1
000052FA  C2BC 0000 9459          and.l     #65535,D1
000052FE  FFFF      
00005300  2F01      9460          move.l    D1,-(A7)
00005302  4EB8 2E0E 9461          jsr       _Decode2BitOperandSize
00005306  584F      9462          addq.w    #4,A7
                    9463   ; sprintf(TempString, "#%1X,", ((*OpCode >> 9) & (unsigned short int)(0x0007)));    // print 3 bit #data in positions 11,10,9 in opcode
00005308  2042      9464          move.l    D2,A0
0000530A  3210      9465          move.w    (A0),D1
0000530C  E041      9466          asr.w     #8,D1
0000530E  E241      9467          asr.w     #1,D1
00005310  C27C 0007 9468          and.w     #7,D1
00005314  C2BC 0000 9469          and.l     #65535,D1
00005318  FFFF      
0000531A  2F01      9470          move.l    D1,-(A7)
0000531C  4879 0000 9471          pea       @m68kde~2_216.L
00005320  7480      
00005322  2F0C      9472          move.l    A4,-(A7)
00005324  4E95      9473          jsr       (A5)
00005326  DEFC 000C 9474          add.w     #12,A7
                    9475   ; strcatInstruction(TempString) ;
0000532A  2F0C      9476          move.l    A4,-(A7)
0000532C  4EB8 0CCC 9477          jsr       _strcatInstruction
00005330  584F      9478          addq.w    #4,A7
                    9479   ; Decode6BitEA(OpCode,0,0,0) ;                                           // decode EA
00005332  42A7      9480          clr.l     -(A7)
00005334  42A7      9481          clr.l     -(A7)
00005336  42A7      9482          clr.l     -(A7)
00005338  2F02      9483          move.l    D2,-(A7)
0000533A  4EB8 30A2 9484          jsr       _Decode6BitEA
0000533E  DEFC 0010 9485          add.w     #16,A7
                    9486   DisassembleInstruction_309:
                    9487   ; }
                    9488   ; }
                    9489   ; /////////////////////////////////////////////////////////////////////////////////
                    9490   ; // if instruction is SUBX
                    9491   ; /////////////////////////////////////////////////////////////////////////////////
                    9492   ; if((*OpCode & (unsigned short int)(0xF130 )) == (unsigned short int)(0x9100))
00005342  2042      9493          move.l    D2,A0
00005344  3010      9494          move.w    (A0),D0
00005346  C07C F130 9495          and.w     #61744,D0
0000534A  0C40 9100 9496          cmp.w     #37120,D0
0000534E  6600 00A4 9497          bne       DisassembleInstruction_313
                    9498   ; {
                    9499   ; InstructionSize = 1;
00005352  24BC 0000 9500          move.l    #1,(A2)
00005356  0001      
                    9501   ; OpMode = ((*OpCode >> 6) & (unsigned short int)(0x0003)) ;
00005358  2042      9502          move.l    D2,A0
0000535A  3010      9503          move.w    (A0),D0
0000535C  EC40      9504          asr.w     #6,D0
0000535E  C07C 0003 9505          and.w     #3,D0
00005362  3600      9506          move.w    D0,D3
                    9507   ; if(OpMode != (unsigned short int)(0x0003)) // if size = 11 then it's SUBA not SUBX
00005364  0C43 0003 9508          cmp.w     #3,D3
00005368  6700 008A 9509          beq       DisassembleInstruction_313
                    9510   ; {
                    9511   ; strcpyInstruction("SUBX") ;
0000536C  4879 0000 9512          pea       @m68kde~2_306.L
00005370  775E      
00005372  4E93      9513          jsr       (A3)
00005374  584F      9514          addq.w    #4,A7
                    9515   ; Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
00005376  2042      9516          move.l    D2,A0
00005378  3210      9517          move.w    (A0),D1
0000537A  C2BC 0000 9518          and.l     #65535,D1
0000537E  FFFF      
00005380  2F01      9519          move.l    D1,-(A7)
00005382  4EB8 2E0E 9520          jsr       _Decode2BitOperandSize
00005386  584F      9521          addq.w    #4,A7
                    9522   ; if((*OpCode & (unsigned short int)(0x0008)) == (unsigned short int)(0))    // if bit 3 of opcode is 0 indicates data registers are used as source and destination
00005388  2042      9523          move.l    D2,A0
0000538A  3010      9524          move.w    (A0),D0
0000538C  C07C 0008 9525          and.w     #8,D0
00005390  6600 0030 9526          bne       DisassembleInstruction_315
                    9527   ; sprintf(TempString, "D%1X,D%1X", (*OpCode & 0x0007), ((*OpCode >> 9) & 0x0007)) ;
00005394  2042      9528          move.l    D2,A0
00005396  3210      9529          move.w    (A0),D1
00005398  E041      9530          asr.w     #8,D1
0000539A  E241      9531          asr.w     #1,D1
0000539C  C27C 0007 9532          and.w     #7,D1
000053A0  48C1      9533          ext.l     D1
000053A2  2F01      9534          move.l    D1,-(A7)
000053A4  2042      9535          move.l    D2,A0
000053A6  3210      9536          move.w    (A0),D1
000053A8  C27C 0007 9537          and.w     #7,D1
000053AC  48C1      9538          ext.l     D1
000053AE  2F01      9539          move.l    D1,-(A7)
000053B0  4879 0000 9540          pea       @m68kde~2_307.L
000053B4  7764      
000053B6  2F0C      9541          move.l    A4,-(A7)
000053B8  4E95      9542          jsr       (A5)
000053BA  DEFC 0010 9543          add.w     #16,A7
000053BE  6000 002C 9544          bra       DisassembleInstruction_316
                    9545   DisassembleInstruction_315:
                    9546   ; else        // -(ax),-(ay) mode used
                    9547   ; sprintf(TempString, "-(A%1X),-(A%1X)", (*OpCode & 0x0007), ((*OpCode >> 9) & 0x0007)) ;
000053C2  2042      9548          move.l    D2,A0
000053C4  3210      9549          move.w    (A0),D1
000053C6  E041      9550          asr.w     #8,D1
000053C8  E241      9551          asr.w     #1,D1
000053CA  C27C 0007 9552          and.w     #7,D1
000053CE  48C1      9553          ext.l     D1
000053D0  2F01      9554          move.l    D1,-(A7)
000053D2  2042      9555          move.l    D2,A0
000053D4  3210      9556          move.w    (A0),D1
000053D6  C27C 0007 9557          and.w     #7,D1
000053DA  48C1      9558          ext.l     D1
000053DC  2F01      9559          move.l    D1,-(A7)
000053DE  4879 0000 9560          pea       @m68kde~2_308.L
000053E2  776E      
000053E4  2F0C      9561          move.l    A4,-(A7)
000053E6  4E95      9562          jsr       (A5)
000053E8  DEFC 0010 9563          add.w     #16,A7
                    9564   DisassembleInstruction_316:
                    9565   ; strcatInstruction(TempString) ;
000053EC  2F0C      9566          move.l    A4,-(A7)
000053EE  4EB8 0CCC 9567          jsr       _strcatInstruction
000053F2  584F      9568          addq.w    #4,A7
                    9569   DisassembleInstruction_313:
                    9570   ; }
                    9571   ; }
                    9572   ; /////////////////////////////////////////////////////////////////////////////////
                    9573   ; // if instruction is SWAP
                    9574   ; /////////////////////////////////////////////////////////////////////////////////
                    9575   ; if((*OpCode & (unsigned short int)(0xFFF8 )) == (unsigned short int)(0x4840))
000053F4  2042      9576          move.l    D2,A0
000053F6  3010      9577          move.w    (A0),D0
000053F8  C07C FFF8 9578          and.w     #65528,D0
000053FC  0C40 4840 9579          cmp.w     #18496,D0
00005400  662A      9580          bne.s     DisassembleInstruction_317
                    9581   ; {
                    9582   ; InstructionSize = 1;
00005402  24BC 0000 9583          move.l    #1,(A2)
00005406  0001      
                    9584   ; DataRegister = *OpCode & (unsigned short int)(0x0007) ;
00005408  2042      9585          move.l    D2,A0
0000540A  3010      9586          move.w    (A0),D0
0000540C  C07C 0007 9587          and.w     #7,D0
00005410  3A00      9588          move.w    D0,D5
                    9589   ; sprintf(Instruction, "SWAP D%d", DataRegister) ;
00005412  CABC 0000 9590          and.l     #65535,D5
00005416  FFFF      
00005418  2F05      9591          move.l    D5,-(A7)
0000541A  4879 0000 9592          pea       @m68kde~2_309.L
0000541E  777E      
00005420  4879 0B00 9593          pea       _Instruction.L
00005424  04E2      
00005426  4E95      9594          jsr       (A5)
00005428  DEFC 000C 9595          add.w     #12,A7
                    9596   DisassembleInstruction_317:
                    9597   ; }
                    9598   ; /////////////////////////////////////////////////////////////////////////////////
                    9599   ; // if instruction is TAS
                    9600   ; /////////////////////////////////////////////////////////////////////////////////
                    9601   ; if((*OpCode & (unsigned short int)(0xFFC0 )) == (unsigned short int)(0x4AC0))
0000542C  2042      9602          move.l    D2,A0
0000542E  3010      9603          move.w    (A0),D0
00005430  C07C FFC0 9604          and.w     #65472,D0
00005434  0C40 4AC0 9605          cmp.w     #19136,D0
00005438  662A      9606          bne.s     DisassembleInstruction_321
                    9607   ; {
                    9608   ; if(*OpCode != (unsigned short int)(0x4AFC))
0000543A  2042      9609          move.l    D2,A0
0000543C  3010      9610          move.w    (A0),D0
0000543E  0C40 4AFC 9611          cmp.w     #19196,D0
00005442  6720      9612          beq.s     DisassembleInstruction_321
                    9613   ; {
                    9614   ; InstructionSize = 1;
00005444  24BC 0000 9615          move.l    #1,(A2)
00005448  0001      
                    9616   ; strcpyInstruction("TAS ") ;
0000544A  4879 0000 9617          pea       @m68kde~2_310.L
0000544E  7788      
00005450  4E93      9618          jsr       (A3)
00005452  584F      9619          addq.w    #4,A7
                    9620   ; Decode6BitEA(OpCode,0,0,0) ;
00005454  42A7      9621          clr.l     -(A7)
00005456  42A7      9622          clr.l     -(A7)
00005458  42A7      9623          clr.l     -(A7)
0000545A  2F02      9624          move.l    D2,-(A7)
0000545C  4EB8 30A2 9625          jsr       _Decode6BitEA
00005460  DEFC 0010 9626          add.w     #16,A7
                    9627   DisassembleInstruction_321:
                    9628   ; }
                    9629   ; }
                    9630   ; /////////////////////////////////////////////////////////////////////////////////
                    9631   ; // if instruction is TRAP
                    9632   ; /////////////////////////////////////////////////////////////////////////////////
                    9633   ; if((*OpCode & (unsigned short int)(0xFFF0 )) == (unsigned short int)(0x4E40))   {
00005464  2042      9634          move.l    D2,A0
00005466  3010      9635          move.w    (A0),D0
00005468  C07C FFF0 9636          and.w     #65520,D0
0000546C  0C40 4E40 9637          cmp.w     #20032,D0
00005470  6622      9638          bne.s     DisassembleInstruction_323
                    9639   ; sprintf(Instruction, "TRAP #%d", *OpCode & (unsigned short int)(0x000F)) ;
00005472  2042      9640          move.l    D2,A0
00005474  3210      9641          move.w    (A0),D1
00005476  C27C 000F 9642          and.w     #15,D1
0000547A  C2BC 0000 9643          and.l     #65535,D1
0000547E  FFFF      
00005480  2F01      9644          move.l    D1,-(A7)
00005482  4879 0000 9645          pea       @m68kde~2_311.L
00005486  778E      
00005488  4879 0B00 9646          pea       _Instruction.L
0000548C  04E2      
0000548E  4E95      9647          jsr       (A5)
00005490  DEFC 000C 9648          add.w     #12,A7
                    9649   DisassembleInstruction_323:
                    9650   ; }
                    9651   ; /////////////////////////////////////////////////////////////////////////////////
                    9652   ; // if instruction is TRAPV
                    9653   ; /////////////////////////////////////////////////////////////////////////////////
                    9654   ; if(*OpCode == (unsigned short int)(0x4E76))
00005494  2042      9655          move.l    D2,A0
00005496  3010      9656          move.w    (A0),D0
00005498  0C40 4E76 9657          cmp.w     #20086,D0
0000549C  6610      9658          bne.s     DisassembleInstruction_325
                    9659   ; {
                    9660   ; InstructionSize = 1;
0000549E  24BC 0000 9661          move.l    #1,(A2)
000054A2  0001      
                    9662   ; strcpyInstruction("TRAPV") ;
000054A4  4879 0000 9663          pea       @m68kde~2_312.L
000054A8  7798      
000054AA  4E93      9664          jsr       (A3)
000054AC  584F      9665          addq.w    #4,A7
                    9666   DisassembleInstruction_325:
                    9667   ; }
                    9668   ; /////////////////////////////////////////////////////////////////////////////////
                    9669   ; // if instruction is TST
                    9670   ; /////////////////////////////////////////////////////////////////////////////////
                    9671   ; if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x4A00))
000054AE  2042      9672          move.l    D2,A0
000054B0  3010      9673          move.w    (A0),D0
000054B2  C07C FF00 9674          and.w     #65280,D0
000054B6  0C40 4A00 9675          cmp.w     #18944,D0
000054BA  6600 005A 9676          bne       DisassembleInstruction_329
                    9677   ; {
                    9678   ; Size = (*OpCode >> 6) & (unsigned short int)(0x0003) ;
000054BE  2042      9679          move.l    D2,A0
000054C0  3010      9680          move.w    (A0),D0
000054C2  EC40      9681          asr.w     #6,D0
000054C4  C07C 0003 9682          and.w     #3,D0
000054C8  3D40 FFE2 9683          move.w    D0,-30(A6)
                    9684   ; if((*OpCode != (unsigned short int)(0x4AFC)) && (Size != (unsigned short int)(0x0003)))       { // test for size to eliminate TAS instruction which shares similar opcode
000054CC  2042      9685          move.l    D2,A0
000054CE  3010      9686          move.w    (A0),D0
000054D0  0C40 4AFC 9687          cmp.w     #19196,D0
000054D4  6700 0040 9688          beq       DisassembleInstruction_329
000054D8  302E FFE2 9689          move.w    -30(A6),D0
000054DC  0C40 0003 9690          cmp.w     #3,D0
000054E0  6700 0034 9691          beq       DisassembleInstruction_329
                    9692   ; InstructionSize = 1;
000054E4  24BC 0000 9693          move.l    #1,(A2)
000054E8  0001      
                    9694   ; strcpyInstruction("TST") ;
000054EA  4879 0000 9695          pea       @m68kde~2_313.L
000054EE  779E      
000054F0  4E93      9696          jsr       (A3)
000054F2  584F      9697          addq.w    #4,A7
                    9698   ; Decode2BitOperandSize(*OpCode) ;
000054F4  2042      9699          move.l    D2,A0
000054F6  3210      9700          move.w    (A0),D1
000054F8  C2BC 0000 9701          and.l     #65535,D1
000054FC  FFFF      
000054FE  2F01      9702          move.l    D1,-(A7)
00005500  4EB8 2E0E 9703          jsr       _Decode2BitOperandSize
00005504  584F      9704          addq.w    #4,A7
                    9705   ; Decode6BitEA(OpCode,0,0,0) ;
00005506  42A7      9706          clr.l     -(A7)
00005508  42A7      9707          clr.l     -(A7)
0000550A  42A7      9708          clr.l     -(A7)
0000550C  2F02      9709          move.l    D2,-(A7)
0000550E  4EB8 30A2 9710          jsr       _Decode6BitEA
00005512  DEFC 0010 9711          add.w     #16,A7
                    9712   DisassembleInstruction_329:
                    9713   ; }
                    9714   ; }
                    9715   ; /////////////////////////////////////////////////////////////////////////////////
                    9716   ; // if instruction is UNLK
                    9717   ; //////////////////////////////////////////////////////////
                    9718   ; if((*OpCode & (unsigned short int)(0xFFF8 )) == (unsigned short int)(0x4E58))
00005516  2042      9719          move.l    D2,A0
00005518  3010      9720          move.w    (A0),D0
0000551A  C07C FFF8 9721          and.w     #65528,D0
0000551E  0C40 4E58 9722          cmp.w     #20056,D0
00005522  6628      9723          bne.s     DisassembleInstruction_331
                    9724   ; {
                    9725   ; InstructionSize = 1;
00005524  24BC 0000 9726          move.l    #1,(A2)
00005528  0001      
                    9727   ; sprintf(Instruction, "UNLK A%d", *OpCode & (unsigned short int)(0x0007)) ;
0000552A  2042      9728          move.l    D2,A0
0000552C  3210      9729          move.w    (A0),D1
0000552E  C27C 0007 9730          and.w     #7,D1
00005532  C2BC 0000 9731          and.l     #65535,D1
00005536  FFFF      
00005538  2F01      9732          move.l    D1,-(A7)
0000553A  4879 0000 9733          pea       @m68kde~2_314.L
0000553E  77A2      
00005540  4879 0B00 9734          pea       _Instruction.L
00005544  04E2      
00005546  4E95      9735          jsr       (A5)
00005548  DEFC 000C 9736          add.w     #12,A7
                    9737   DisassembleInstruction_331:
                    9738   ; }
                    9739   ; FormatInstruction() ;
0000554C  4EB8 2D7C 9740          jsr       _FormatInstruction
00005550  4CDF 3CFC 9741          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00005554  4E5E      9742          unlk      A6
00005556  4E75      9743          rts
                    9744   ; }
                    9745   _strcpy:
00005558  206F 0004 9746          move.l    (4,A7),A0
0000555C  226F 0008 9747          move.l    (8,A7),A1
00005560  2008      9748          move.l    A0,D0
                    9749   strcpy_1:
00005562  10D9      9750          move.b    (A1)+,(A0)+
00005564  66FC      9751          bne       strcpy_1
00005566  4E75      9752          rts
                    9753   ULDIV:
00005568  4E56 0000 9754          link    A6,#0
0000556C  48E7 C000 9755          movem.l D0/D1,-(A7)
00005570  222E 0008 9756          move.l  8(A6),D1
00005574  202E 000C 9757          move.l  12(A6),D0
00005578  6036      9758          bra.s   ldiv_3
                    9759   LDIV:
0000557A  4E56 0000 9760          link    A6,#0
0000557E  48E7 C000 9761          movem.l D0/D1,-(A7)
00005582  222E 0008 9762          move.l  8(A6),D1
00005586  202E 000C 9763          move.l  12(A6),D0
0000558A  4A80      9764          tst.l   D0
0000558C  6A0E      9765          bpl.s   ldiv_1
0000558E  4480      9766          neg.l   D0
00005590  4A81      9767          tst.l   D1
00005592  6A14      9768          bpl.s   ldiv_2
00005594  4481      9769          neg.l   D1
00005596  612A      9770          bsr.s   dodiv
00005598  4481      9771          neg.l   D1
0000559A  6016      9772          bra.s   ldiv_4
                    9773   ldiv_1:
0000559C  4A81      9774          tst.l   D1
0000559E  6A10      9775          bpl.s   ldiv_3
000055A0  4481      9776          neg.l   D1
000055A2  611E      9777          bsr.s   dodiv
000055A4  4480      9778          neg.l   D0
000055A6  600A      9779          bra.s   ldiv_4
                    9780   ldiv_2:
000055A8  6118      9781          bsr.s   dodiv
000055AA  4480      9782          neg.l   D0
000055AC  4481      9783          neg.l   D1
000055AE  6002      9784          bra.s   ldiv_4
                    9785   ldiv_3:
000055B0  6110      9786          bsr.s   dodiv
                    9787   ldiv_4:
000055B2  2D40 0008 9788          move.l  D0,8(A6)
000055B6  2D41 000C 9789          move.l  D1,12(A6)
000055BA  4CDF 0003 9790          movem.l (A7)+,D0/D1
000055BE  4E5E      9791          unlk    A6
000055C0  4E75      9792          rts
                    9793   dodiv:
000055C2  0C81 0000 9794          cmpi.l  #$FFFF,D1
000055C6  FFFF      
000055C8  6236      9795          bhi.s   dodiv_2
000055CA  0C80 0000 9796          cmpi.l  #$FFFF,D0
000055CE  FFFF      
000055D0  6210      9797          bhi.s   dodiv_1
000055D2  80C1      9798          divu    D1,D0
000055D4  2200      9799          move.l  D0,D1
000055D6  4241      9800          clr.w   D1
000055D8  4841      9801          swap    D1
000055DA  0280 0000 9802          andi.l  #$FFFF,D0
000055DE  FFFF      
000055E0  4E75      9803          rts
                    9804   dodiv_1:
000055E2  48A7 A000 9805          movem.w D0/D2,-(A7)
000055E6  4240      9806          clr.w   D0
000055E8  4840      9807          swap    D0
000055EA  80C1      9808          divu    D1,D0
000055EC  3400      9809          move.w  D0,D2
000055EE  301F      9810          move.w  (A7)+,D0
000055F0  80C1      9811          divu    D1,D0
000055F2  4840      9812          swap    D0
000055F4  4281      9813          clr.l   D1
000055F6  3200      9814          move.w  D0,D1
000055F8  3002      9815          move.w  D2,D0
000055FA  4840      9816          swap    D0
000055FC  341F      9817          move.w  (A7)+,D2
000055FE  4E75      9818          rts
                    9819   dodiv_2:
00005600  48E7 3800 9820          movem.l D2/D3/D4,-(A7)
00005604  2401      9821          move.l  D1,D2
00005606  4242      9822          clr.w   D2
00005608  4842      9823          swap    D2
0000560A  5282      9824          addq.l  #1,D2
0000560C  2600      9825          move.l  D0,D3
0000560E  2801      9826          move.l  D1,D4
00005610  2202      9827          move.l  D2,D1
00005612  61CE      9828          bsr.s   dodiv_1
00005614  2204      9829          move.l  D4,D1
00005616  82C2      9830          divu    D2,D1
00005618  80C1      9831          divu    D1,D0
0000561A  0280 0000 9832          andi.l  #$FFFF,D0
0000561E  FFFF      
                    9833   dodiv_3:
00005620  2204      9834          move.l  D4,D1
00005622  2404      9835          move.l  D4,D2
00005624  4842      9836          swap    D2
00005626  C2C0      9837          mulu    D0,D1
00005628  C4C0      9838          mulu    D0,D2
0000562A  4842      9839          swap    D2
0000562C  D282      9840          add.l   D2,D1
0000562E  9283      9841          sub.l   D3,D1
00005630  620A      9842          bhi.s   dodiv_4
00005632  4481      9843          neg.l   D1
00005634  B881      9844          cmp.l   D1,D4
00005636  6208      9845          bhi.s   dodiv_5
00005638  5280      9846          addq.l  #1,D0
0000563A  60E4      9847          bra.s   dodiv_3
                    9848   dodiv_4:
0000563C  5380      9849          subq.l  #1,D0
0000563E  60E0      9850          bra.s   dodiv_3
                    9851   dodiv_5:
00005640  4CDF 001C 9852          movem.l (A7)+,D2/D3/D4
00005644  4E75      9853          rts
                    9854   _putch:
00005646  4E56 0000 9855          link      A6,#0
0000564A  48E7 2000 9856          movem.l   D2,-(A7)
0000564E  242E 0008 9857          move.l    8(A6),D2
00005652  0C82 0000 9858          cmp.l     #10,D2
00005656  000A      
00005658  660A      9859          bne.s     putch_1
0000565A  4878 000D 9860          pea       13
0000565E  6100 B4DC 9861          bsr       __putch
00005662  584F      9862          addq.w    #4,A7
                    9863   putch_1:
00005664  2F02      9864          move.l    D2,-(A7)
00005666  6100 B4D4 9865          bsr       __putch
0000566A  584F      9866          addq.w    #4,A7
0000566C  2002      9867          move.l    D2,D0
0000566E  4CDF 0004 9868          movem.l   (A7)+,D2
00005672  4E5E      9869          unlk      A6
00005674  4E75      9870          rts
                    9871   _tolower:
00005676  4E56 0000 9872          link      A6,#0
0000567A  48E7 2000 9873          movem.l   D2,-(A7)
0000567E  242E 0008 9874          move.l    8(A6),D2
00005682  0C82 0000 9875          cmp.l     #65,D2
00005686  0041      
00005688  6D0E      9876          blt.s     tolower_1
0000568A  0C82 0000 9877          cmp.l     #90,D2
0000568E  005A      
00005690  6E06      9878          bgt.s     tolower_1
00005692  84BC 0000 9879          or.l      #32,D2
00005696  0020      
                    9880   tolower_1:
00005698  2002      9881          move.l    D2,D0
0000569A  4CDF 0004 9882          movem.l   (A7)+,D2
0000569E  4E5E      9883          unlk      A6
000056A0  4E75      9884          rts
                    9885   _sprintf:
000056A2  4E56 FFFC 9886          link      A6,#-4
000056A6  48E7 2000 9887          movem.l   D2,-(A7)
000056AA  41EE 000C 9888          lea       12(A6),A0
000056AE  5848      9889          addq.w    #4,A0
000056B0  2408      9890          move.l    A0,D2
000056B2  2F02      9891          move.l    D2,-(A7)
000056B4  2F2E 000C 9892          move.l    12(A6),-(A7)
000056B8  2F2E 0008 9893          move.l    8(A6),-(A7)
000056BC  6100 017C 9894          bsr       _vsprintf
000056C0  DEFC 000C 9895          add.w     #12,A7
000056C4  2D40 FFFC 9896          move.l    D0,-4(A6)
000056C8  4282      9897          clr.l     D2
000056CA  202E FFFC 9898          move.l    -4(A6),D0
000056CE  4CDF 0004 9899          movem.l   (A7)+,D2
000056D2  4E5E      9900          unlk      A6
000056D4  4E75      9901          rts
                    9902   _strcat:
000056D6  206F 0004 9903          move.l    (4,A7),A0	
000056DA  226F 0008 9904          move.l    (8,A7),A1	
000056DE  2008      9905          move.l    A0,D0		
                    9906   strcat_0:
000056E0  4A18      9907          tst.b     (A0)+
000056E2  66FC      9908          bne       strcat_0
000056E4  5348      9909          subq      #1,A0
                    9910   strcat_1:
000056E6  10D9      9911          move.b    (A1)+,(A0)+
000056E8  66FC      9912          bne       strcat_1
000056EA  4E75      9913          rts
                    9914   _toupper:
000056EC  4E56 0000 9915          link      A6,#0
000056F0  48E7 2000 9916          movem.l   D2,-(A7)
000056F4  242E 0008 9917          move.l    8(A6),D2
000056F8  0C82 0000 9918          cmp.l     #97,D2
000056FC  0061      
000056FE  6D0E      9919          blt.s     toupper_1
00005700  0C82 0000 9920          cmp.l     #122,D2
00005704  007A      
00005706  6E06      9921          bgt.s     toupper_1
00005708  C4BC 0000 9922          and.l     #95,D2
0000570C  005F      
                    9923   toupper_1:
0000570E  2002      9924          move.l    D2,D0
00005710  4CDF 0004 9925          movem.l   (A7)+,D2
00005714  4E5E      9926          unlk      A6
00005716  4E75      9927          rts
                    9928   _getche:
00005718  48E7 2020 9929          movem.l   D2/A2,-(A7)
0000571C  45F9 0B00 9930          lea       __ungetbuf,A2
00005720  00C0      
00005722  2012      9931          move.l    (A2),D0
00005724  0C80 FFFF 9932          cmp.l     #-1,D0
00005728  FFFF      
0000572A  661A      9933          bne.s     getche_1
0000572C  6100 B43A 9934          bsr       __getch
00005730  2400      9935          move.l    D0,D2
00005732  0C80 0000 9936          cmp.l     #13,D0
00005736  000D      
00005738  6602      9937          bne.s     getche_3
0000573A  740A      9938          moveq     #10,D2
                    9939   getche_3:
0000573C  2F02      9940          move.l    D2,-(A7)
0000573E  6100 FF06 9941          bsr       _putch
00005742  584F      9942          addq.w    #4,A7
00005744  6008      9943          bra.s     getche_2
                    9944   getche_1:
00005746  2412      9945          move.l    (A2),D2
00005748  24BC FFFF 9946          move.l    #-1,(A2)
0000574C  FFFF      
                    9947   getche_2:
0000574E  2002      9948          move.l    D2,D0
00005750  4CDF 0404 9949          movem.l   (A7)+,D2/A2
00005754  4E75      9950          rts
                    9951   _printf:
00005756  4E56 FFFC 9952          link      A6,#-4
0000575A  48E7 2000 9953          movem.l   D2,-(A7)
0000575E  41EE 0008 9954          lea       8(A6),A0
00005762  5848      9955          addq.w    #4,A0
00005764  2408      9956          move.l    A0,D2
00005766  2F02      9957          move.l    D2,-(A7)
00005768  2F2E 0008 9958          move.l    8(A6),-(A7)
0000576C  42A7      9959          clr.l     -(A7)
0000576E  6100 00CA 9960          bsr       _vsprintf
00005772  DEFC 000C 9961          add.w     #12,A7
00005776  2D40 FFFC 9962          move.l    D0,-4(A6)
0000577A  4282      9963          clr.l     D2
0000577C  202E FFFC 9964          move.l    -4(A6),D0
00005780  4CDF 0004 9965          movem.l   (A7)+,D2
00005784  4E5E      9966          unlk      A6
00005786  4E75      9967          rts
                    9968   @vsprintf_copy:
00005788  4E56 0000 9969          link      A6,#0
0000578C  206E 0008 9970          move.l    8(A6),A0
00005790  4A90      9971          tst.l     (A0)
00005792  6710      9972          beq.s     @vsprintf_copy_1
00005794  202E 000C 9973          move.l    12(A6),D0
00005798  206E 0008 9974          move.l    8(A6),A0
0000579C  2250      9975          move.l    (A0),A1
0000579E  5290      9976          addq.l    #1,(A0)
000057A0  1280      9977          move.b    D0,(A1)
000057A2  600A      9978          bra.s     @vsprintf_copy_2
                    9979   @vsprintf_copy_1:
000057A4  2F2E 000C 9980          move.l    12(A6),-(A7)
000057A8  6100 FE9C 9981          bsr       _putch
000057AC  584F      9982          addq.w    #4,A7
                    9983   @vsprintf_copy_2:
000057AE  4E5E      9984          unlk      A6
000057B0  4E75      9985          rts
                    9986   @vsprintf_getval:
000057B2  4E56 0000 9987          link      A6,#0
000057B6  48E7 3000 9988          movem.l   D2/D3,-(A7)
000057BA  242E 0008 9989          move.l    8(A6),D2
000057BE  4283      9990          clr.l     D3
000057C0  2042      9991          move.l    D2,A0
000057C2  2050      9992          move.l    (A0),A0
000057C4  1010      9993          move.b    (A0),D0
000057C6  4880      9994          ext.w     D0
000057C8  48C0      9995          ext.l     D0
000057CA  0C80 0000 9996          cmp.l     #42,D0
000057CE  002A      
000057D0  6612      9997          bne.s     @vsprintf_getval_1
000057D2  206E 000C 9998          move.l    12(A6),A0
000057D6  2250      9999          move.l    (A0),A1
000057D8  5890      10000          addq.l    #4,(A0)
000057DA  2611      10001          move.l    (A1),D3
000057DC  2042      10002          move.l    D2,A0
000057DE  5290      10003          addq.l    #1,(A0)
000057E0  6000 004E 10004          bra       @vsprintf_getval_5
                    10005   @vsprintf_getval_1:
000057E4  2042      10006          move.l    D2,A0
000057E6  2050      10007          move.l    (A0),A0
000057E8  1010      10008          move.b    (A0),D0
000057EA  4880      10009          ext.w     D0
000057EC  48C0      10010          ext.l     D0
000057EE  0C80 0000 10011          cmp.l     #48,D0
000057F2  0030      
000057F4  6D00 003A 10012          blt       @vsprintf_getval_5
000057F8  2042      10013          move.l    D2,A0
000057FA  2050      10014          move.l    (A0),A0
000057FC  1010      10015          move.b    (A0),D0
000057FE  4880      10016          ext.w     D0
00005800  48C0      10017          ext.l     D0
00005802  0C80 0000 10018          cmp.l     #57,D0
00005806  0039      
00005808  6E26      10019          bgt.s     @vsprintf_getval_5
0000580A  2F03      10020          move.l    D3,-(A7)
0000580C  4878 000A 10021          pea       10
00005810  6100 07F4 10022          bsr       LMUL
00005814  2017      10023          move.l    (A7),D0
00005816  504F      10024          addq.w    #8,A7
00005818  2042      10025          move.l    D2,A0
0000581A  2250      10026          move.l    (A0),A1
0000581C  5290      10027          addq.l    #1,(A0)
0000581E  1211      10028          move.b    (A1),D1
00005820  4881      10029          ext.w     D1
00005822  48C1      10030          ext.l     D1
00005824  D081      10031          add.l     D1,D0
00005826  0480 0000 10032          sub.l     #48,D0
0000582A  0030      
0000582C  2600      10033          move.l    D0,D3
0000582E  60B4      10034          bra       @vsprintf_getval_1
                    10035   @vsprintf_getval_5:
00005830  2003      10036          move.l    D3,D0
00005832  4CDF 000C 10037          movem.l   (A7)+,D2/D3
00005836  4E5E      10038          unlk      A6
00005838  4E75      10039          rts
                    10040   _vsprintf:
0000583A  4E56 FFCC 10041          link      A6,#-52
0000583E  48E7 3F3C 10042          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00005842  45EE 0008 10043          lea       8(A6),A2
00005846  47F8 5788 10044          lea       @vsprintf_copy,A3
0000584A  49F9 0000 10045          lea       _ultoa,A4
0000584E  5F92      
00005850  4286      10046          clr.l     D6
                    10047   vsprintf_1:
00005852  206E 000C 10048          move.l    12(A6),A0
00005856  4A10      10049          tst.b     (A0)
00005858  6700 0624 10050          beq       vsprintf_3
0000585C  206E 000C 10051          move.l    12(A6),A0
00005860  1010      10052          move.b    (A0),D0
00005862  4880      10053          ext.w     D0
00005864  48C0      10054          ext.l     D0
00005866  0C80 0000 10055          cmp.l     #37,D0
0000586A  0025      
0000586C  671C      10056          beq.s     vsprintf_4
0000586E  206E 000C 10057          move.l    12(A6),A0
00005872  52AE 000C 10058          addq.l    #1,12(A6)
00005876  1210      10059          move.b    (A0),D1
00005878  4881      10060          ext.w     D1
0000587A  48C1      10061          ext.l     D1
0000587C  2F01      10062          move.l    D1,-(A7)
0000587E  2F0A      10063          move.l    A2,-(A7)
00005880  4E93      10064          jsr       (A3)
00005882  504F      10065          addq.w    #8,A7
00005884  5286      10066          addq.l    #1,D6
00005886  6000 05F2 10067          bra       vsprintf_2
                    10068   vsprintf_4:
0000588A  52AE 000C 10069          addq.l    #1,12(A6)
0000588E  422E FFD3 10070          clr.b     -45(A6)
00005892  422E FFD2 10071          clr.b     -46(A6)
00005896  422E FFD0 10072          clr.b     -48(A6)
0000589A  422E FFCF 10073          clr.b     -49(A6)
0000589E  422E FFCE 10074          clr.b     -50(A6)
000058A2  422E FFCD 10075          clr.b     -51(A6)
000058A6  42AE FFFC 10076          clr.l     -4(A6)
000058AA  7AFF      10077          moveq     #-1,D5
000058AC  41EE FFDC 10078          lea       -36(A6),A0
000058B0  2608      10079          move.l    A0,D3
000058B2  2408      10080          move.l    A0,D2
                    10081   vsprintf_6:
000058B4  206E 000C 10082          move.l    12(A6),A0
000058B8  1010      10083          move.b    (A0),D0
000058BA  4880      10084          ext.w     D0
000058BC  48C0      10085          ext.l     D0
000058BE  0C80 0000 10086          cmp.l     #43,D0
000058C2  002B      
000058C4  6730      10087          beq.s     vsprintf_12
000058C6  6E18      10088          bgt.s     vsprintf_15
000058C8  0C80 0000 10089          cmp.l     #35,D0
000058CC  0023      
000058CE  6700 003E 10090          beq       vsprintf_14
000058D2  6E00 0046 10091          bgt       vsprintf_9
000058D6  0C80 0000 10092          cmp.l     #32,D0
000058DA  0020      
000058DC  6724      10093          beq.s     vsprintf_13
000058DE  603A      10094          bra.s     vsprintf_9
                    10095   vsprintf_15:
000058E0  0C80 0000 10096          cmp.l     #45,D0
000058E4  002D      
000058E6  6702      10097          beq.s     vsprintf_11
000058E8  6030      10098          bra.s     vsprintf_9
                    10099   vsprintf_11:
000058EA  1D7C 0001 10100          move.b    #1,-51(A6)
000058EE  FFCD      
000058F0  52AE 000C 10101          addq.l    #1,12(A6)
000058F4  6026      10102          bra.s     vsprintf_7
                    10103   vsprintf_12:
000058F6  1D7C 0001 10104          move.b    #1,-50(A6)
000058FA  FFCE      
000058FC  52AE 000C 10105          addq.l    #1,12(A6)
00005900  601A      10106          bra.s     vsprintf_7
                    10107   vsprintf_13:
00005902  1D7C 0001 10108          move.b    #1,-49(A6)
00005906  FFCF      
00005908  52AE 000C 10109          addq.l    #1,12(A6)
0000590C  600E      10110          bra.s     vsprintf_7
                    10111   vsprintf_14:
0000590E  1D7C 0001 10112          move.b    #1,-48(A6)
00005912  FFD0      
00005914  52AE 000C 10113          addq.l    #1,12(A6)
00005918  6002      10114          bra.s     vsprintf_7
                    10115   vsprintf_9:
0000591A  6002      10116          bra.s     vsprintf_8
                    10117   vsprintf_7:
0000591C  6096      10118          bra       vsprintf_6
                    10119   vsprintf_8:
0000591E  206E 000C 10120          move.l    12(A6),A0
00005922  1010      10121          move.b    (A0),D0
00005924  4880      10122          ext.w     D0
00005926  48C0      10123          ext.l     D0
00005928  0C80 0000 10124          cmp.l     #48,D0
0000592C  0030      
0000592E  660A      10125          bne.s     vsprintf_16
00005930  52AE 000C 10126          addq.l    #1,12(A6)
00005934  1D7C 0001 10127          move.b    #1,-46(A6)
00005938  FFD2      
                    10128   vsprintf_16:
0000593A  486E 0010 10129          pea       16(A6)
0000593E  486E 000C 10130          pea       12(A6)
00005942  6100 FE6E 10131          bsr       @vsprintf_getval
00005946  504F      10132          addq.w    #8,A7
00005948  2A40      10133          move.l    D0,A5
0000594A  206E 000C 10134          move.l    12(A6),A0
0000594E  1010      10135          move.b    (A0),D0
00005950  4880      10136          ext.w     D0
00005952  48C0      10137          ext.l     D0
00005954  0C80 0000 10138          cmp.l     #46,D0
00005958  002E      
0000595A  6614      10139          bne.s     vsprintf_18
0000595C  52AE 000C 10140          addq.l    #1,12(A6)
00005960  486E 0010 10141          pea       16(A6)
00005964  486E 000C 10142          pea       12(A6)
00005968  6100 FE48 10143          bsr       @vsprintf_getval
0000596C  504F      10144          addq.w    #8,A7
0000596E  2A00      10145          move.l    D0,D5
                    10146   vsprintf_18:
00005970  206E 000C 10147          move.l    12(A6),A0
00005974  1010      10148          move.b    (A0),D0
00005976  4880      10149          ext.w     D0
00005978  48C0      10150          ext.l     D0
0000597A  0C80 0000 10151          cmp.l     #108,D0
0000597E  006C      
00005980  660A      10152          bne.s     vsprintf_20
00005982  52AE 000C 10153          addq.l    #1,12(A6)
00005986  1D7C 0001 10154          move.b    #1,-45(A6)
0000598A  FFD3      
                    10155   vsprintf_20:
0000598C  206E 000C 10156          move.l    12(A6),A0
00005990  1010      10157          move.b    (A0),D0
00005992  4880      10158          ext.w     D0
00005994  48C0      10159          ext.l     D0
00005996  0C80 0000 10160          cmp.l     #111,D0
0000599A  006F      
0000599C  6700 00D4 10161          beq       vsprintf_27
000059A0  6E34      10162          bgt.s     vsprintf_33
000059A2  0C80 0000 10163          cmp.l     #100,D0
000059A6  0064      
000059A8  6700 0054 10164          beq       vsprintf_24
000059AC  6E1C      10165          bgt.s     vsprintf_34
000059AE  0C80 0000 10166          cmp.l     #99,D0
000059B2  0063      
000059B4  6700 012C 10167          beq       vsprintf_30
000059B8  6E00 016A 10168          bgt       vsprintf_22
000059BC  0C80 0000 10169          cmp.l     #88,D0
000059C0  0058      
000059C2  6700 00E6 10170          beq       vsprintf_28
000059C6  6000 015C 10171          bra       vsprintf_22
                    10172   vsprintf_34:
000059CA  0C80 0000 10173          cmp.l     #105,D0
000059CE  0069      
000059D0  672C      10174          beq.s     vsprintf_24
000059D2  6000 0150 10175          bra       vsprintf_22
                    10176   vsprintf_33:
000059D6  0C80 0000 10177          cmp.l     #117,D0
000059DA  0075      
000059DC  6700 005C 10178          beq       vsprintf_26
000059E0  6E0E      10179          bgt.s     vsprintf_35
000059E2  0C80 0000 10180          cmp.l     #115,D0
000059E6  0073      
000059E8  6700 011C 10181          beq       vsprintf_31
000059EC  6000 0136 10182          bra       vsprintf_22
                    10183   vsprintf_35:
000059F0  0C80 0000 10184          cmp.l     #120,D0
000059F4  0078      
000059F6  6700 00B2 10185          beq       vsprintf_28
000059FA  6000 0128 10186          bra       vsprintf_22
                    10187   vsprintf_24:
000059FE  4A2E FFD3 10188          tst.b     -45(A6)
00005A02  671A      10189          beq.s     vsprintf_36
00005A04  4878 000A 10190          pea       10
00005A08  2F03      10191          move.l    D3,-(A7)
00005A0A  206E 0010 10192          move.l    16(A6),A0
00005A0E  58AE 0010 10193          addq.l    #4,16(A6)
00005A12  2F10      10194          move.l    (A0),-(A7)
00005A14  6100 04F8 10195          bsr       _ltoa
00005A18  DEFC 000C 10196          add.w     #12,A7
00005A1C  6018      10197          bra.s     vsprintf_37
                    10198   vsprintf_36:
00005A1E  4878 000A 10199          pea       10
00005A22  2F03      10200          move.l    D3,-(A7)
00005A24  206E 0010 10201          move.l    16(A6),A0
00005A28  58AE 0010 10202          addq.l    #4,16(A6)
00005A2C  2F10      10203          move.l    (A0),-(A7)
00005A2E  6100 04DE 10204          bsr       _ltoa
00005A32  DEFC 000C 10205          add.w     #12,A7
                    10206   vsprintf_37:
00005A36  6000 00FA 10207          bra       vsprintf_23
                    10208   vsprintf_26:
00005A3A  4A2E FFD3 10209          tst.b     -45(A6)
00005A3E  6718      10210          beq.s     vsprintf_38
00005A40  4878 000A 10211          pea       10
00005A44  2F03      10212          move.l    D3,-(A7)
00005A46  206E 0010 10213          move.l    16(A6),A0
00005A4A  58AE 0010 10214          addq.l    #4,16(A6)
00005A4E  2F10      10215          move.l    (A0),-(A7)
00005A50  4E94      10216          jsr       (A4)
00005A52  DEFC 000C 10217          add.w     #12,A7
00005A56  6016      10218          bra.s     vsprintf_39
                    10219   vsprintf_38:
00005A58  4878 000A 10220          pea       10
00005A5C  2F03      10221          move.l    D3,-(A7)
00005A5E  206E 0010 10222          move.l    16(A6),A0
00005A62  58AE 0010 10223          addq.l    #4,16(A6)
00005A66  2F10      10224          move.l    (A0),-(A7)
00005A68  4E94      10225          jsr       (A4)
00005A6A  DEFC 000C 10226          add.w     #12,A7
                    10227   vsprintf_39:
00005A6E  6000 00C2 10228          bra       vsprintf_23
                    10229   vsprintf_27:
00005A72  4A2E FFD3 10230          tst.b     -45(A6)
00005A76  6718      10231          beq.s     vsprintf_40
00005A78  4878 0008 10232          pea       8
00005A7C  2F03      10233          move.l    D3,-(A7)
00005A7E  206E 0010 10234          move.l    16(A6),A0
00005A82  58AE 0010 10235          addq.l    #4,16(A6)
00005A86  2F10      10236          move.l    (A0),-(A7)
00005A88  4E94      10237          jsr       (A4)
00005A8A  DEFC 000C 10238          add.w     #12,A7
00005A8E  6016      10239          bra.s     vsprintf_41
                    10240   vsprintf_40:
00005A90  4878 0008 10241          pea       8
00005A94  2F03      10242          move.l    D3,-(A7)
00005A96  206E 0010 10243          move.l    16(A6),A0
00005A9A  58AE 0010 10244          addq.l    #4,16(A6)
00005A9E  2F10      10245          move.l    (A0),-(A7)
00005AA0  4E94      10246          jsr       (A4)
00005AA2  DEFC 000C 10247          add.w     #12,A7
                    10248   vsprintf_41:
00005AA6  6000 008A 10249          bra       vsprintf_23
                    10250   vsprintf_28:
00005AAA  4A2E FFD3 10251          tst.b     -45(A6)
00005AAE  6718      10252          beq.s     vsprintf_42
00005AB0  4878 0010 10253          pea       16
00005AB4  2F03      10254          move.l    D3,-(A7)
00005AB6  206E 0010 10255          move.l    16(A6),A0
00005ABA  58AE 0010 10256          addq.l    #4,16(A6)
00005ABE  2F10      10257          move.l    (A0),-(A7)
00005AC0  4E94      10258          jsr       (A4)
00005AC2  DEFC 000C 10259          add.w     #12,A7
00005AC6  6016      10260          bra.s     vsprintf_43
                    10261   vsprintf_42:
00005AC8  4878 0010 10262          pea       16
00005ACC  2F03      10263          move.l    D3,-(A7)
00005ACE  206E 0010 10264          move.l    16(A6),A0
00005AD2  58AE 0010 10265          addq.l    #4,16(A6)
00005AD6  2F10      10266          move.l    (A0),-(A7)
00005AD8  4E94      10267          jsr       (A4)
00005ADA  DEFC 000C 10268          add.w     #12,A7
                    10269   vsprintf_43:
00005ADE  6000 0052 10270          bra       vsprintf_23
                    10271   vsprintf_30:
00005AE2  206E 0010 10272          move.l    16(A6),A0
00005AE6  58AE 0010 10273          addq.l    #4,16(A6)
00005AEA  2010      10274          move.l    (A0),D0
00005AEC  2042      10275          move.l    D2,A0
00005AEE  5282      10276          addq.l    #1,D2
00005AF0  1080      10277          move.b    D0,(A0)
00005AF2  2042      10278          move.l    D2,A0
00005AF4  4210      10279          clr.b     (A0)
00005AF6  200D      10280          move.l    A5,D0
00005AF8  6704      10281          beq.s     vsprintf_44
00005AFA  200D      10282          move.l    A5,D0
00005AFC  6002      10283          bra.s     vsprintf_45
                    10284   vsprintf_44:
00005AFE  7001      10285          moveq     #1,D0
                    10286   vsprintf_45:
00005B00  2A00      10287          move.l    D0,D5
00005B02  6000 002E 10288          bra       vsprintf_23
                    10289   vsprintf_31:
00005B06  206E 0010 10290          move.l    16(A6),A0
00005B0A  58AE 0010 10291          addq.l    #4,16(A6)
00005B0E  2610      10292          move.l    (A0),D3
00005B10  0C85 FFFF 10293          cmp.l     #-1,D5
00005B14  FFFF      
00005B16  660A      10294          bne.s     vsprintf_46
00005B18  2F03      10295          move.l    D3,-(A7)
00005B1A  6100 0578 10296          bsr       _strlen
00005B1E  584F      10297          addq.w    #4,A7
00005B20  2A00      10298          move.l    D0,D5
                    10299   vsprintf_46:
00005B22  600E      10300          bra.s     vsprintf_23
                    10301   vsprintf_22:
00005B24  206E 000C 10302          move.l    12(A6),A0
00005B28  2242      10303          move.l    D2,A1
00005B2A  5282      10304          addq.l    #1,D2
00005B2C  1290      10305          move.b    (A0),(A1)
00005B2E  2042      10306          move.l    D2,A0
00005B30  4210      10307          clr.b     (A0)
                    10308   vsprintf_23:
00005B32  2F03      10309          move.l    D3,-(A7)
00005B34  6100 055E 10310          bsr       _strlen
00005B38  584F      10311          addq.w    #4,A7
00005B3A  1800      10312          move.b    D0,D4
00005B3C  206E 000C 10313          move.l    12(A6),A0
00005B40  1010      10314          move.b    (A0),D0
00005B42  4880      10315          ext.w     D0
00005B44  48C0      10316          ext.l     D0
00005B46  0C80 0000 10317          cmp.l     #115,D0
00005B4A  0073      
00005B4C  6618      10318          bne.s     vsprintf_48
00005B4E  0C85 0000 10319          cmp.l     #0,D5
00005B52  0000      
00005B54  6D10      10320          blt.s     vsprintf_48
00005B56  4884      10321          ext.w     D4
00005B58  48C4      10322          ext.l     D4
00005B5A  B885      10323          cmp.l     D5,D4
00005B5C  6F04      10324          ble.s     vsprintf_50
00005B5E  1005      10325          move.b    D5,D0
00005B60  6002      10326          bra.s     vsprintf_51
                    10327   vsprintf_50:
00005B62  1004      10328          move.b    D4,D0
                    10329   vsprintf_51:
00005B64  1800      10330          move.b    D0,D4
                    10331   vsprintf_48:
00005B66  206E 000C 10332          move.l    12(A6),A0
00005B6A  1010      10333          move.b    (A0),D0
00005B6C  4880      10334          ext.w     D0
00005B6E  48C0      10335          ext.l     D0
00005B70  0C80 0000 10336          cmp.l     #88,D0
00005B74  0058      
00005B76  6600 0026 10337          bne       vsprintf_56
00005B7A  41EE FFDC 10338          lea       -36(A6),A0
00005B7E  2408      10339          move.l    A0,D2
                    10340   vsprintf_54:
00005B80  2042      10341          move.l    D2,A0
00005B82  4A10      10342          tst.b     (A0)
00005B84  6718      10343          beq.s     vsprintf_56
00005B86  2042      10344          move.l    D2,A0
00005B88  1210      10345          move.b    (A0),D1
00005B8A  4881      10346          ext.w     D1
00005B8C  48C1      10347          ext.l     D1
00005B8E  2F01      10348          move.l    D1,-(A7)
00005B90  6100 FB5A 10349          bsr       _toupper
00005B94  584F      10350          addq.w    #4,A7
00005B96  2042      10351          move.l    D2,A0
00005B98  1080      10352          move.b    D0,(A0)
00005B9A  5282      10353          addq.l    #1,D2
00005B9C  60E2      10354          bra       vsprintf_54
                    10355   vsprintf_56:
00005B9E  7E00      10356          moveq     #0,D7
00005BA0  41EE FFD4 10357          lea       -44(A6),A0
00005BA4  2408      10358          move.l    A0,D2
00005BA6  206E 000C 10359          move.l    12(A6),A0
00005BAA  1010      10360          move.b    (A0),D0
00005BAC  4880      10361          ext.w     D0
00005BAE  48C0      10362          ext.l     D0
00005BB0  0C80 0000 10363          cmp.l     #100,D0
00005BB4  0064      
00005BB6  6714      10364          beq.s     vsprintf_59
00005BB8  206E 000C 10365          move.l    12(A6),A0
00005BBC  1010      10366          move.b    (A0),D0
00005BBE  4880      10367          ext.w     D0
00005BC0  48C0      10368          ext.l     D0
00005BC2  0C80 0000 10369          cmp.l     #105,D0
00005BC6  0069      
00005BC8  6600 0076 10370          bne       vsprintf_65
                    10371   vsprintf_59:
00005BCC  4A2E FFCE 10372          tst.b     -50(A6)
00005BD0  6612      10373          bne.s     vsprintf_62
00005BD2  2043      10374          move.l    D3,A0
00005BD4  1010      10375          move.b    (A0),D0
00005BD6  4880      10376          ext.w     D0
00005BD8  48C0      10377          ext.l     D0
00005BDA  0C80 0000 10378          cmp.l     #45,D0
00005BDE  002D      
00005BE0  6600 002E 10379          bne       vsprintf_60
                    10380   vsprintf_62:
00005BE4  2043      10381          move.l    D3,A0
00005BE6  1010      10382          move.b    (A0),D0
00005BE8  4880      10383          ext.w     D0
00005BEA  48C0      10384          ext.l     D0
00005BEC  0C80 0000 10385          cmp.l     #45,D0
00005BF0  002D      
00005BF2  660E      10386          bne.s     vsprintf_63
00005BF4  2043      10387          move.l    D3,A0
00005BF6  5283      10388          addq.l    #1,D3
00005BF8  2242      10389          move.l    D2,A1
00005BFA  5282      10390          addq.l    #1,D2
00005BFC  1290      10391          move.b    (A0),(A1)
00005BFE  5304      10392          subq.b    #1,D4
00005C00  6008      10393          bra.s     vsprintf_64
                    10394   vsprintf_63:
00005C02  2042      10395          move.l    D2,A0
00005C04  5282      10396          addq.l    #1,D2
00005C06  10BC 002B 10397          move.b    #43,(A0)
                    10398   vsprintf_64:
00005C0A  5287      10399          addq.l    #1,D7
00005C0C  6000 0032 10400          bra       vsprintf_65
                    10401   vsprintf_60:
00005C10  4A2E FFCF 10402          tst.b     -49(A6)
00005C14  6700 002A 10403          beq       vsprintf_65
00005C18  2043      10404          move.l    D3,A0
00005C1A  1010      10405          move.b    (A0),D0
00005C1C  4880      10406          ext.w     D0
00005C1E  48C0      10407          ext.l     D0
00005C20  0C80 0000 10408          cmp.l     #45,D0
00005C24  002D      
00005C26  660E      10409          bne.s     vsprintf_67
00005C28  2043      10410          move.l    D3,A0
00005C2A  5283      10411          addq.l    #1,D3
00005C2C  2242      10412          move.l    D2,A1
00005C2E  5282      10413          addq.l    #1,D2
00005C30  1290      10414          move.b    (A0),(A1)
00005C32  5304      10415          subq.b    #1,D4
00005C34  6008      10416          bra.s     vsprintf_68
                    10417   vsprintf_67:
00005C36  2042      10418          move.l    D2,A0
00005C38  5282      10419          addq.l    #1,D2
00005C3A  10BC 0020 10420          move.b    #32,(A0)
                    10421   vsprintf_68:
00005C3E  5287      10422          addq.l    #1,D7
                    10423   vsprintf_65:
00005C40  4A2E FFD0 10424          tst.b     -48(A6)
00005C44  6700 0066 10425          beq       vsprintf_77
00005C48  206E 000C 10426          move.l    12(A6),A0
00005C4C  1010      10427          move.b    (A0),D0
00005C4E  4880      10428          ext.w     D0
00005C50  48C0      10429          ext.l     D0
00005C52  0C80 0000 10430          cmp.l     #111,D0
00005C56  006F      
00005C58  671A      10431          beq.s     vsprintf_73
00005C5A  6E0C      10432          bgt.s     vsprintf_76
00005C5C  0C80 0000 10433          cmp.l     #88,D0
00005C60  0058      
00005C62  6710      10434          beq.s     vsprintf_73
00005C64  6000 0046 10435          bra       vsprintf_77
                    10436   vsprintf_76:
00005C68  0C80 0000 10437          cmp.l     #120,D0
00005C6C  0078      
00005C6E  6704      10438          beq.s     vsprintf_73
00005C70  6000 003A 10439          bra       vsprintf_77
                    10440   vsprintf_73:
00005C74  2042      10441          move.l    D2,A0
00005C76  5282      10442          addq.l    #1,D2
00005C78  10BC 0030 10443          move.b    #48,(A0)
00005C7C  5287      10444          addq.l    #1,D7
00005C7E  206E 000C 10445          move.l    12(A6),A0
00005C82  1010      10446          move.b    (A0),D0
00005C84  4880      10447          ext.w     D0
00005C86  48C0      10448          ext.l     D0
00005C88  0C80 0000 10449          cmp.l     #120,D0
00005C8C  0078      
00005C8E  6712      10450          beq.s     vsprintf_79
00005C90  206E 000C 10451          move.l    12(A6),A0
00005C94  1010      10452          move.b    (A0),D0
00005C96  4880      10453          ext.w     D0
00005C98  48C0      10454          ext.l     D0
00005C9A  0C80 0000 10455          cmp.l     #88,D0
00005C9E  0058      
00005CA0  660A      10456          bne.s     vsprintf_77
                    10457   vsprintf_79:
00005CA2  2042      10458          move.l    D2,A0
00005CA4  5282      10459          addq.l    #1,D2
00005CA6  10BC 0078 10460          move.b    #120,(A0)
00005CAA  5287      10461          addq.l    #1,D7
                    10462   vsprintf_77:
00005CAC  2042      10463          move.l    D2,A0
00005CAE  4210      10464          clr.b     (A0)
00005CB0  206E 000C 10465          move.l    12(A6),A0
00005CB4  1010      10466          move.b    (A0),D0
00005CB6  4880      10467          ext.w     D0
00005CB8  48C0      10468          ext.l     D0
00005CBA  0C80 0000 10469          cmp.l     #105,D0
00005CBE  0069      
00005CC0  6700 0076 10470          beq       vsprintf_82
00005CC4  6E42      10471          bgt.s     vsprintf_93
00005CC6  0C80 0000 10472          cmp.l     #99,D0
00005CCA  0063      
00005CCC  6700 0084 10473          beq       vsprintf_96
00005CD0  6E1C      10474          bgt.s     vsprintf_94
00005CD2  0C80 0000 10475          cmp.l     #88,D0
00005CD6  0058      
00005CD8  6700 005E 10476          beq       vsprintf_82
00005CDC  6E00 0184 10477          bgt       vsprintf_80
00005CE0  0C80 0000 10478          cmp.l     #69,D0
00005CE4  0045      
00005CE6  6700 0050 10479          beq       vsprintf_82
00005CEA  6000 0176 10480          bra       vsprintf_80
                    10481   vsprintf_94:
00005CEE  0C80 0000 10482          cmp.l     #101,D0
00005CF2  0065      
00005CF4  6700 0042 10483          beq       vsprintf_82
00005CF8  6E00 0168 10484          bgt       vsprintf_80
00005CFC  0C80 0000 10485          cmp.l     #100,D0
00005D00  0064      
00005D02  6734      10486          beq.s     vsprintf_82
00005D04  6000 015C 10487          bra       vsprintf_80
                    10488   vsprintf_93:
00005D08  0C80 0000 10489          cmp.l     #117,D0
00005D0C  0075      
00005D0E  6728      10490          beq.s     vsprintf_82
00005D10  6E1A      10491          bgt.s     vsprintf_95
00005D12  0C80 0000 10492          cmp.l     #115,D0
00005D16  0073      
00005D18  6700 0038 10493          beq       vsprintf_96
00005D1C  6E00 0144 10494          bgt       vsprintf_80
00005D20  0C80 0000 10495          cmp.l     #111,D0
00005D24  006F      
00005D26  6710      10496          beq.s     vsprintf_82
00005D28  6000 0138 10497          bra       vsprintf_80
                    10498   vsprintf_95:
00005D2C  0C80 0000 10499          cmp.l     #120,D0
00005D30  0078      
00005D32  6704      10500          beq.s     vsprintf_82
00005D34  6000 012C 10501          bra       vsprintf_80
                    10502   vsprintf_82:
00005D38  4A2E FFD2 10503          tst.b     -46(A6)
00005D3C  6714      10504          beq.s     vsprintf_96
00005D3E  4A2E FFCD 10505          tst.b     -51(A6)
00005D42  660E      10506          bne.s     vsprintf_96
00005D44  200D      10507          move.l    A5,D0
00005D46  9087      10508          sub.l     D7,D0
00005D48  4884      10509          ext.w     D4
00005D4A  48C4      10510          ext.l     D4
00005D4C  9084      10511          sub.l     D4,D0
00005D4E  2D40 FFFC 10512          move.l    D0,-4(A6)
                    10513   vsprintf_96:
00005D52  202E FFFC 10514          move.l    -4(A6),D0
00005D56  0C80 0000 10515          cmp.l     #0,D0
00005D5A  0000      
00005D5C  6C04      10516          bge.s     vsprintf_98
00005D5E  42AE FFFC 10517          clr.l     -4(A6)
                    10518   vsprintf_98:
00005D62  4A2E FFCD 10519          tst.b     -51(A6)
00005D66  6600 0030 10520          bne       vsprintf_104
00005D6A  4884      10521          ext.w     D4
00005D6C  48C4      10522          ext.l     D4
00005D6E  2004      10523          move.l    D4,D0
00005D70  D0AE FFFC 10524          add.l     -4(A6),D0
00005D74  D087      10525          add.l     D7,D0
00005D76  1D40 FFD1 10526          move.b    D0,-47(A6)
                    10527   vsprintf_102:
00005D7A  102E FFD1 10528          move.b    -47(A6),D0
00005D7E  4880      10529          ext.w     D0
00005D80  48C0      10530          ext.l     D0
00005D82  220D      10531          move.l    A5,D1
00005D84  534D      10532          subq.w    #1,A5
00005D86  B081      10533          cmp.l     D1,D0
00005D88  6C0E      10534          bge.s     vsprintf_104
00005D8A  4878 0020 10535          pea       32
00005D8E  2F0A      10536          move.l    A2,-(A7)
00005D90  4E93      10537          jsr       (A3)
00005D92  504F      10538          addq.w    #8,A7
00005D94  5286      10539          addq.l    #1,D6
00005D96  60E2      10540          bra       vsprintf_102
                    10541   vsprintf_104:
00005D98  41EE FFD4 10542          lea       -44(A6),A0
00005D9C  2408      10543          move.l    A0,D2
                    10544   vsprintf_105:
00005D9E  2042      10545          move.l    D2,A0
00005DA0  4A10      10546          tst.b     (A0)
00005DA2  6716      10547          beq.s     vsprintf_107
00005DA4  2042      10548          move.l    D2,A0
00005DA6  5282      10549          addq.l    #1,D2
00005DA8  1210      10550          move.b    (A0),D1
00005DAA  4881      10551          ext.w     D1
00005DAC  48C1      10552          ext.l     D1
00005DAE  2F01      10553          move.l    D1,-(A7)
00005DB0  2F0A      10554          move.l    A2,-(A7)
00005DB2  4E93      10555          jsr       (A3)
00005DB4  504F      10556          addq.w    #8,A7
00005DB6  5286      10557          addq.l    #1,D6
00005DB8  60E4      10558          bra       vsprintf_105
                    10559   vsprintf_107:
00005DBA  202E FFFC 10560          move.l    -4(A6),D0
00005DBE  1D40 FFD1 10561          move.b    D0,-47(A6)
                    10562   vsprintf_108:
00005DC2  102E FFD1 10563          move.b    -47(A6),D0
00005DC6  532E FFD1 10564          subq.b    #1,-47(A6)
00005DCA  4A00      10565          tst.b     D0
00005DCC  670E      10566          beq.s     vsprintf_110
00005DCE  4878 0030 10567          pea       48
00005DD2  2F0A      10568          move.l    A2,-(A7)
00005DD4  4E93      10569          jsr       (A3)
00005DD6  504F      10570          addq.w    #8,A7
00005DD8  5286      10571          addq.l    #1,D6
00005DDA  60E6      10572          bra       vsprintf_108
                    10573   vsprintf_110:
00005DDC  2043      10574          move.l    D3,A0
00005DDE  4A10      10575          tst.b     (A0)
00005DE0  6700 0048 10576          beq       vsprintf_113
00005DE4  206E 000C 10577          move.l    12(A6),A0
00005DE8  1010      10578          move.b    (A0),D0
00005DEA  4880      10579          ext.w     D0
00005DEC  48C0      10580          ext.l     D0
00005DEE  0C80 0000 10581          cmp.l     #115,D0
00005DF2  0073      
00005DF4  670C      10582          beq.s     vsprintf_116
00005DF6  6E18      10583          bgt.s     vsprintf_119
00005DF8  0C80 0000 10584          cmp.l     #99,D0
00005DFC  0063      
00005DFE  6702      10585          beq.s     vsprintf_116
00005E00  600E      10586          bra.s     vsprintf_119
                    10587   vsprintf_116:
00005E02  2005      10588          move.l    D5,D0
00005E04  5385      10589          subq.l    #1,D5
00005E06  0C80 0000 10590          cmp.l     #0,D0
00005E0A  0000      
00005E0C  6E02      10591          bgt.s     vsprintf_119
00005E0E  6016      10592          bra.s     vsprintf_115
                    10593   vsprintf_119:
00005E10  2043      10594          move.l    D3,A0
00005E12  5283      10595          addq.l    #1,D3
00005E14  1210      10596          move.b    (A0),D1
00005E16  4881      10597          ext.w     D1
00005E18  48C1      10598          ext.l     D1
00005E1A  2F01      10599          move.l    D1,-(A7)
00005E1C  2F0A      10600          move.l    A2,-(A7)
00005E1E  4E93      10601          jsr       (A3)
00005E20  504F      10602          addq.w    #8,A7
00005E22  5286      10603          addq.l    #1,D6
00005E24  6002      10604          bra.s     vsprintf_112
                    10605   vsprintf_115:
00005E26  6002      10606          bra.s     vsprintf_113
                    10607   vsprintf_112:
00005E28  60B2      10608          bra       vsprintf_110
                    10609   vsprintf_113:
00005E2A  4A2E FFCD 10610          tst.b     -51(A6)
00005E2E  6700 0030 10611          beq       vsprintf_125
00005E32  4884      10612          ext.w     D4
00005E34  48C4      10613          ext.l     D4
00005E36  2004      10614          move.l    D4,D0
00005E38  D0AE FFFC 10615          add.l     -4(A6),D0
00005E3C  D087      10616          add.l     D7,D0
00005E3E  1D40 FFD1 10617          move.b    D0,-47(A6)
                    10618   vsprintf_123:
00005E42  102E FFD1 10619          move.b    -47(A6),D0
00005E46  4880      10620          ext.w     D0
00005E48  48C0      10621          ext.l     D0
00005E4A  220D      10622          move.l    A5,D1
00005E4C  534D      10623          subq.w    #1,A5
00005E4E  B081      10624          cmp.l     D1,D0
00005E50  6C0E      10625          bge.s     vsprintf_125
00005E52  4878 0020 10626          pea       32
00005E56  2F0A      10627          move.l    A2,-(A7)
00005E58  4E93      10628          jsr       (A3)
00005E5A  504F      10629          addq.w    #8,A7
00005E5C  5386      10630          subq.l    #1,D6
00005E5E  60E2      10631          bra       vsprintf_123
                    10632   vsprintf_125:
00005E60  6014      10633          bra.s     vsprintf_81
                    10634   vsprintf_80:
00005E62  206E 000C 10635          move.l    12(A6),A0
00005E66  1210      10636          move.b    (A0),D1
00005E68  4881      10637          ext.w     D1
00005E6A  48C1      10638          ext.l     D1
00005E6C  2F01      10639          move.l    D1,-(A7)
00005E6E  2F0A      10640          move.l    A2,-(A7)
00005E70  4E93      10641          jsr       (A3)
00005E72  504F      10642          addq.w    #8,A7
00005E74  5286      10643          addq.l    #1,D6
                    10644   vsprintf_81:
00005E76  52AE 000C 10645          addq.l    #1,12(A6)
                    10646   vsprintf_2:
00005E7A  6000 F9D6 10647          bra       vsprintf_1
                    10648   vsprintf_3:
00005E7E  4A92      10649          tst.l     (A2)
00005E80  6710      10650          beq.s     vsprintf_126
00005E82  4201      10651          clr.b     D1
00005E84  C2BC 0000 10652          and.l     #255,D1
00005E88  00FF      
00005E8A  2F01      10653          move.l    D1,-(A7)
00005E8C  2F0A      10654          move.l    A2,-(A7)
00005E8E  4E93      10655          jsr       (A3)
00005E90  504F      10656          addq.w    #8,A7
                    10657   vsprintf_126:
00005E92  2006      10658          move.l    D6,D0
00005E94  4CDF 3CFC 10659          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00005E98  4E5E      10660          unlk      A6
00005E9A  4E75      10661          rts
                    10662   @itoa_convert:
00005E9C  4E56 0000 10663          link      A6,#0
00005EA0  48E7 3C00 10664          movem.l   D2/D3/D4/D5,-(A7)
00005EA4  242E 0008 10665          move.l    8(A6),D2
00005EA8  262E 0010 10666          move.l    16(A6),D3
00005EAC  2A2E 000C 10667          move.l    12(A6),D5
00005EB0  2F05      10668          move.l    D5,-(A7)
00005EB2  2F03      10669          move.l    D3,-(A7)
00005EB4  6100 F6B2 10670          bsr       ULDIV
00005EB8  202F 0004 10671          move.l    4(A7),D0
00005EBC  504F      10672          addq.w    #8,A7
00005EBE  2800      10673          move.l    D0,D4
00005EC0  BA83      10674          cmp.l     D3,D5
00005EC2  651A      10675          blo.s     @itoa_convert_1
00005EC4  2F03      10676          move.l    D3,-(A7)
00005EC6  2F05      10677          move.l    D5,-(A7)
00005EC8  2F03      10678          move.l    D3,-(A7)
00005ECA  6100 F69C 10679          bsr       ULDIV
00005ECE  2217      10680          move.l    (A7),D1
00005ED0  504F      10681          addq.w    #8,A7
00005ED2  2F01      10682          move.l    D1,-(A7)
00005ED4  2F02      10683          move.l    D2,-(A7)
00005ED6  61C4      10684          bsr       @itoa_convert
00005ED8  DEFC 000C 10685          add.w     #12,A7
00005EDC  2400      10686          move.l    D0,D2
                    10687   @itoa_convert_1:
00005EDE  0C84 0000 10688          cmp.l     #9,D4
00005EE2  0009      
00005EE4  6E0A      10689          bgt.s     @itoa_convert_3
00005EE6  2004      10690          move.l    D4,D0
00005EE8  0680 0000 10691          add.l     #48,D0
00005EEC  0030      
00005EEE  600E      10692          bra.s     @itoa_convert_4
                    10693   @itoa_convert_3:
00005EF0  2004      10694          move.l    D4,D0
00005EF2  0680 0000 10695          add.l     #97,D0
00005EF6  0061      
00005EF8  0480 0000 10696          sub.l     #10,D0
00005EFC  000A      
                    10697   @itoa_convert_4:
00005EFE  2042      10698          move.l    D2,A0
00005F00  1080      10699          move.b    D0,(A0)
00005F02  2002      10700          move.l    D2,D0
00005F04  5280      10701          addq.l    #1,D0
00005F06  4CDF 003C 10702          movem.l   (A7)+,D2/D3/D4/D5
00005F0A  4E5E      10703          unlk      A6
00005F0C  4E75      10704          rts
                    10705   _ltoa:
00005F0E  4E56 0000 10706          link      A6,#0
00005F12  48E7 3C00 10707          movem.l   D2/D3/D4/D5,-(A7)
00005F16  242E 0008 10708          move.l    8(A6),D2
00005F1A  262E 000C 10709          move.l    12(A6),D3
00005F1E  2A2E 0010 10710          move.l    16(A6),D5
00005F22  2803      10711          move.l    D3,D4
00005F24  0C85 0000 10712          cmp.l     #2,D5
00005F28  0002      
00005F2A  6D08      10713          blt.s     ltoa_3
00005F2C  0C85 0000 10714          cmp.l     #36,D5
00005F30  0024      
00005F32  6F06      10715          ble.s     ltoa_1
                    10716   ltoa_3:
00005F34  2003      10717          move.l    D3,D0
00005F36  6000 0052 10718          bra       ltoa_4
                    10719   ltoa_1:
00005F3A  0C85 0000 10720          cmp.l     #10,D5
00005F3E  000A      
00005F40  6600 0032 10721          bne       ltoa_5
00005F44  0C82 0000 10722          cmp.l     #0,D2
00005F48  0000      
00005F4A  6C28      10723          bge.s     ltoa_5
00005F4C  2002      10724          move.l    D2,D0
00005F4E  4480      10725          neg.l     D0
00005F50  2400      10726          move.l    D0,D2
00005F52  0C82 0000 10727          cmp.l     #0,D2
00005F56  0000      
00005F58  6C12      10728          bge.s     ltoa_7
00005F5A  4879 0000 10729          pea       @itoa_1
00005F5E  77AC      
00005F60  2F03      10730          move.l    D3,-(A7)
00005F62  6100 F5F4 10731          bsr       _strcpy
00005F66  504F      10732          addq.w    #8,A7
00005F68  2003      10733          move.l    D3,D0
00005F6A  601E      10734          bra.s     ltoa_4
                    10735   ltoa_7:
00005F6C  2044      10736          move.l    D4,A0
00005F6E  5284      10737          addq.l    #1,D4
00005F70  10BC 002D 10738          move.b    #45,(A0)
                    10739   ltoa_5:
00005F74  2F05      10740          move.l    D5,-(A7)
00005F76  2F02      10741          move.l    D2,-(A7)
00005F78  2F04      10742          move.l    D4,-(A7)
00005F7A  6100 FF20 10743          bsr       @itoa_convert
00005F7E  DEFC 000C 10744          add.w     #12,A7
00005F82  2800      10745          move.l    D0,D4
00005F84  2044      10746          move.l    D4,A0
00005F86  4210      10747          clr.b     (A0)
00005F88  2003      10748          move.l    D3,D0
                    10749   ltoa_4:
00005F8A  4CDF 003C 10750          movem.l   (A7)+,D2/D3/D4/D5
00005F8E  4E5E      10751          unlk      A6
00005F90  4E75      10752          rts
                    10753   _ultoa:
00005F92  4E56 0000 10754          link      A6,#0
00005F96  48E7 3800 10755          movem.l   D2/D3/D4,-(A7)
00005F9A  262E 0010 10756          move.l    16(A6),D3
00005F9E  282E 000C 10757          move.l    12(A6),D4
00005FA2  2404      10758          move.l    D4,D2
00005FA4  0C83 0000 10759          cmp.l     #2,D3
00005FA8  0002      
00005FAA  6D08      10760          blt.s     ultoa_3
00005FAC  0C83 0000 10761          cmp.l     #36,D3
00005FB0  0024      
00005FB2  6F04      10762          ble.s     ultoa_1
                    10763   ultoa_3:
00005FB4  2004      10764          move.l    D4,D0
00005FB6  6018      10765          bra.s     ultoa_4
                    10766   ultoa_1:
00005FB8  2F03      10767          move.l    D3,-(A7)
00005FBA  2F2E 0008 10768          move.l    8(A6),-(A7)
00005FBE  2F02      10769          move.l    D2,-(A7)
00005FC0  6100 FEDA 10770          bsr       @itoa_convert
00005FC4  DEFC 000C 10771          add.w     #12,A7
00005FC8  2400      10772          move.l    D0,D2
00005FCA  2042      10773          move.l    D2,A0
00005FCC  4210      10774          clr.b     (A0)
00005FCE  2004      10775          move.l    D4,D0
                    10776   ultoa_4:
00005FD0  4CDF 001C 10777          movem.l   (A7)+,D2/D3/D4
00005FD4  4E5E      10778          unlk      A6
00005FD6  4E75      10779          rts
                    10780   _itoa:
00005FD8  4E56 0000 10781          link      A6,#0
00005FDC  2F2E 0010 10782          move.l    16(A6),-(A7)
00005FE0  2F2E 000C 10783          move.l    12(A6),-(A7)
00005FE4  2F2E 0008 10784          move.l    8(A6),-(A7)
00005FE8  6100 FF24 10785          bsr       _ltoa
00005FEC  DEFC 000C 10786          add.w     #12,A7
00005FF0  4E5E      10787          unlk      A6
00005FF2  4E75      10788          rts
                    10789   ULMUL:
00005FF4  4E56 0000 10790          link    A6,#0
00005FF8  48E7 C000 10791          movem.l D0/D1,-(A7)
00005FFC  222E 0008 10792          move.l  8(A6),D1
00006000  202E 000C 10793          move.l  12(A6),D0
00006004  602C      10794          bra.s   lmul_3
                    10795   LMUL:
00006006  4E56 0000 10796          link    A6,#0
0000600A  48E7 C000 10797          movem.l D0/D1,-(A7)
0000600E  222E 0008 10798          move.l  8(A6),D1
00006012  202E 000C 10799          move.l  12(A6),D0
00006016  4A80      10800          tst.l   D0
00006018  6A0A      10801          bpl.s   lmul_1
0000601A  4480      10802          neg.l   D0
0000601C  4A81      10803          tst.l   D1
0000601E  6A0A      10804          bpl.s   lmul_2
00006020  4481      10805          neg.l   D1
00006022  600E      10806          bra.s   lmul_3
                    10807   lmul_1:
00006024  4A81      10808          tst.l   D1
00006026  6A0A      10809          bpl.s   lmul_3
00006028  4481      10810          neg.l   D1
                    10811   lmul_2:
0000602A  6114      10812          bsr.s   domul
0000602C  4481      10813          neg.l   D1
0000602E  4080      10814          negx.l  D0
00006030  6002      10815          bra.s   lmul_4
                    10816   lmul_3:
00006032  610C      10817          bsr.s   domul
                    10818   lmul_4:
00006034  2D41 0008 10819          move.l  D1,8(A6)
00006038  4CDF 0003 10820          movem.l (A7)+,D0/D1
0000603C  4E5E      10821          unlk    A6
0000603E  4E75      10822          rts
                    10823   domul:
00006040  0C81 0000 10824          cmpi.l  #$FFFF,D1
00006044  FFFF      
00006046  620C      10825          bhi.s   domul_1
00006048  0C80 0000 10826          cmpi.l  #$FFFF,D0
0000604C  FFFF      
0000604E  620E      10827          bhi.s   domul_2
00006050  C2C0      10828          mulu    D0,D1
00006052  4E75      10829          rts
                    10830   domul_1:
00006054  0C80 0000 10831          cmpi.l  #$FFFF,D0
00006058  FFFF      
0000605A  6218      10832          bhi.s   domul_4
0000605C  6002      10833          bra.s   domul_3
                    10834   domul_2
0000605E  C141      10835          exg     D0,D1
                    10836   domul_3:
00006060  2F02      10837          move.l  D2,-(A7)
00006062  2401      10838          move.l  D1,D2
00006064  4842      10839          swap    D2
00006066  C2C0      10840          mulu    D0,D1
00006068  C4C0      10841          mulu    D0,D2
0000606A  4842      10842          swap    D2
0000606C  4242      10843          clr.w   D2
0000606E  D282      10844          add.l   D2,D1
00006070  241F      10845          move.l  (A7)+,D2
00006072  4E75      10846          rts
                    10847   domul_4:
00006074  48E7 3000 10848          movem.l D2/D3,-(A7)
00006078  2401      10849          move.l  D1,D2
0000607A  2601      10850          move.l  D1,D3
0000607C  C2C0      10851          mulu    D0,D1
0000607E  4842      10852          swap    D2
00006080  C4C0      10853          mulu    D0,D2
00006082  4840      10854          swap    D0
00006084  C6C0      10855          mulu    D0,D3
00006086  D483      10856          add.l   D3,D2
00006088  4842      10857          swap    D2
0000608A  4242      10858          clr.w   D2
0000608C  D282      10859          add.l   D2,D1
0000608E  4CDF 000C 10860          movem.l (A7)+,D2/D3
00006092  4E75      10861          rts
                    10862   _strlen:
00006094  206F 0004 10863          move.l    (4,A7),A0
00006098  2248      10864          move.l    A0,A1
                    10865   strlen_1:
0000609A  4A19      10866          tst.b     (A1)+
0000609C  66FC      10867          bne       strlen_1
0000609E  2009      10868          move.l    A1,D0
000060A0  9088      10869          sub.l     A0,D0
000060A2  5380      10870          subq.l    #1,D0
000060A4  4E75      10871          rts
                    10872          section   const
                    10873   
                    10874   @m68kde~2_1:
000060A6  0D0A 00   10875          dc.b      13,10,0
                    10876   @m68kde~2_2:
000060AA  0D53 7769 10877          dc.b      13,83,119,105,116,99,104,101,115,32,83,87,91
000060AE  7463 6865 
000060B2  7320 5357 
000060B6  5B        
000060B7  372D 305D 10878          dc.b      55,45,48,93,32,61,32,0
000060BB  203D 2000 
                    10879   @m68kde~2_3:
000060C0  3000      10880          dc.b      48,0
                    10881   @m68kde~2_4:
000060C2  3100      10882          dc.b      49,0
                    10883   @m68kde~2_5:
000060C4  0D0A 456E 10884          dc.b      13,10,69,110,116,101,114,32,83,116,97,114,116
000060C8  7465 7220 
000060CC  5374 6172 
000060D0  74        
000060D1  2041 6464 10885          dc.b      32,65,100,100,114,101,115,115,58,32,0
000060D5  7265 7373 
000060D9  3A20 00   
                    10886   @m68kde~2_6:
000060DC  0D0A 3C45 10887          dc.b      13,10,60,69,83,67,62,32,61,32,65,98,111,114
000060E0  5343 3E20 
000060E4  3D20 4162 
000060E8  6F72      
000060EA  742C 2053 10888          dc.b      116,44,32,83,80,65,67,69,32,116,111,32,67,111
000060EE  5041 4345 
000060F2  2074 6F20 
000060F6  436F      
000060F8  6E74 696E 10889          dc.b      110,116,105,110,117,101,0
000060FC  7565 00   
                    10890   @m68kde~2_7:
00006100  0D0A 2530 10891          dc.b      13,10,37,48,56,88,32,32,37,48,52,88,32,32,32
00006104  3858 2020 
00006108  2530 3458 
0000610C  2020 20   
0000610F  2020 2020 10892          dc.b      32,32,32,32,32,32,32,32,32,32,32,32,32,32,32
00006113  2020 2020 
00006117  2020 2020 
0000611B  2020 20   
0000611E  2020 2020 10893          dc.b      32,32,32,32,32,32,37,115,0
00006122  2020 2573 
00006126  00        
                    10894   @m68kde~2_8:
00006128  0D0A 2530 10895          dc.b      13,10,37,48,56,88,32,32,37,48,52,88,32,37,48
0000612C  3858 2020 
00006130  2530 3458 
00006134  2025 30   
00006137  3458 2020 10896          dc.b      52,88,32,32,32,32,32,32,32,32,32,32,32,32,32
0000613B  2020 2020 
0000613F  2020 2020 
00006143  2020 20   
00006146  2020 2020 10897          dc.b      32,32,32,32,32,32,37,115,0
0000614A  2020 2573 
0000614E  00        
                    10898   @m68kde~2_9:
00006150  0D0A 2530 10899          dc.b      13,10,37,48,56,88,32,32,37,48,52,88,32,37,48
00006154  3858 2020 
00006158  2530 3458 
0000615C  2025 30   
0000615F  3458 2025 10900          dc.b      52,88,32,37,48,52,88,32,32,32,32,32,32,32,32
00006163  3034 5820 
00006167  2020 2020 
0000616B  2020 20   
0000616E  2020 2020 10901          dc.b      32,32,32,32,32,32,37,115,0
00006172  2020 2573 
00006176  00        
                    10902   @m68kde~2_10:
00006178  0D0A 2530 10903          dc.b      13,10,37,48,56,88,32,32,37,48,52,88,32,37,48
0000617C  3858 2020 
00006180  2530 3458 
00006184  2025 30   
00006187  3458 2025 10904          dc.b      52,88,32,37,48,52,88,32,37,48,52,88,32,32,32
0000618B  3034 5820 
0000618F  2530 3458 
00006193  2020 20   
00006196  2020 2020 10905          dc.b      32,32,32,32,32,32,37,115,0
0000619A  2020 2573 
0000619E  00        
                    10906   @m68kde~2_11:
000061A0  0D0A 2530 10907          dc.b      13,10,37,48,56,88,32,32,37,48,52,88,32,37,48
000061A4  3858 2020 
000061A8  2530 3458 
000061AC  2025 30   
000061AF  3458 2025 10908          dc.b      52,88,32,37,48,52,88,32,37,48,52,88,32,37,48
000061B3  3034 5820 
000061B7  2530 3458 
000061BB  2025 30   
000061BE  3458 2020 10909          dc.b      52,88,32,32,32,32,37,115,0
000061C2  2020 2573 
000061C6  00        
                    10910   @m68kde~2_12:
000061C8  0D0A 4475 10911          dc.b      13,10,68,117,109,112,32,77,101,109,111,114,121
000061CC  6D70 204D 
000061D0  656D 6F72 
000061D4  79        
000061D5  2042 6C6F 10912          dc.b      32,66,108,111,99,107,58,32,60,69,83,67,62,32
000061D9  636B 3A20 
000061DD  3C45 5343 
000061E1  3E20      
000061E3  746F 2041 10913          dc.b      116,111,32,65,98,111,114,116,44,32,60,83,80
000061E7  626F 7274 
000061EB  2C20 3C53 
000061EF  50        
000061F0  4143 453E 10914          dc.b      65,67,69,62,32,116,111,32,67,111,110,116,105
000061F4  2074 6F20 
000061F8  436F 6E74 
000061FC  69        
000061FD  6E75 6500 10915          dc.b      110,117,101,0
                    10916   @m68kde~2_13:
00006202  0D0A 2530 10917          dc.b      13,10,37,48,56,120,32,0
00006206  3878 2000 
                    10918   @m68kde~2_14:
0000620A  2530 3258 10919          dc.b      37,48,50,88,0
0000620E  00        
                    10920   @m68kde~2_15:
00006210  2020 00   10921          dc.b      32,32,0
                    10922   @m68kde~2_16:
00006214  0D0A 4669 10923          dc.b      13,10,70,105,108,108,32,77,101,109,111,114,121
00006218  6C6C 204D 
0000621C  656D 6F72 
00006220  79        
00006221  2042 6C6F 10924          dc.b      32,66,108,111,99,107,0
00006225  636B 00   
                    10925   @m68kde~2_17:
00006228  0D0A 456E 10926          dc.b      13,10,69,110,116,101,114,32,69,110,100,32,65
0000622C  7465 7220 
00006230  456E 6420 
00006234  41        
00006235  6464 7265 10927          dc.b      100,100,114,101,115,115,58,32,0
00006239  7373 3A20 
0000623D  00        
                    10928   @m68kde~2_18:
0000623E  0D0A 456E 10929          dc.b      13,10,69,110,116,101,114,32,70,105,108,108,32
00006242  7465 7220 
00006246  4669 6C6C 
0000624A  20        
0000624B  4461 7461 10930          dc.b      68,97,116,97,58,32,0
0000624F  3A20 00   
                    10931   @m68kde~2_19:
00006252  0D0A 4669 10932          dc.b      13,10,70,105,108,108,105,110,103,32,65,100,100
00006256  6C6C 696E 
0000625A  6720 4164 
0000625E  64        
0000625F  7265 7373 10933          dc.b      114,101,115,115,101,115,32,91,36,37,48,56,88
00006263  6573 205B 
00006267  2425 3038 
0000626B  58        
0000626C  202D 2024 10934          dc.b      32,45,32,36,37,48,56,88,93,32,119,105,116,104
00006270  2530 3858 
00006274  5D20 7769 
00006278  7468      
0000627A  2024 2530 10935          dc.b      32,36,37,48,50,88,0
0000627E  3258 00   
                    10936   @m68kde~2_20:
00006282  0D0A 5573 10937          dc.b      13,10,85,115,101,32,72,121,112,101,114,84,101
00006286  6520 4879 
0000628A  7065 7254 
0000628E  65        
0000628F  726D 696E 10938          dc.b      114,109,105,110,97,108,32,116,111,32,83,101
00006293  616C 2074 
00006297  6F20 5365 
0000629B  6E64 2054 10939          dc.b      110,100,32,84,101,120,116,32,70,105,108,101
0000629F  6578 7420 
000062A3  4669 6C65 
000062A7  2028 2E68 10940          dc.b      32,40,46,104,101,120,41,13,10,0
000062AB  6578 290D 
000062AF  0A00      
                    10941   @m68kde~2_21:
000062B2  0D0A 4C6F 10942          dc.b      13,10,76,111,97,100,32,70,97,105,108,101,100
000062B6  6164 2046 
000062BA  6169 6C65 
000062BE  64        
000062BF  2061 7420 10943          dc.b      32,97,116,32,65,100,100,114,101,115,115,32,61
000062C3  4164 6472 
000062C7  6573 7320 
000062CB  3D        
000062CC  205B 2425 10944          dc.b      32,91,36,37,48,56,88,93,13,10,0
000062D0  3038 585D 
000062D4  0D0A 00   
                    10945   @m68kde~2_22:
000062D8  0D0A 5375 10946          dc.b      13,10,83,117,99,99,101,115,115,58,32,68,111
000062DC  6363 6573 
000062E0  733A 2044 
000062E4  6F        
000062E5  776E 6C6F 10947          dc.b      119,110,108,111,97,100,101,100,32,37,100,32
000062E9  6164 6564 
000062ED  2025 6420 
000062F1  6279 7465 10948          dc.b      98,121,116,101,115,13,10,0
000062F5  730D 0A00 
                    10949   @m68kde~2_23:
000062FA  0D0A 4578 10950          dc.b      13,10,69,120,97,109,105,110,101,32,97,110,100
000062FE  616D 696E 
00006302  6520 616E 
00006306  64        
00006307  2043 6861 10951          dc.b      32,67,104,97,110,103,101,32,77,101,109,111,114
0000630B  6E67 6520 
0000630F  4D65 6D6F 
00006313  72        
00006314  7900      10952          dc.b      121,0
                    10953   @m68kde~2_24:
00006316  0D0A 3C45 10954          dc.b      13,10,60,69,83,67,62,32,116,111,32,83,116,111
0000631A  5343 3E20 
0000631E  746F 2053 
00006322  746F      
00006324  702C 203C 10955          dc.b      112,44,32,60,83,80,65,67,69,62,32,116,111,32
00006328  5350 4143 
0000632C  453E 2074 
00006330  6F20      
00006332  4164 7661 10956          dc.b      65,100,118,97,110,99,101,44,32,39,45,39,32,116
00006336  6E63 652C 
0000633A  2027 2D27 
0000633E  2074      
00006340  6F20 476F 10957          dc.b      111,32,71,111,32,66,97,99,107,44,32,60,68,65
00006344  2042 6163 
00006348  6B2C 203C 
0000634C  4441      
0000634E  5441 3E20 10958          dc.b      84,65,62,32,116,111,32,99,104,97,110,103,101
00006352  746F 2063 
00006356  6861 6E67 
0000635A  65        
0000635B  00        10959          dc.b      0
                    10960   @m68kde~2_25:
0000635C  0D0A 456E 10961          dc.b      13,10,69,110,116,101,114,32,65,100,100,114,101
00006360  7465 7220 
00006364  4164 6472 
00006368  65        
00006369  7373 3A20 10962          dc.b      115,115,58,32,0
0000636D  00        
                    10963   @m68kde~2_26:
0000636E  0D0A 5B25 10964          dc.b      13,10,91,37,48,56,120,93,32,58,32,37,48,50,120
00006372  3038 785D 
00006376  203A 2025 
0000637A  3032 78   
0000637D  2020 00   10965          dc.b      32,32,0
                    10966   @m68kde~2_27:
00006380  0D0A 5761 10967          dc.b      13,10,87,97,114,110,105,110,103,32,67,104,97
00006384  726E 696E 
00006388  6720 4368 
0000638C  61        
0000638D  6E67 6520 10968          dc.b      110,103,101,32,70,97,105,108,101,100,58,32,87
00006391  4661 696C 
00006395  6564 3A20 
00006399  57        
0000639A  726F 7465 10969          dc.b      114,111,116,101,32,91,37,48,50,120,93,44,32
0000639E  205B 2530 
000063A2  3278 5D2C 
000063A6  20        
000063A7  5265 6164 10970          dc.b      82,101,97,100,32,91,37,48,50,120,93,0
000063AB  205B 2530 
000063AF  3278 5D00 
                    10971   @m68kde~2_28:
000063B4  0D0A 4C6F 10972          dc.b      13,10,76,111,97,100,105,110,103,32,80,114,111
000063B8  6164 696E 
000063BC  6720 5072 
000063C0  6F        
000063C1  6772 616D 10973          dc.b      103,114,97,109,32,70,114,111,109,32,83,80,73
000063C5  2046 726F 
000063C9  6D20 5350 
000063CD  49        
000063CE  2046 6C61 10974          dc.b      32,70,108,97,115,104,46,46,46,46,0
000063D2  7368 2E2E 
000063D6  2E2E 00   
                    10975   @m68kde~2_29:
000063DA  2425 3038 10976          dc.b      36,37,48,56,88,32,32,0
000063DE  5820 2000 
                    10977   @m68kde~2_30:
000063E2  2000      10978          dc.b      32,0
                    10979   @m68kde~2_31:
000063E4  2E00      10980          dc.b      46,0
                    10981   @m68kde~2_32:
000063E6  2563 00   10982          dc.b      37,99,0
                    10983   @m68kde~2_33:
000063EA  00        10984          dc.b      0
                    10985   @m68kde~2_34:
000063EC  0D0A 0D0A 10986          dc.b      13,10,13,10,32,68,48,32,61,32,36,37,48,56,88
000063F0  2044 3020 
000063F4  3D20 2425 
000063F8  3038 58   
000063FB  2020 4130 10987          dc.b      32,32,65,48,32,61,32,36,37,48,56,88,0
000063FF  203D 2024 
00006403  2530 3858 
00006407  00        
                    10988   @m68kde~2_35:
00006408  0D0A 2044 10989          dc.b      13,10,32,68,49,32,61,32,36,37,48,56,88,32,32
0000640C  3120 3D20 
00006410  2425 3038 
00006414  5820 20   
00006417  4131 203D 10990          dc.b      65,49,32,61,32,36,37,48,56,88,0
0000641B  2024 2530 
0000641F  3858 00   
                    10991   @m68kde~2_36:
00006422  0D0A 2044 10992          dc.b      13,10,32,68,50,32,61,32,36,37,48,56,88,32,32
00006426  3220 3D20 
0000642A  2425 3038 
0000642E  5820 20   
00006431  4132 203D 10993          dc.b      65,50,32,61,32,36,37,48,56,88,0
00006435  2024 2530 
00006439  3858 00   
                    10994   @m68kde~2_37:
0000643C  0D0A 2044 10995          dc.b      13,10,32,68,51,32,61,32,36,37,48,56,88,32,32
00006440  3320 3D20 
00006444  2425 3038 
00006448  5820 20   
0000644B  4133 203D 10996          dc.b      65,51,32,61,32,36,37,48,56,88,0
0000644F  2024 2530 
00006453  3858 00   
                    10997   @m68kde~2_38:
00006456  0D0A 2044 10998          dc.b      13,10,32,68,52,32,61,32,36,37,48,56,88,32,32
0000645A  3420 3D20 
0000645E  2425 3038 
00006462  5820 20   
00006465  4134 203D 10999          dc.b      65,52,32,61,32,36,37,48,56,88,0
00006469  2024 2530 
0000646D  3858 00   
                    11000   @m68kde~2_39:
00006470  0D0A 2044 11001          dc.b      13,10,32,68,53,32,61,32,36,37,48,56,88,32,32
00006474  3520 3D20 
00006478  2425 3038 
0000647C  5820 20   
0000647F  4135 203D 11002          dc.b      65,53,32,61,32,36,37,48,56,88,0
00006483  2024 2530 
00006487  3858 00   
                    11003   @m68kde~2_40:
0000648A  0D0A 2044 11004          dc.b      13,10,32,68,54,32,61,32,36,37,48,56,88,32,32
0000648E  3620 3D20 
00006492  2425 3038 
00006496  5820 20   
00006499  4136 203D 11005          dc.b      65,54,32,61,32,36,37,48,56,88,0
0000649D  2024 2530 
000064A1  3858 00   
                    11006   @m68kde~2_41:
000064A4  0D0A 2044 11007          dc.b      13,10,32,68,55,32,61,32,36,37,48,56,88,32,32
000064A8  3720 3D20 
000064AC  2425 3038 
000064B0  5820 20   
000064B3  4137 203D 11008          dc.b      65,55,32,61,32,36,37,48,56,88,0
000064B7  2024 2530 
000064BB  3858 00   
                    11009   @m68kde~2_42:
000064BE  0D0A 0D0A 11010          dc.b      13,10,13,10,85,83,80,32,61,32,36,37,48,56,88
000064C2  5553 5020 
000064C6  3D20 2425 
000064CA  3038 58   
000064CD  2020 2841 11011          dc.b      32,32,40,65,55,41,32,85,115,101,114,32,83,80
000064D1  3729 2055 
000064D5  7365 7220 
000064D9  5350      
000064DB  00        11012          dc.b      0
                    11013   @m68kde~2_43:
000064DC  0D0A 5353 11014          dc.b      13,10,83,83,80,32,61,32,36,37,48,56,88,32,32
000064E0  5020 3D20 
000064E4  2425 3038 
000064E8  5820 20   
000064EB  2841 3729 11015          dc.b      40,65,55,41,32,83,117,112,101,114,118,105,115
000064EF  2053 7570 
000064F3  6572 7669 
000064F7  73        
000064F8  6F72 2053 11016          dc.b      111,114,32,83,80,0
000064FC  5000      
                    11017   @m68kde~2_44:
000064FE  0D0A 2053 11018          dc.b      13,10,32,83,82,32,61,32,36,37,48,52,88,32,32
00006502  5220 3D20 
00006506  2425 3034 
0000650A  5820 20   
0000650D  2000      11019          dc.b      32,0
                    11020   @m68kde~2_45:
00006510  2020 205B 11021          dc.b      32,32,32,91,0
00006514  00        
                    11022   @m68kde~2_46:
00006516  0D0A 2050 11023          dc.b      13,10,32,80,67,32,61,32,36,37,48,56,88,32,32
0000651A  4320 3D20 
0000651E  2425 3038 
00006522  5820 20   
00006525  00        11024          dc.b      0
                    11025   @m68kde~2_47:
00006526  2573 00   11026          dc.b      37,115,0
                    11027   @m68kde~2_48:
0000652A  5B42 5245 11028          dc.b      91,66,82,69,65,75,80,79,73,78,84,93,0
0000652E  414B 504F 
00006532  494E 545D 
00006536  00        
                    11029   @m68kde~2_49:
00006538  0D0A 5750 11030          dc.b      13,10,87,80,37,100,32,61,32,37,115,0
0000653C  2564 203D 
00006540  2025 7300 
                    11031   @m68kde~2_50:
00006544  0D0A 0D0A 11032          dc.b      13,10,13,10,13,10,13,10,13,10,13,10,83,105,110
00006548  0D0A 0D0A 
0000654C  0D0A 0D0A 
00006550  5369 6E   
00006553  676C 6520 11033          dc.b      103,108,101,32,83,116,101,112,32,32,58,91,79
00006557  5374 6570 
0000655B  2020 3A5B 
0000655F  4F        
00006560  4E5D 00   11034          dc.b      78,93,0
                    11035   @m68kde~2_51:
00006564  0D0A 4272 11036          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00006568  6561 6B20 
0000656C  506F 696E 
00006570  74        
00006571  7320 3A5B 11037          dc.b      115,32,58,91,68,105,115,97,98,108,101,100,93
00006575  4469 7361 
00006579  626C 6564 
0000657D  5D        
0000657E  00        11038          dc.b      0
                    11039   @m68kde~2_52:
00006580  0D0A 5072 11040          dc.b      13,10,80,114,101,115,115,32,60,83,80,65,67,69
00006584  6573 7320 
00006588  3C53 5041 
0000658C  4345      
0000658E  3E20 746F 11041          dc.b      62,32,116,111,32,69,120,101,99,117,116,101,32
00006592  2045 7865 
00006596  6375 7465 
0000659A  20        
0000659B  4E65 7874 11042          dc.b      78,101,120,116,32,73,110,115,116,114,117,99
0000659F  2049 6E73 
000065A3  7472 7563 
000065A7  7469 6F6E 11043          dc.b      116,105,111,110,0
000065AB  00        
                    11044   @m68kde~2_53:
000065AC  0D0A 5072 11045          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
000065B0  6573 7320 
000065B4  3C45 5343 
000065B8  3E20      
000065BA  746F 2052 11046          dc.b      116,111,32,82,101,115,117,109,101,32,80,114
000065BE  6573 756D 
000065C2  6520 5072 
000065C6  6F67 7261 11047          dc.b      111,103,114,97,109,0
000065CA  6D00      
                    11048   @m68kde~2_54:
000065CC  0D0A 496C 11049          dc.b      13,10,73,108,108,101,103,97,108,32,68,97,116
000065D0  6C65 6761 
000065D4  6C20 4461 
000065D8  74        
000065D9  6120 5265 11050          dc.b      97,32,82,101,103,105,115,116,101,114,32,58,32
000065DD  6769 7374 
000065E1  6572 203A 
000065E5  20        
000065E6  5573 6520 11051          dc.b      85,115,101,32,68,48,45,68,55,46,46,46,46,46
000065EA  4430 2D44 
000065EE  372E 2E2E 
000065F2  2E2E      
000065F4  0D0A 00   11052          dc.b      13,10,0
                    11053   @m68kde~2_55:
000065F8  0D0A 4425 11054          dc.b      13,10,68,37,99,32,61,32,0
000065FC  6320 3D20 
00006600  00        
                    11055   @m68kde~2_56:
00006602  0D0A 496C 11056          dc.b      13,10,73,108,108,101,103,97,108,32,65,100,100
00006606  6C65 6761 
0000660A  6C20 4164 
0000660E  64        
0000660F  7265 7373 11057          dc.b      114,101,115,115,32,82,101,103,105,115,116,101
00006613  2052 6567 
00006617  6973 7465 
0000661B  7220 3A20 11058          dc.b      114,32,58,32,85,115,101,32,65,48,45,65,55,46
0000661F  5573 6520 
00006623  4130 2D41 
00006627  372E      
00006629  2E2E 2E2E 11059          dc.b      46,46,46,46,13,10,0
0000662D  0D0A 00   
                    11060   @m68kde~2_57:
00006630  0D0A 4125 11061          dc.b      13,10,65,37,99,32,61,32,0
00006634  6320 3D20 
00006638  00        
                    11062   @m68kde~2_58:
0000663A  0D0A 5573 11063          dc.b      13,10,85,115,101,114,32,83,80,32,61,32,0
0000663E  6572 2053 
00006642  5020 3D20 
00006646  00        
                    11064   @m68kde~2_59:
00006648  0D0A 496C 11065          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
0000664C  6C65 6761 
00006650  6C20 5265 
00006654  67        
00006655  6973 7465 11066          dc.b      105,115,116,101,114,46,46,46,46,0
00006659  722E 2E2E 
0000665D  2E00      
                    11067   @m68kde~2_60:
00006660  0D0A 5379 11068          dc.b      13,10,83,121,115,116,101,109,32,83,80,32,61
00006664  7374 656D 
00006668  2053 5020 
0000666C  3D        
0000666D  2000      11069          dc.b      32,0
                    11070   @m68kde~2_61:
00006670  0D0A 5043 11071          dc.b      13,10,80,67,32,61,32,0
00006674  203D 2000 
                    11072   @m68kde~2_62:
00006678  0D0A 5352 11073          dc.b      13,10,83,82,32,61,32,0
0000667C  203D 2000 
                    11074   @m68kde~2_63:
00006680  0D0A 496C 11075          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
00006684  6C65 6761 
00006688  6C20 5265 
0000668C  67        
0000668D  6973 7465 11076          dc.b      105,115,116,101,114,58,32,85,115,101,32,65,48
00006691  723A 2055 
00006695  7365 2041 
00006699  30        
0000669A  2D41 372C 11077          dc.b      45,65,55,44,32,68,48,45,68,55,44,32,83,83,80
0000669E  2044 302D 
000066A2  4437 2C20 
000066A6  5353 50   
000066A9  2C20 5553 11078          dc.b      44,32,85,83,80,44,32,80,67,32,111,114,32,83
000066AD  502C 2050 
000066B1  4320 6F72 
000066B5  2053      
000066B7  520D 0A00 11079          dc.b      82,13,10,0
                    11080   @m68kde~2_64:
000066BC  0D0A 0D0A 11081          dc.b      13,10,13,10,78,117,109,32,32,32,32,32,65,100
000066C0  4E75 6D20 
000066C4  2020 2020 
000066C8  4164      
000066CA  6472 6573 11082          dc.b      100,114,101,115,115,32,32,32,32,32,32,73,110
000066CE  7320 2020 
000066D2  2020 2049 
000066D6  6E        
000066D7  7374 7275 11083          dc.b      115,116,114,117,99,116,105,111,110,0
000066DB  6374 696F 
000066DF  6E00      
                    11084   @m68kde~2_65:
000066E2  0D0A 2D2D 11085          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
000066E6  2D20 2020 
000066EA  2020 2D2D 
000066EE  2D2D 2D   
000066F1  2D2D 2D2D 11086          dc.b      45,45,45,45,32,32,32,32,45,45,45,45,45,45,45
000066F5  2020 2020 
000066F9  2D2D 2D2D 
000066FD  2D2D 2D   
00006700  2D2D 2D2D 11087          dc.b      45,45,45,45,0
00006704  00        
                    11088   @m68kde~2_66:
00006706  0D0A 4E6F 11089          dc.b      13,10,78,111,32,66,114,101,97,107,80,111,105
0000670A  2042 7265 
0000670E  616B 506F 
00006712  69        
00006713  6E74 7320 11090          dc.b      110,116,115,32,83,101,116,0
00006717  5365 7400 
                    11091   @m68kde~2_67:
0000671C  0D0A 2533 11092          dc.b      13,10,37,51,100,32,32,32,32,32,36,37,48,56,120
00006720  6420 2020 
00006724  2020 2425 
00006728  3038 78   
0000672B  00        11093          dc.b      0
                    11094   @m68kde~2_68:
0000672C  2020 2020 11095          dc.b      32,32,32,32,37,115,0
00006730  2573 00   
                    11096   @m68kde~2_69:
00006734  0D0A 4E75 11097          dc.b      13,10,78,117,109,32,32,32,32,32,65,100,100,114
00006738  6D20 2020 
0000673C  2020 4164 
00006740  6472      
00006742  6573 7300 11098          dc.b      101,115,115,0
                    11099   @m68kde~2_70:
00006746  0D0A 2D2D 11100          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
0000674A  2D20 2020 
0000674E  2020 2D2D 
00006752  2D2D 2D   
00006755  2D2D 2D2D 11101          dc.b      45,45,45,45,0
00006759  00        
                    11102   @m68kde~2_71:
0000675A  0D0A 4E6F 11103          dc.b      13,10,78,111,32,87,97,116,99,104,80,111,105
0000675E  2057 6174 
00006762  6368 506F 
00006766  69        
00006767  6E74 7320 11104          dc.b      110,116,115,32,83,101,116,0
0000676B  5365 7400 
                    11105   @m68kde~2_72:
00006770  0D0A 456E 11106          dc.b      13,10,69,110,116,101,114,32,66,114,101,97,107
00006774  7465 7220 
00006778  4272 6561 
0000677C  6B        
0000677D  2050 6F69 11107          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
00006781  6E74 204E 
00006785  756D 6265 
00006789  72        
0000678A  3A20 00   11108          dc.b      58,32,0
                    11109   @m68kde~2_73:
0000678E  0D0A 496C 11110          dc.b      13,10,73,108,108,101,103,97,108,32,82,97,110
00006792  6C65 6761 
00006796  6C20 5261 
0000679A  6E        
0000679B  6765 203A 11111          dc.b      103,101,32,58,32,85,115,101,32,48,32,45,32,55
0000679F  2055 7365 
000067A3  2030 202D 
000067A7  2037      
000067A9  00        11112          dc.b      0
                    11113   @m68kde~2_74:
000067AA  0D0A 4272 11114          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
000067AE  6561 6B20 
000067B2  506F 696E 
000067B6  74        
000067B7  2043 6C65 11115          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
000067BB  6172 6564 
000067BF  2E2E 2E2E 
000067C3  2E        
000067C4  0D0A 00   11116          dc.b      13,10,0
                    11117   @m68kde~2_75:
000067C8  0D0A 4272 11118          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
000067CC  6561 6B20 
000067D0  506F 696E 
000067D4  74        
000067D5  2077 6173 11119          dc.b      32,119,97,115,110,39,116,32,83,101,116,46,46
000067D9  6E27 7420 
000067DD  5365 742E 
000067E1  2E        
000067E2  2E2E 2E00 11120          dc.b      46,46,46,0
                    11121   @m68kde~2_76:
000067E6  0D0A 456E 11122          dc.b      13,10,69,110,116,101,114,32,87,97,116,99,104
000067EA  7465 7220 
000067EE  5761 7463 
000067F2  68        
000067F3  2050 6F69 11123          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
000067F7  6E74 204E 
000067FB  756D 6265 
000067FF  72        
00006800  3A20 00   11124          dc.b      58,32,0
                    11125   @m68kde~2_77:
00006804  0D0A 5761 11126          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00006808  7463 6820 
0000680C  506F 696E 
00006810  74        
00006811  2043 6C65 11127          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
00006815  6172 6564 
00006819  2E2E 2E2E 
0000681D  2E        
0000681E  0D0A 00   11128          dc.b      13,10,0
                    11129   @m68kde~2_78:
00006822  0D0A 5761 11130          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00006826  7463 6820 
0000682A  506F 696E 
0000682E  74        
0000682F  2057 6173 11131          dc.b      32,87,97,115,32,110,111,116,32,83,101,116,46
00006833  206E 6F74 
00006837  2053 6574 
0000683B  2E        
0000683C  2E2E 2E2E 11132          dc.b      46,46,46,46,0
00006840  00        
                    11133   @m68kde~2_79:
00006842  0D0A 4E6F 11134          dc.b      13,10,78,111,32,70,82,69,69,32,66,114,101,97
00006846  2046 5245 
0000684A  4520 4272 
0000684E  6561      
00006850  6B20 506F 11135          dc.b      107,32,80,111,105,110,116,115,46,46,46,46,46
00006854  696E 7473 
00006858  2E2E 2E2E 
0000685C  2E        
0000685D  00        11136          dc.b      0
                    11137   @m68kde~2_80:
0000685E  0D0A 4272 11138          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00006862  6561 6B20 
00006866  506F 696E 
0000686A  74        
0000686B  2041 6464 11139          dc.b      32,65,100,100,114,101,115,115,58,32,0
0000686F  7265 7373 
00006873  3A20 00   
                    11140   @m68kde~2_81:
00006876  0D0A 4572 11141          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
0000687A  726F 7220 
0000687E  3A20 4272 
00006882  65        
00006883  616B 2050 11142          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
00006887  6F69 6E74 
0000688B  7320 4341 
0000688F  4E        
00006890  4E4F 5420 11143          dc.b      78,79,84,32,98,101,32,115,101,116,32,97,116
00006894  6265 2073 
00006898  6574 2061 
0000689C  74        
0000689D  204F 4444 11144          dc.b      32,79,68,68,32,97,100,100,114,101,115,115,101
000068A1  2061 6464 
000068A5  7265 7373 
000068A9  65        
000068AA  7300      11145          dc.b      115,0
                    11146   @m68kde~2_82:
000068AC  0D0A 4572 11147          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
000068B0  726F 7220 
000068B4  3A20 4272 
000068B8  65        
000068B9  616B 2050 11148          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
000068BD  6F69 6E74 
000068C1  7320 4341 
000068C5  4E        
000068C6  4E4F 5420 11149          dc.b      78,79,84,32,98,101,32,115,101,116,32,102,111
000068CA  6265 2073 
000068CE  6574 2066 
000068D2  6F        
000068D3  7220 524F 11150          dc.b      114,32,82,79,77,32,105,110,32,82,97,110,103
000068D7  4D20 696E 
000068DB  2052 616E 
000068DF  67        
000068E0  6520 3A20 11151          dc.b      101,32,58,32,91,36,48,45,36,48,48,48,48,55,70
000068E4  5B24 302D 
000068E8  2430 3030 
000068EC  3037 46   
000068EF  4646 5D00 11152          dc.b      70,70,93,0
                    11153   @m68kde~2_83:
000068F4  0D0A 4572 11154          dc.b      13,10,69,114,114,111,114,58,32,66,114,101,97
000068F8  726F 723A 
000068FC  2042 7265 
00006900  61        
00006901  6B20 506F 11155          dc.b      107,32,80,111,105,110,116,32,65,108,114,101
00006905  696E 7420 
00006909  416C 7265 
0000690D  6164 7920 11156          dc.b      97,100,121,32,69,120,105,115,116,115,32,97,116
00006911  4578 6973 
00006915  7473 2061 
00006919  74        
0000691A  2041 6464 11157          dc.b      32,65,100,100,114,101,115,115,32,58,32,37,48
0000691E  7265 7373 
00006922  203A 2025 
00006926  30        
00006927  3878 0D0A 11158          dc.b      56,120,13,10,0
0000692B  00        
                    11159   @m68kde~2_84:
0000692C  0D0A 4272 11160          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00006930  6561 6B20 
00006934  506F 696E 
00006938  74        
00006939  2053 6574 11161          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
0000693D  2061 7420 
00006941  4164 6472 
00006945  65        
00006946  7373 3A20 11162          dc.b      115,115,58,32,91,36,37,48,56,120,93,44,32,73
0000694A  5B24 2530 
0000694E  3878 5D2C 
00006952  2049      
00006954  6E73 7472 11163          dc.b      110,115,116,114,117,99,116,105,111,110,32,61
00006958  7563 7469 
0000695C  6F6E 203D 
00006960  2025 7300 11164          dc.b      32,37,115,0
                    11165   @m68kde~2_85:
00006964  0D0A 4E6F 11166          dc.b      13,10,78,111,32,70,82,69,69,32,87,97,116,99
00006968  2046 5245 
0000696C  4520 5761 
00006970  7463      
00006972  6820 506F 11167          dc.b      104,32,80,111,105,110,116,115,46,46,46,46,46
00006976  696E 7473 
0000697A  2E2E 2E2E 
0000697E  2E        
0000697F  00        11168          dc.b      0
                    11169   @m68kde~2_86:
00006980  0D0A 5761 11170          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00006984  7463 6820 
00006988  506F 696E 
0000698C  74        
0000698D  2041 6464 11171          dc.b      32,65,100,100,114,101,115,115,58,32,0
00006991  7265 7373 
00006995  3A20 00   
                    11172   @m68kde~2_87:
00006998  0D0A 4572 11173          dc.b      13,10,69,114,114,111,114,58,32,87,97,116,99
0000699C  726F 723A 
000069A0  2057 6174 
000069A4  63        
000069A5  6820 506F 11174          dc.b      104,32,80,111,105,110,116,32,65,108,114,101
000069A9  696E 7420 
000069AD  416C 7265 
000069B1  6164 7920 11175          dc.b      97,100,121,32,83,101,116,32,97,116,32,65,100
000069B5  5365 7420 
000069B9  6174 2041 
000069BD  64        
000069BE  6472 6573 11176          dc.b      100,114,101,115,115,32,58,32,37,48,56,120,13
000069C2  7320 3A20 
000069C6  2530 3878 
000069CA  0D        
000069CB  0A00      11177          dc.b      10,0
                    11178   @m68kde~2_88:
000069CE  0D0A 5761 11179          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
000069D2  7463 6820 
000069D6  506F 696E 
000069DA  74        
000069DB  2053 6574 11180          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
000069DF  2061 7420 
000069E3  4164 6472 
000069E7  65        
000069E8  7373 3A20 11181          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
000069EC  5B24 2530 
000069F0  3878 5D00 
                    11182   @m68kde~2_89:
000069F4  0D0A 0D0A 11183          dc.b      13,10,13,10,13,10,13,10,64,66,82,69,65,75,80
000069F8  0D0A 0D0A 
000069FC  4042 5245 
00006A00  414B 50   
00006A03  4F49 4E54 11184          dc.b      79,73,78,84,0
00006A07  00        
                    11185   @m68kde~2_90:
00006A08  0D0A 5369 11186          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00006A0C  6E67 6C65 
00006A10  2053 7465 
00006A14  70        
00006A15  203A 205B 11187          dc.b      32,58,32,91,79,78,93,0
00006A19  4F4E 5D00 
                    11188   @m68kde~2_91:
00006A1E  0D0A 4272 11189          dc.b      13,10,66,114,101,97,107,80,111,105,110,116,115
00006A22  6561 6B50 
00006A26  6F69 6E74 
00006A2A  73        
00006A2B  203A 205B 11190          dc.b      32,58,32,91,69,110,97,98,108,101,100,93,0
00006A2F  456E 6162 
00006A33  6C65 645D 
00006A37  00        
                    11191   @m68kde~2_92:
00006A38  0D0A 5072 11192          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00006A3C  6573 7320 
00006A40  3C45 5343 
00006A44  3E20      
00006A46  746F 2052 11193          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
00006A4A  6573 756D 
00006A4E  6520 5573 
00006A52  6572 2050 11194          dc.b      101,114,32,80,114,111,103,114,97,109,13,10,0
00006A56  726F 6772 
00006A5A  616D 0D0A 
00006A5E  00        
                    11195   @m68kde~2_93:
00006A60  0D0A 556E 11196          dc.b      13,10,85,110,107,110,111,119,110,32,67,111,109
00006A64  6B6E 6F77 
00006A68  6E20 436F 
00006A6C  6D        
00006A6D  6D61 6E64 11197          dc.b      109,97,110,100,46,46,46,46,46,13,10,0
00006A71  2E2E 2E2E 
00006A75  2E0D 0A00 
                    11198   @m68kde~2_94:
00006A7A  0D0A 5072 11199          dc.b      13,10,80,114,111,103,114,97,109,32,69,110,100
00006A7E  6F67 7261 
00006A82  6D20 456E 
00006A86  64        
00006A87  6564 2028 11200          dc.b      101,100,32,40,84,82,65,80,32,35,49,53,41,46
00006A8B  5452 4150 
00006A8F  2023 3135 
00006A93  292E      
00006A95  2E2E 2E00 11201          dc.b      46,46,46,0
                    11202   @m68kde~2_95:
00006A9A  0D0A 4B69 11203          dc.b      13,10,75,105,108,108,32,65,108,108,32,66,114
00006A9E  6C6C 2041 
00006AA2  6C6C 2042 
00006AA6  72        
00006AA7  6561 6B20 11204          dc.b      101,97,107,32,80,111,105,110,116,115,46,46,46
00006AAB  506F 696E 
00006AAF  7473 2E2E 
00006AB3  2E        
00006AB4  2879 2F6E 11205          dc.b      40,121,47,110,41,63,0
00006AB8  293F 00   
                    11206   @m68kde~2_96:
00006ABC  0D0A 4B69 11207          dc.b      13,10,75,105,108,108,32,65,108,108,32,87,97
00006AC0  6C6C 2041 
00006AC4  6C6C 2057 
00006AC8  61        
00006AC9  7463 6820 11208          dc.b      116,99,104,32,80,111,105,110,116,115,46,46,46
00006ACD  506F 696E 
00006AD1  7473 2E2E 
00006AD5  2E        
00006AD6  2879 2F6E 11209          dc.b      40,121,47,110,41,63,0
00006ADA  293F 00   
                    11210   @m68kde~2_97:
00006ADE  0D0A 2D2D 11211          dc.b      13,10,45,45,45,45,45,45,45,45,45,45,45,45,45
00006AE2  2D2D 2D2D 
00006AE6  2D2D 2D2D 
00006AEA  2D2D 2D   
00006AED  2D2D 2D2D 11212          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00006AF1  2D2D 2D2D 
00006AF5  2D2D 2D2D 
00006AF9  2D2D 2D   
00006AFC  2D2D 2D2D 11213          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00006B00  2D2D 2D2D 
00006B04  2D2D 2D2D 
00006B08  2D2D 2D   
00006B0B  2D2D 2D2D 11214          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00006B0F  2D2D 2D2D 
00006B13  2D2D 2D2D 
00006B17  2D2D 2D   
00006B1A  2D2D 2D2D 11215          dc.b      45,45,45,45,45,45,0
00006B1E  2D2D 00   
                    11216   @m68kde~2_98:
00006B22  0D0A 2020 11217          dc.b      13,10,32,32,68,101,98,117,103,103,101,114,32
00006B26  4465 6275 
00006B2A  6767 6572 
00006B2E  20        
00006B2F  436F 6D6D 11218          dc.b      67,111,109,109,97,110,100,32,83,117,109,109
00006B33  616E 6420 
00006B37  5375 6D6D 
00006B3B  6172 7900 11219          dc.b      97,114,121,0
                    11220   @m68kde~2_99:
00006B40  0D0A 2020 11221          dc.b      13,10,32,32,46,40,114,101,103,41,32,32,32,32
00006B44  2E28 7265 
00006B48  6729 2020 
00006B4C  2020      
00006B4E  2020 202D 11222          dc.b      32,32,32,45,32,67,104,97,110,103,101,32,82,101
00006B52  2043 6861 
00006B56  6E67 6520 
00006B5A  5265      
00006B5C  6769 7374 11223          dc.b      103,105,115,116,101,114,115,58,32,101,46,103
00006B60  6572 733A 
00006B64  2065 2E67 
00006B68  2041 302D 11224          dc.b      32,65,48,45,65,55,44,68,48,45,68,55,44,80,67
00006B6C  4137 2C44 
00006B70  302D 4437 
00006B74  2C50 43   
00006B77  2C53 5350 11225          dc.b      44,83,83,80,44,85,83,80,44,83,82,0
00006B7B  2C55 5350 
00006B7F  2C53 5200 
                    11226   @m68kde~2_100:
00006B84  0D0A 2020 11227          dc.b      13,10,32,32,66,68,47,66,83,47,66,67,47,66,75
00006B88  4244 2F42 
00006B8C  532F 4243 
00006B90  2F42 4B   
00006B93  2020 2D20 11228          dc.b      32,32,45,32,66,114,101,97,107,32,80,111,105
00006B97  4272 6561 
00006B9B  6B20 506F 
00006B9F  69        
00006BA0  6E74 3A20 11229          dc.b      110,116,58,32,68,105,115,112,108,97,121,47,83
00006BA4  4469 7370 
00006BA8  6C61 792F 
00006BAC  53        
00006BAD  6574 2F43 11230          dc.b      101,116,47,67,108,101,97,114,47,75,105,108,108
00006BB1  6C65 6172 
00006BB5  2F4B 696C 
00006BB9  6C        
00006BBA  00        11231          dc.b      0
                    11232   @m68kde~2_101:
00006BBC  0D0A 2020 11233          dc.b      13,10,32,32,67,32,32,32,32,32,32,32,32,32,32
00006BC0  4320 2020 
00006BC4  2020 2020 
00006BC8  2020 20   
00006BCB  2020 2D20 11234          dc.b      32,32,45,32,67,111,112,121,32,80,114,111,103
00006BCF  436F 7079 
00006BD3  2050 726F 
00006BD7  67        
00006BD8  7261 6D20 11235          dc.b      114,97,109,32,102,114,111,109,32,70,108,97,115
00006BDC  6672 6F6D 
00006BE0  2046 6C61 
00006BE4  73        
00006BE5  6820 746F 11236          dc.b      104,32,116,111,32,77,97,105,110,32,77,101,109
00006BE9  204D 6169 
00006BED  6E20 4D65 
00006BF1  6D        
00006BF2  6F72 7900 11237          dc.b      111,114,121,0
                    11238   @m68kde~2_102:
00006BF6  0D0A 2020 11239          dc.b      13,10,32,32,68,73,32,32,32,32,32,32,32,32,32
00006BFA  4449 2020 
00006BFE  2020 2020 
00006C02  2020 20   
00006C05  2020 2D20 11240          dc.b      32,32,45,32,68,105,115,97,115,115,101,109,98
00006C09  4469 7361 
00006C0D  7373 656D 
00006C11  62        
00006C12  6C65 2050 11241          dc.b      108,101,32,80,114,111,103,114,97,109,0
00006C16  726F 6772 
00006C1A  616D 00   
                    11242   @m68kde~2_103:
00006C1E  0D0A 2020 11243          dc.b      13,10,32,32,68,85,32,32,32,32,32,32,32,32,32
00006C22  4455 2020 
00006C26  2020 2020 
00006C2A  2020 20   
00006C2D  2020 2D20 11244          dc.b      32,32,45,32,68,117,109,112,32,77,101,109,111
00006C31  4475 6D70 
00006C35  204D 656D 
00006C39  6F        
00006C3A  7279 2043 11245          dc.b      114,121,32,67,111,110,116,101,110,116,115,32
00006C3E  6F6E 7465 
00006C42  6E74 7320 
00006C46  746F 2053 11246          dc.b      116,111,32,83,99,114,101,101,110,0
00006C4A  6372 6565 
00006C4E  6E00      
                    11247   @m68kde~2_104:
00006C50  0D0A 2020 11248          dc.b      13,10,32,32,69,32,32,32,32,32,32,32,32,32,32
00006C54  4520 2020 
00006C58  2020 2020 
00006C5C  2020 20   
00006C5F  2020 2D20 11249          dc.b      32,32,45,32,69,110,116,101,114,32,83,116,114
00006C63  456E 7465 
00006C67  7220 5374 
00006C6B  72        
00006C6C  696E 6720 11250          dc.b      105,110,103,32,105,110,116,111,32,77,101,109
00006C70  696E 746F 
00006C74  204D 656D 
00006C78  6F72 7900 11251          dc.b      111,114,121,0
                    11252   @m68kde~2_105:
00006C7C  0D0A 2020 11253          dc.b      13,10,32,32,70,32,32,32,32,32,32,32,32,32,32
00006C80  4620 2020 
00006C84  2020 2020 
00006C88  2020 20   
00006C8B  2020 2D20 11254          dc.b      32,32,45,32,70,105,108,108,32,77,101,109,111
00006C8F  4669 6C6C 
00006C93  204D 656D 
00006C97  6F        
00006C98  7279 2077 11255          dc.b      114,121,32,119,105,116,104,32,68,97,116,97,0
00006C9C  6974 6820 
00006CA0  4461 7461 
00006CA4  00        
                    11256   @m68kde~2_106:
00006CA6  0D0A 2020 11257          dc.b      13,10,32,32,71,32,32,32,32,32,32,32,32,32,32
00006CAA  4720 2020 
00006CAE  2020 2020 
00006CB2  2020 20   
00006CB5  2020 2D20 11258          dc.b      32,32,45,32,71,111,32,80,114,111,103,114,97
00006CB9  476F 2050 
00006CBD  726F 6772 
00006CC1  61        
00006CC2  6D20 5374 11259          dc.b      109,32,83,116,97,114,116,105,110,103,32,97,116
00006CC6  6172 7469 
00006CCA  6E67 2061 
00006CCE  74        
00006CCF  2041 6464 11260          dc.b      32,65,100,100,114,101,115,115,58,32,36,37,48
00006CD3  7265 7373 
00006CD7  3A20 2425 
00006CDB  30        
00006CDC  3858 00   11261          dc.b      56,88,0
                    11262   @m68kde~2_107:
00006CE0  0D0A 2020 11263          dc.b      13,10,32,32,76,32,32,32,32,32,32,32,32,32,32
00006CE4  4C20 2020 
00006CE8  2020 2020 
00006CEC  2020 20   
00006CEF  2020 2D20 11264          dc.b      32,32,45,32,76,111,97,100,32,80,114,111,103
00006CF3  4C6F 6164 
00006CF7  2050 726F 
00006CFB  67        
00006CFC  7261 6D20 11265          dc.b      114,97,109,32,40,46,72,69,88,32,102,105,108
00006D00  282E 4845 
00006D04  5820 6669 
00006D08  6C        
00006D09  6529 2066 11266          dc.b      101,41,32,102,114,111,109,32,76,97,112,116,111
00006D0D  726F 6D20 
00006D11  4C61 7074 
00006D15  6F        
00006D16  7000      11267          dc.b      112,0
                    11268   @m68kde~2_108:
00006D18  0D0A 2020 11269          dc.b      13,10,32,32,77,32,32,32,32,32,32,32,32,32,32
00006D1C  4D20 2020 
00006D20  2020 2020 
00006D24  2020 20   
00006D27  2020 2D20 11270          dc.b      32,32,45,32,77,101,109,111,114,121,32,69,120
00006D2B  4D65 6D6F 
00006D2F  7279 2045 
00006D33  78        
00006D34  616D 696E 11271          dc.b      97,109,105,110,101,32,97,110,100,32,67,104,97
00006D38  6520 616E 
00006D3C  6420 4368 
00006D40  61        
00006D41  6E67 6500 11272          dc.b      110,103,101,0
                    11273   @m68kde~2_109:
00006D46  0D0A 2020 11274          dc.b      13,10,32,32,80,32,32,32,32,32,32,32,32,32,32
00006D4A  5020 2020 
00006D4E  2020 2020 
00006D52  2020 20   
00006D55  2020 2D20 11275          dc.b      32,32,45,32,80,114,111,103,114,97,109,32,70
00006D59  5072 6F67 
00006D5D  7261 6D20 
00006D61  46        
00006D62  6C61 7368 11276          dc.b      108,97,115,104,32,77,101,109,111,114,121,32
00006D66  204D 656D 
00006D6A  6F72 7920 
00006D6E  7769 7468 11277          dc.b      119,105,116,104,32,85,115,101,114,32,80,114
00006D72  2055 7365 
00006D76  7220 5072 
00006D7A  6F67 7261 11278          dc.b      111,103,114,97,109,0
00006D7E  6D00      
                    11279   @m68kde~2_110:
00006D80  0D0A 2020 11280          dc.b      13,10,32,32,82,32,32,32,32,32,32,32,32,32,32
00006D84  5220 2020 
00006D88  2020 2020 
00006D8C  2020 20   
00006D8F  2020 2D20 11281          dc.b      32,32,45,32,68,105,115,112,108,97,121,32,54
00006D93  4469 7370 
00006D97  6C61 7920 
00006D9B  36        
00006D9C  3830 3030 11282          dc.b      56,48,48,48,32,82,101,103,105,115,116,101,114
00006DA0  2052 6567 
00006DA4  6973 7465 
00006DA8  72        
00006DA9  7300      11283          dc.b      115,0
                    11284   @m68kde~2_111:
00006DAC  0D0A 2020 11285          dc.b      13,10,32,32,83,32,32,32,32,32,32,32,32,32,32
00006DB0  5320 2020 
00006DB4  2020 2020 
00006DB8  2020 20   
00006DBB  2020 2D20 11286          dc.b      32,32,45,32,84,111,103,103,108,101,32,79,78
00006DBF  546F 6767 
00006DC3  6C65 204F 
00006DC7  4E        
00006DC8  2F4F 4646 11287          dc.b      47,79,70,70,32,83,105,110,103,108,101,32,83
00006DCC  2053 696E 
00006DD0  676C 6520 
00006DD4  53        
00006DD5  7465 7020 11288          dc.b      116,101,112,32,77,111,100,101,0
00006DD9  4D6F 6465 
00006DDD  00        
                    11289   @m68kde~2_112:
00006DDE  0D0A 2020 11290          dc.b      13,10,32,32,84,77,32,32,32,32,32,32,32,32,32
00006DE2  544D 2020 
00006DE6  2020 2020 
00006DEA  2020 20   
00006DED  2020 2D20 11291          dc.b      32,32,45,32,84,101,115,116,32,77,101,109,111
00006DF1  5465 7374 
00006DF5  204D 656D 
00006DF9  6F        
00006DFA  7279 00   11292          dc.b      114,121,0
                    11293   @m68kde~2_113:
00006DFE  0D0A 2020 11294          dc.b      13,10,32,32,84,83,32,32,32,32,32,32,32,32,32
00006E02  5453 2020 
00006E06  2020 2020 
00006E0A  2020 20   
00006E0D  2020 2D20 11295          dc.b      32,32,45,32,84,101,115,116,32,83,119,105,116
00006E11  5465 7374 
00006E15  2053 7769 
00006E19  74        
00006E1A  6368 6573 11296          dc.b      99,104,101,115,58,32,83,87,55,45,48,0
00006E1E  3A20 5357 
00006E22  372D 3000 
                    11297   @m68kde~2_114:
00006E26  0D0A 2020 11298          dc.b      13,10,32,32,84,68,32,32,32,32,32,32,32,32,32
00006E2A  5444 2020 
00006E2E  2020 2020 
00006E32  2020 20   
00006E35  2020 2D20 11299          dc.b      32,32,45,32,84,101,115,116,32,68,105,115,112
00006E39  5465 7374 
00006E3D  2044 6973 
00006E41  70        
00006E42  6C61 7973 11300          dc.b      108,97,121,115,58,32,76,69,68,115,32,97,110
00006E46  3A20 4C45 
00006E4A  4473 2061 
00006E4E  6E        
00006E4F  6420 372D 11301          dc.b      100,32,55,45,83,101,103,109,101,110,116,0
00006E53  5365 676D 
00006E57  656E 7400 
                    11302   @m68kde~2_115:
00006E5C  0D0A 2020 11303          dc.b      13,10,32,32,87,68,47,87,83,47,87,67,47,87,75
00006E60  5744 2F57 
00006E64  532F 5743 
00006E68  2F57 4B   
00006E6B  2020 2D20 11304          dc.b      32,32,45,32,87,97,116,99,104,32,80,111,105,110
00006E6F  5761 7463 
00006E73  6820 506F 
00006E77  696E      
00006E79  743A 2044 11305          dc.b      116,58,32,68,105,115,112,108,97,121,47,83,101
00006E7D  6973 706C 
00006E81  6179 2F53 
00006E85  65        
00006E86  742F 436C 11306          dc.b      116,47,67,108,101,97,114,47,75,105,108,108,0
00006E8A  6561 722F 
00006E8E  4B69 6C6C 
00006E92  00        
                    11307   @m68kde~2_116:
00006E94  0D0A 2300 11308          dc.b      13,10,35,0
                    11309   @m68kde~2_117:
00006E98  0D0A 5072 11310          dc.b      13,10,80,114,111,103,114,97,109,32,82,117,110
00006E9C  6F67 7261 
00006EA0  6D20 5275 
00006EA4  6E        
00006EA5  6E69 6E67 11311          dc.b      110,105,110,103,46,46,46,46,46,0
00006EA9  2E2E 2E2E 
00006EAD  2E00      
                    11312   @m68kde~2_118:
00006EB0  0D0A 5072 11313          dc.b      13,10,80,114,101,115,115,32,60,82,69,83,69,84
00006EB4  6573 7320 
00006EB8  3C52 4553 
00006EBC  4554      
00006EBE  3E20 6275 11314          dc.b      62,32,98,117,116,116,111,110,32,60,75,101,121
00006EC2  7474 6F6E 
00006EC6  203C 4B65 
00006ECA  79        
00006ECB  303E 206F 11315          dc.b      48,62,32,111,110,32,68,69,49,32,116,111,32,115
00006ECF  6E20 4445 
00006ED3  3120 746F 
00006ED7  2073      
00006ED9  746F 7000 11316          dc.b      116,111,112,0
                    11317   @m68kde~2_119:
00006EDE  0D0A 4572 11318          dc.b      13,10,69,114,114,111,114,58,32,80,114,101,115
00006EE2  726F 723A 
00006EE6  2050 7265 
00006EEA  73        
00006EEB  7320 2747 11319          dc.b      115,32,39,71,39,32,102,105,114,115,116,32,116
00006EEF  2720 6669 
00006EF3  7273 7420 
00006EF7  74        
00006EF8  6F20 7374 11320          dc.b      111,32,115,116,97,114,116,32,112,114,111,103
00006EFC  6172 7420 
00006F00  7072 6F67 
00006F04  7261 6D00 11321          dc.b      114,97,109,0
                    11322   @m68kde~2_120:
00006F08  0D0A 5369 11323          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00006F0C  6E67 6C65 
00006F10  2053 7465 
00006F14  70        
00006F15  2020 3A5B 11324          dc.b      32,32,58,91,79,78,93,0
00006F19  4F4E 5D00 
                    11325   @m68kde~2_121:
00006F1E  0D0A 5072 11326          dc.b      13,10,80,114,101,115,115,32,39,71,39,32,116
00006F22  6573 7320 
00006F26  2747 2720 
00006F2A  74        
00006F2B  6F20 5472 11327          dc.b      111,32,84,114,97,99,101,32,80,114,111,103,114
00006F2F  6163 6520 
00006F33  5072 6F67 
00006F37  72        
00006F38  616D 2066 11328          dc.b      97,109,32,102,114,111,109,32,97,100,100,114
00006F3C  726F 6D20 
00006F40  6164 6472 
00006F44  6573 7320 11329          dc.b      101,115,115,32,36,37,88,46,46,46,46,46,0
00006F48  2425 582E 
00006F4C  2E2E 2E2E 
00006F50  00        
                    11330   @m68kde~2_122:
00006F52  0D0A 5075 11331          dc.b      13,10,80,117,115,104,32,60,82,69,83,69,84,32
00006F56  7368 203C 
00006F5A  5245 5345 
00006F5E  5420      
00006F60  4275 7474 11332          dc.b      66,117,116,116,111,110,62,32,116,111,32,83,116
00006F64  6F6E 3E20 
00006F68  746F 2053 
00006F6C  74        
00006F6D  6F70 2E2E 11333          dc.b      111,112,46,46,46,46,46,0
00006F71  2E2E 2E00 
                    11334   @m68kde~2_123:
00006F76  0D0A 5369 11335          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00006F7A  6E67 6C65 
00006F7E  2053 7465 
00006F82  70        
00006F83  203A 205B 11336          dc.b      32,58,32,91,79,70,70,93,0
00006F87  4F46 465D 
00006F8B  00        
                    11337   @m68kde~2_124:
00006F8C  0D0A 4272 11338          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00006F90  6561 6B20 
00006F94  506F 696E 
00006F98  74        
00006F99  7320 3A5B 11339          dc.b      115,32,58,91,69,110,97,98,108,101,100,93,0
00006F9D  456E 6162 
00006FA1  6C65 645D 
00006FA5  00        
                    11340   @m68kde~2_125:
00006FA6  0D0A 5072 11341          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00006FAA  6573 7320 
00006FAE  3C45 5343 
00006FB2  3E20      
00006FB4  746F 2052 11342          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
00006FB8  6573 756D 
00006FBC  6520 5573 
00006FC0  6572 2050 11343          dc.b      101,114,32,80,114,111,103,114,97,109,46,46,46
00006FC4  726F 6772 
00006FC8  616D 2E2E 
00006FCC  2E        
00006FCD  2E2E 00   11344          dc.b      46,46,0
                    11345   @m68kde~2_126:
00006FD0  0D0A 5369 11346          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00006FD4  6E67 6C65 
00006FD8  2053 7465 
00006FDC  70        
00006FDD  2020 3A5B 11347          dc.b      32,32,58,91,79,70,70,93,0
00006FE1  4F46 465D 
00006FE5  00        
                    11348   @m68kde~2_127:
00006FE6  0D0A 0D0A 11349          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
00006FEA  5072 6F67 
00006FEE  7261 6D20 
00006FF2  41        
00006FF3  424F 5254 11350          dc.b      66,79,82,84,32,33,33,33,33,33,33,13,10,0
00006FF7  2021 2121 
00006FFB  2121 210D 
00006FFF  0A00      
                    11351   @m68kde~2_128:
00007002  2573 0D0A 11352          dc.b      37,115,13,10,0
00007006  00        
                    11353   @m68kde~2_129:
00007008  0D0A 0D0A 11354          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
0000700C  5072 6F67 
00007010  7261 6D20 
00007014  41        
00007015  424F 5254 11355          dc.b      66,79,82,84,32,33,33,33,33,33,0
00007019  2021 2121 
0000701D  2121 00   
                    11356   @m68kde~2_130:
00007020  0D0A 556E 11357          dc.b      13,10,85,110,104,97,110,100,108,101,100,32,73
00007024  6861 6E64 
00007028  6C65 6420 
0000702C  49        
0000702D  6E74 6572 11358          dc.b      110,116,101,114,114,117,112,116,58,32,73,82
00007031  7275 7074 
00007035  3A20 4952 
00007039  5125 6420 11359          dc.b      81,37,100,32,33,33,33,33,33,0
0000703D  2121 2121 
00007041  2100      
                    11360   @m68kde~2_131:
00007044  4144 4452 11361          dc.b      65,68,68,82,69,83,83,32,69,82,82,79,82,58,32
00007048  4553 5320 
0000704C  4552 524F 
00007050  523A 20   
00007053  3136 206F 11362          dc.b      49,54,32,111,114,32,51,50,32,66,105,116,32,84
00007057  7220 3332 
0000705B  2042 6974 
0000705F  2054      
00007061  7261 6E73 11363          dc.b      114,97,110,115,102,101,114,32,116,111,47,102
00007065  6665 7220 
00007069  746F 2F66 
0000706D  726F 6D20 11364          dc.b      114,111,109,32,97,110,32,79,68,68,32,65,100
00007071  616E 204F 
00007075  4444 2041 
00007079  64        
0000707A  6472 6573 11365          dc.b      100,114,101,115,115,46,46,46,46,0
0000707E  732E 2E2E 
00007082  2E00      
                    11366   @m68kde~2_132:
00007084  556E 6861 11367          dc.b      85,110,104,97,110,100,108,101,100,32,84,114
00007088  6E64 6C65 
0000708C  6420 5472 
00007090  6170 2021 11368          dc.b      97,112,32,33,33,33,33,33,0
00007094  2121 2121 
00007098  00        
                    11369   @m68kde~2_133:
0000709A  4255 5320 11370          dc.b      66,85,83,32,69,114,114,111,114,33,0
0000709E  4572 726F 
000070A2  7221 00   
                    11371   @m68kde~2_134:
000070A6  4144 4452 11372          dc.b      65,68,68,82,69,83,83,32,69,114,114,111,114,33
000070AA  4553 5320 
000070AE  4572 726F 
000070B2  7221      
000070B4  00        11373          dc.b      0
                    11374   @m68kde~2_135:
000070B6  494C 4C45 11375          dc.b      73,76,76,69,71,65,76,32,73,78,83,84,82,85,67
000070BA  4741 4C20 
000070BE  494E 5354 
000070C2  5255 43   
000070C5  5449 4F4E 11376          dc.b      84,73,79,78,0
000070C9  00        
                    11377   @m68kde~2_136:
000070CA  4449 5649 11378          dc.b      68,73,86,73,68,69,32,66,89,32,90,69,82,79,0
000070CE  4445 2042 
000070D2  5920 5A45 
000070D6  524F 00   
                    11379   @m68kde~2_137:
000070DA  2743 484B 11380          dc.b      39,67,72,75,39,32,73,78,83,84,82,85,67,84,73
000070DE  2720 494E 
000070E2  5354 5255 
000070E6  4354 49   
000070E9  4F4E 00   11381          dc.b      79,78,0
                    11382   @m68kde~2_138:
000070EC  5452 4150 11383          dc.b      84,82,65,80,86,32,73,78,83,84,82,85,67,84,73
000070F0  5620 494E 
000070F4  5354 5255 
000070F8  4354 49   
000070FB  4F4E 00   11384          dc.b      79,78,0
                    11385   @m68kde~2_139:
000070FE  5052 4956 11386          dc.b      80,82,73,86,73,76,69,71,69,32,86,73,79,76,65
00007102  494C 4547 
00007106  4520 5649 
0000710A  4F4C 41   
0000710D  5449 4F4E 11387          dc.b      84,73,79,78,0
00007111  00        
                    11388   @m68kde~2_140:
00007112  554E 494E 11389          dc.b      85,78,73,78,73,84,73,65,76,73,83,69,68,32,73
00007116  4954 4941 
0000711A  4C49 5345 
0000711E  4420 49   
00007121  5251 00   11390          dc.b      82,81,0
                    11391   @m68kde~2_141:
00007124  5350 5552 11392          dc.b      83,80,85,82,73,79,85,83,32,73,82,81,0
00007128  494F 5553 
0000712C  2049 5251 
00007130  00        
                    11393   @m68kde~2_142:
00007132  0D0A 5374 11394          dc.b      13,10,83,116,97,114,116,32,65,100,100,114,101
00007136  6172 7420 
0000713A  4164 6472 
0000713E  65        
0000713F  7373 2069 11395          dc.b      115,115,32,105,110,32,77,101,109,111,114,121
00007143  6E20 4D65 
00007147  6D6F 7279 
0000714B  3A20 00   11396          dc.b      58,32,0
                    11397   @m68kde~2_143:
0000714E  0D0A 456E 11398          dc.b      13,10,69,110,116,101,114,32,83,116,114,105,110
00007152  7465 7220 
00007156  5374 7269 
0000715A  6E        
0000715B  6720 2845 11399          dc.b      103,32,40,69,83,67,32,116,111,32,101,110,100
0000715F  5343 2074 
00007163  6F20 656E 
00007167  64        
00007168  2920 3A00 11400          dc.b      41,32,58,0
                    11401   @m68kde~2_144:
0000716C  0D0A 5374 11402          dc.b      13,10,83,116,97,114,116,32,65,100,100,114,101
00007170  6172 7420 
00007174  4164 6472 
00007178  65        
00007179  7373 00   11403          dc.b      115,115,0
                    11404   @m68kde~2_145:
0000717C  0D0A 456E 11405          dc.b      13,10,69,110,100,32,65,100,100,114,101,115,115
00007180  6420 4164 
00007184  6472 6573 
00007188  73        
00007189  00        11406          dc.b      0
                    11407   @m68kde~2_146:
0000718A  0D0A 5465 11408          dc.b      13,10,84,101,115,116,32,112,97,116,116,101,114
0000718E  7374 2070 
00007192  6174 7465 
00007196  72        
00007197  6E3A 200D 11409          dc.b      110,58,32,13,10,48,58,32,53,53,13,10,49,58,32
0000719B  0A30 3A20 
0000719F  3535 0D0A 
000071A3  313A 20   
000071A6  4141 0D0A 11410          dc.b      65,65,13,10,50,58,32,70,70,13,10,51,58,32,48
000071AA  323A 2046 
000071AE  460D 0A33 
000071B2  3A20 30   
000071B5  3000      11411          dc.b      48,0
                    11412   @m68kde~2_147:
000071B8  0D0A 4461 11413          dc.b      13,10,68,97,116,97,32,115,101,108,101,99,116
000071BC  7461 2073 
000071C0  656C 6563 
000071C4  74        
000071C5  6564 3A20 11414          dc.b      101,100,58,32,48,120,37,120,0
000071C9  3078 2578 
000071CD  00        
                    11415   @m68kde~2_148:
000071CE  0D0A 456E 11416          dc.b      13,10,69,110,116,101,114,32,39,66,39,44,32,39
000071D2  7465 7220 
000071D6  2742 272C 
000071DA  2027      
000071DC  5727 2C20 11417          dc.b      87,39,44,32,111,114,32,39,76,39,32,102,111,114
000071E0  6F72 2027 
000071E4  4C27 2066 
000071E8  6F72      
000071EA  2062 7974 11418          dc.b      32,98,121,116,101,115,44,32,119,111,114,100
000071EE  6573 2C20 
000071F2  776F 7264 
000071F6  732C 206F 11419          dc.b      115,44,32,111,114,32,108,111,110,103,32,119
000071FA  7220 6C6F 
000071FE  6E67 2077 
00007202  6F72 643A 11420          dc.b      111,114,100,58,32,0
00007206  2000      
                    11421   @m68kde~2_149:
00007208  0D0A 6277 11422          dc.b      13,10,98,119,108,32,115,101,108,101,99,116,101
0000720C  6C20 7365 
00007210  6C65 6374 
00007214  65        
00007215  643A 00   11423          dc.b      100,58,0
                    11424   @m68kde~2_150:
00007218  4C6F 6E67 11425          dc.b      76,111,110,103,32,119,111,114,100,0
0000721C  2077 6F72 
00007220  6400      
                    11426   @m68kde~2_151:
00007222  576F 7264 11427          dc.b      87,111,114,100,0
00007226  00        
                    11428   @m68kde~2_152:
00007228  4279 7465 11429          dc.b      66,121,116,101,115,0
0000722C  7300      
                    11430   @m68kde~2_153:
0000722E  0D0A 5772 11431          dc.b      13,10,87,114,105,116,101,32,99,111,109,112,108
00007232  6974 6520 
00007236  636F 6D70 
0000723A  6C        
0000723B  6574 652E 11432          dc.b      101,116,101,46,32,83,116,97,114,116,105,110
0000723F  2053 7461 
00007243  7274 696E 
00007247  6720 7265 11433          dc.b      103,32,114,101,97,100,46,0
0000724B  6164 2E00 
                    11434   @m68kde~2_154:
00007250  0D0A 5772 11435          dc.b      13,10,87,114,105,116,101,58,32,48,120,37,120
00007254  6974 653A 
00007258  2030 7825 
0000725C  78        
0000725D  2074 6F20 11436          dc.b      32,116,111,32,97,100,100,114,32,48,120,37,120
00007261  6164 6472 
00007265  2030 7825 
00007269  78        
0000726A  00        11437          dc.b      0
                    11438   @m68kde~2_155:
0000726C  0D0A 5265 11439          dc.b      13,10,82,101,97,100,32,99,111,109,112,108,101
00007270  6164 2063 
00007274  6F6D 706C 
00007278  65        
00007279  7465 2E00 11440          dc.b      116,101,46,0
                    11441   @m68kde~2_156:
0000727E  0D0A 4E6F 11442          dc.b      13,10,78,111,32,101,114,114,111,114,32,105,110
00007282  2065 7272 
00007286  6F72 2069 
0000728A  6E        
0000728B  206D 656D 11443          dc.b      32,109,101,109,32,116,101,115,116,0
0000728F  2074 6573 
00007293  7400      
                    11444   @m68kde~2_157:
00007296  0D0A 4552 11445          dc.b      13,10,69,82,82,79,82,58,32,65,100,100,114,101
0000729A  524F 523A 
0000729E  2041 6464 
000072A2  7265      
000072A4  7373 2030 11446          dc.b      115,115,32,48,120,37,120,32,100,97,116,97,32
000072A8  7825 7820 
000072AC  6461 7461 
000072B0  20        
000072B1  6973 2030 11447          dc.b      105,115,32,48,120,37,120,32,98,117,116,32,115
000072B5  7825 7820 
000072B9  6275 7420 
000072BD  73        
000072BE  686F 756C 11448          dc.b      104,111,117,108,100,32,98,101,32,48,120,37,120
000072C2  6420 6265 
000072C6  2030 7825 
000072CA  78        
000072CB  00        11449          dc.b      0
                    11450   @m68kde~2_158:
000072CC  0D0A 4641 11451          dc.b      13,10,70,65,73,76,58,32,77,101,109,32,116,101
000072D0  494C 3A20 
000072D4  4D65 6D20 
000072D8  7465      
000072DA  7374 2064 11452          dc.b      115,116,32,100,105,100,32,110,111,116,32,99
000072DE  6964 206E 
000072E2  6F74 2063 
000072E6  6F6D 706C 11453          dc.b      111,109,112,108,101,116,101,32,115,117,99,99
000072EA  6574 6520 
000072EE  7375 6363 
000072F2  6573 7366 11454          dc.b      101,115,115,102,117,108,108,121,46,0
000072F6  756C 6C79 
000072FA  2E00      
                    11455   @m68kde~2_159:
000072FC  0D0A 5265 11456          dc.b      13,10,82,101,97,100,58,32,65,100,100,114,101
00007300  6164 3A20 
00007304  4164 6472 
00007308  65        
00007309  7373 2030 11457          dc.b      115,115,32,48,120,37,120,32,100,97,116,97,32
0000730D  7825 7820 
00007311  6461 7461 
00007315  20        
00007316  6973 2030 11458          dc.b      105,115,32,48,120,37,120,0
0000731A  7825 7800 
                    11459   @m68kde~2_160:
0000731E  4C61 6232 11460          dc.b      76,97,98,50,32,68,114,97,109,32,76,79,76,0
00007322  2044 7261 
00007326  6D20 4C4F 
0000732A  4C00      
                    11461   @m68kde~2_161:
0000732C  4161 7261 11462          dc.b      65,97,114,97,110,32,80,111,111,110,32,51,54
00007330  6E20 506F 
00007334  6F6E 2033 
00007338  36        
00007339  3232 3832 11463          dc.b      50,50,56,50,48,51,0
0000733D  3033 00   
                    11464   @m68kde~2_162:
00007340  0D0A 5275 11465          dc.b      13,10,82,117,110,110,105,110,103,46,46,46,46
00007344  6E6E 696E 
00007348  672E 2E2E 
0000734C  2E        
0000734D  2E00      11466          dc.b      46,0
                    11467   @m68kde~2_163:
00007350  5275 6E6E 11468          dc.b      82,117,110,110,105,110,103,46,46,46,46,46,0
00007354  696E 672E 
00007358  2E2E 2E2E 
0000735C  00        
                    11469   @m68kde~2_164:
0000735E  4279 3A20 11470          dc.b      66,121,58,32,80,74,32,68,97,118,105,101,115
00007362  504A 2044 
00007366  6176 6965 
0000736A  73        
0000736B  00        11471          dc.b      0
                    11472   @m68kde~2_165:
0000736C  0D0A 2573 11473          dc.b      13,10,37,115,0
00007370  00        
                    11474   @m68kde~2_166:
00007372  2E42 2000 11475          dc.b      46,66,32,0
                    11476   @m68kde~2_167:
00007376  2E57 2000 11477          dc.b      46,87,32,0
                    11478   @m68kde~2_168:
0000737A  2E4C 2000 11479          dc.b      46,76,32,0
                    11480   @m68kde~2_169:
0000737E  2324 2558 11481          dc.b      35,36,37,88,0
00007382  00        
                    11482   @m68kde~2_170:
00007384  2800      11483          dc.b      40,0
                    11484   @m68kde~2_171:
00007386  2900      11485          dc.b      41,0
                    11486   @m68kde~2_172:
00007388  292B 00   11487          dc.b      41,43,0
                    11488   @m68kde~2_173:
0000738C  2D28 00   11489          dc.b      45,40,0
                    11490   @m68kde~2_174:
00007390  2564 2841 11491          dc.b      37,100,40,65,37,100,41,0
00007394  2564 2900 
                    11492   @m68kde~2_175:
00007398  2564 2841 11493          dc.b      37,100,40,65,37,100,44,0
0000739C  2564 2C00 
                    11494   @m68kde~2_176:
000073A0  4400      11495          dc.b      68,0
                    11496   @m68kde~2_177:
000073A2  4100      11497          dc.b      65,0
                    11498   @m68kde~2_178:
000073A4  2564 00   11499          dc.b      37,100,0
                    11500   @m68kde~2_179:
000073A8  2E57 2900 11501          dc.b      46,87,41,0
                    11502   @m68kde~2_180:
000073AC  2E4C 2900 11503          dc.b      46,76,41,0
                    11504   @m68kde~2_181:
000073B0  2425 5800 11505          dc.b      36,37,88,0
                    11506   @m68kde~2_182:
000073B4  2564 2850 11507          dc.b      37,100,40,80,67,41,0
000073B8  4329 00   
                    11508   @m68kde~2_183:
000073BC  2564 2850 11509          dc.b      37,100,40,80,67,44,0
000073C0  432C 00   
                    11510   @m68kde~2_184:
000073C4  2C00      11511          dc.b      44,0
                    11512   @m68kde~2_185:
000073C6  4343 00   11513          dc.b      67,67,0
                    11514   @m68kde~2_186:
000073CA  4353 00   11515          dc.b      67,83,0
                    11516   @m68kde~2_187:
000073CE  4551 00   11517          dc.b      69,81,0
                    11518   @m68kde~2_188:
000073D2  4745 00   11519          dc.b      71,69,0
                    11520   @m68kde~2_189:
000073D6  4754 00   11521          dc.b      71,84,0
                    11522   @m68kde~2_190:
000073DA  4849 00   11523          dc.b      72,73,0
                    11524   @m68kde~2_191:
000073DE  4C45 00   11525          dc.b      76,69,0
                    11526   @m68kde~2_192:
000073E2  4C53 00   11527          dc.b      76,83,0
                    11528   @m68kde~2_193:
000073E6  4C54 00   11529          dc.b      76,84,0
                    11530   @m68kde~2_194:
000073EA  4D49 00   11531          dc.b      77,73,0
                    11532   @m68kde~2_195:
000073EE  4E45 00   11533          dc.b      78,69,0
                    11534   @m68kde~2_196:
000073F2  504C 00   11535          dc.b      80,76,0
                    11536   @m68kde~2_197:
000073F6  5653 00   11537          dc.b      86,83,0
                    11538   @m68kde~2_198:
000073FA  5643 00   11539          dc.b      86,67,0
                    11540   @m68kde~2_199:
000073FE  5241 00   11541          dc.b      82,65,0
                    11542   @m68kde~2_200:
00007402  5352 00   11543          dc.b      83,82,0
                    11544   @m68kde~2_201:
00007406  556E 6B6E 11545          dc.b      85,110,107,110,111,119,110,0
0000740A  6F77 6E00 
                    11546   @m68kde~2_202:
0000740E  4142 4344 11547          dc.b      65,66,67,68,32,68,37,100,44,68,37,100,0
00007412  2044 2564 
00007416  2C44 2564 
0000741A  00        
                    11548   @m68kde~2_203:
0000741C  4142 4344 11549          dc.b      65,66,67,68,32,45,40,65,37,100,41,44,45,40,65
00007420  202D 2841 
00007424  2564 292C 
00007428  2D28 41   
0000742B  2564 2900 11550          dc.b      37,100,41,0
                    11551   @m68kde~2_204:
00007430  4144 4441 11552          dc.b      65,68,68,65,46,87,32,0
00007434  2E57 2000 
                    11553   @m68kde~2_205:
00007438  4144 4441 11554          dc.b      65,68,68,65,46,76,32,0
0000743C  2E4C 2000 
                    11555   @m68kde~2_206:
00007440  2C41 2558 11556          dc.b      44,65,37,88,0
00007444  00        
                    11557   @m68kde~2_207:
00007446  4144 4400 11558          dc.b      65,68,68,0
                    11559   @m68kde~2_208:
0000744A  4144 4449 11560          dc.b      65,68,68,73,0
0000744E  00        
                    11561   @m68kde~2_209:
00007450  414E 4449 11562          dc.b      65,78,68,73,0
00007454  00        
                    11563   @m68kde~2_210:
00007456  434D 5049 11564          dc.b      67,77,80,73,0
0000745A  00        
                    11565   @m68kde~2_211:
0000745C  454F 5249 11566          dc.b      69,79,82,73,0
00007460  00        
                    11567   @m68kde~2_212:
00007462  4F52 4900 11568          dc.b      79,82,73,0
                    11569   @m68kde~2_213:
00007466  5355 4249 11570          dc.b      83,85,66,73,0
0000746A  00        
                    11571   @m68kde~2_214:
0000746C  414E 4449 11572          dc.b      65,78,68,73,32,35,36,37,88,44,83,82,0
00007470  2023 2425 
00007474  582C 5352 
00007478  00        
                    11573   @m68kde~2_215:
0000747A  4144 4451 11574          dc.b      65,68,68,81,0
0000747E  00        
                    11575   @m68kde~2_216:
00007480  2325 3158 11576          dc.b      35,37,49,88,44,0
00007484  2C00      
                    11577   @m68kde~2_217:
00007486  4144 4458 11578          dc.b      65,68,68,88,0
0000748A  00        
                    11579   @m68kde~2_218:
0000748C  4425 582C 11580          dc.b      68,37,88,44,68,37,88,0
00007490  4425 5800 
                    11581   @m68kde~2_219:
00007494  2D28 4125 11582          dc.b      45,40,65,37,88,41,44,45,40,65,37,88,41,0
00007498  5829 2C2D 
0000749C  2841 2558 
000074A0  2900      
                    11583   @m68kde~2_220:
000074A2  414E 4400 11584          dc.b      65,78,68,0
                    11585   @m68kde~2_221:
000074A6  414E 4449 11586          dc.b      65,78,68,73,32,35,36,37,50,88,44,67,67,82,0
000074AA  2023 2425 
000074AE  3258 2C43 
000074B2  4352 00   
                    11587   @m68kde~2_222:
000074B6  4153 4C00 11588          dc.b      65,83,76,0
                    11589   @m68kde~2_223:
000074BA  4153 5200 11590          dc.b      65,83,82,0
                    11591   @m68kde~2_224:
000074BE  4C53 4C00 11592          dc.b      76,83,76,0
                    11593   @m68kde~2_225:
000074C2  4C53 5200 11594          dc.b      76,83,82,0
                    11595   @m68kde~2_226:
000074C6  524F 4C00 11596          dc.b      82,79,76,0
                    11597   @m68kde~2_227:
000074CA  524F 5200 11598          dc.b      82,79,82,0
                    11599   @m68kde~2_228:
000074CE  524F 584C 11600          dc.b      82,79,88,76,0
000074D2  00        
                    11601   @m68kde~2_229:
000074D4  524F 5852 11602          dc.b      82,79,88,82,0
000074D8  00        
                    11603   @m68kde~2_230:
000074DA  2324 2558 11604          dc.b      35,36,37,88,44,68,37,88,0
000074DE  2C44 2558 
000074E2  00        
                    11605   @m68kde~2_231:
000074E4  4200      11606          dc.b      66,0
                    11607   @m68kde~2_232:
000074E6  4243 4847 11608          dc.b      66,67,72,71,32,0
000074EA  2000      
                    11609   @m68kde~2_233:
000074EC  4425 642C 11610          dc.b      68,37,100,44,0
000074F0  00        
                    11611   @m68kde~2_234:
000074F2  2324 2558 11612          dc.b      35,36,37,88,44,0
000074F6  2C00      
                    11613   @m68kde~2_235:
000074F8  4243 4C52 11614          dc.b      66,67,76,82,32,0
000074FC  2000      
                    11615   @m68kde~2_236:
000074FE  4253 4554 11616          dc.b      66,83,69,84,32,0
00007502  2000      
                    11617   @m68kde~2_237:
00007504  4254 5354 11618          dc.b      66,84,83,84,32,0
00007508  2000      
                    11619   @m68kde~2_238:
0000750A  4348 4B20 11620          dc.b      67,72,75,32,0
0000750E  00        
                    11621   @m68kde~2_239:
00007510  2C44 2564 11622          dc.b      44,68,37,100,0
00007514  00        
                    11623   @m68kde~2_240:
00007516  434C 5200 11624          dc.b      67,76,82,0
                    11625   @m68kde~2_241:
0000751A  434D 5041 11626          dc.b      67,77,80,65,46,87,32,0
0000751E  2E57 2000 
                    11627   @m68kde~2_242:
00007522  434D 5041 11628          dc.b      67,77,80,65,46,76,32,0
00007526  2E4C 2000 
                    11629   @m68kde~2_243:
0000752A  2C41 2564 11630          dc.b      44,65,37,100,0
0000752E  00        
                    11631   @m68kde~2_244:
00007530  434D 5000 11632          dc.b      67,77,80,0
                    11633   @m68kde~2_245:
00007534  434D 504D 11634          dc.b      67,77,80,77,0
00007538  00        
                    11635   @m68kde~2_246:
0000753A  2841 2564 11636          dc.b      40,65,37,100,41,43,44,40,65,37,100,41,43,0
0000753E  292B 2C28 
00007542  4125 6429 
00007546  2B00      
                    11637   @m68kde~2_247:
00007548  4442 00   11638          dc.b      68,66,0
                    11639   @m68kde~2_248:
0000754C  4425 642C 11640          dc.b      68,37,100,44,37,43,100,40,80,67,41,32,116,111
00007550  252B 6428 
00007554  5043 2920 
00007558  746F      
0000755A  2041 6464 11641          dc.b      32,65,100,100,114,58,36,37,88,0
0000755E  723A 2425 
00007562  5800      
                    11642   @m68kde~2_249:
00007564  4449 5653 11643          dc.b      68,73,86,83,32,0
00007568  2000      
                    11644   @m68kde~2_250:
0000756A  4449 5655 11645          dc.b      68,73,86,85,32,0
0000756E  2000      
                    11646   @m68kde~2_251:
00007570  454F 5200 11647          dc.b      69,79,82,0
                    11648   @m68kde~2_252:
00007574  454F 5249 11649          dc.b      69,79,82,73,32,35,36,37,50,88,44,67,67,82,0
00007578  2023 2425 
0000757C  3258 2C43 
00007580  4352 00   
                    11650   @m68kde~2_253:
00007584  454F 5249 11651          dc.b      69,79,82,73,32,35,36,37,88,44,83,82,0
00007588  2023 2425 
0000758C  582C 5352 
00007590  00        
                    11652   @m68kde~2_254:
00007592  4558 4720 11653          dc.b      69,88,71,32,68,37,100,44,68,37,100,0
00007596  4425 642C 
0000759A  4425 6400 
                    11654   @m68kde~2_255:
0000759E  4558 4720 11655          dc.b      69,88,71,32,65,37,100,44,65,37,100,0
000075A2  4125 642C 
000075A6  4125 6400 
                    11656   @m68kde~2_256:
000075AA  4558 4720 11657          dc.b      69,88,71,32,68,37,100,44,65,37,100,0
000075AE  4425 642C 
000075B2  4125 6400 
                    11658   @m68kde~2_257:
000075B6  4558 5400 11659          dc.b      69,88,84,0
                    11660   @m68kde~2_258:
000075BA  494C 4C45 11661          dc.b      73,76,76,69,71,65,76,32,40,36,52,65,70,67,41
000075BE  4741 4C20 
000075C2  2824 3441 
000075C6  4643 29   
000075C9  00        11662          dc.b      0
                    11663   @m68kde~2_259:
000075CA  4A4D 5020 11664          dc.b      74,77,80,32,0
000075CE  00        
                    11665   @m68kde~2_260:
000075D0  4A53 5220 11666          dc.b      74,83,82,32,0
000075D4  00        
                    11667   @m68kde~2_261:
000075D6  4C45 4120 11668          dc.b      76,69,65,32,0
000075DA  00        
                    11669   @m68kde~2_262:
000075DC  4C49 4E4B 11670          dc.b      76,73,78,75,32,0
000075E0  2000      
                    11671   @m68kde~2_263:
000075E2  4125 642C 11672          dc.b      65,37,100,44,35,37,100,0
000075E6  2325 6400 
                    11673   @m68kde~2_264:
000075EA  4D4F 5645 11674          dc.b      77,79,86,69,46,66,32,0
000075EE  2E42 2000 
                    11675   @m68kde~2_265:
000075F2  4D4F 5645 11676          dc.b      77,79,86,69,46,76,32,0
000075F6  2E4C 2000 
                    11677   @m68kde~2_266:
000075FA  4D4F 5645 11678          dc.b      77,79,86,69,46,87,32,0
000075FE  2E57 2000 
                    11679   @m68kde~2_267:
00007602  4D4F 5645 11680          dc.b      77,79,86,69,32,0
00007606  2000      
                    11681   @m68kde~2_268:
00007608  2C43 4352 11682          dc.b      44,67,67,82,0
0000760C  00        
                    11683   @m68kde~2_269:
0000760E  4D4F 5645 11684          dc.b      77,79,86,69,32,83,82,44,0
00007612  2053 522C 
00007616  00        
                    11685   @m68kde~2_270:
00007618  2C53 5200 11686          dc.b      44,83,82,0
                    11687   @m68kde~2_271:
0000761C  4D4F 5645 11688          dc.b      77,79,86,69,32,85,83,80,44,65,37,100,0
00007620  2055 5350 
00007624  2C41 2564 
00007628  00        
                    11689   @m68kde~2_272:
0000762A  4D4F 5645 11690          dc.b      77,79,86,69,32,65,37,100,44,85,83,80,0
0000762E  2041 2564 
00007632  2C55 5350 
00007636  00        
                    11691   @m68kde~2_273:
00007638  4D4F 5645 11692          dc.b      77,79,86,69,77,0
0000763C  4D00      
                    11693   @m68kde~2_274:
0000763E  4425 6400 11694          dc.b      68,37,100,0
                    11695   @m68kde~2_275:
00007642  2F44 2564 11696          dc.b      47,68,37,100,0
00007646  00        
                    11697   @m68kde~2_276:
00007648  4125 6400 11698          dc.b      65,37,100,0
                    11699   @m68kde~2_277:
0000764C  2F41 2564 11700          dc.b      47,65,37,100,0
00007650  00        
                    11701   @m68kde~2_278:
00007652  4D4F 5645 11702          dc.b      77,79,86,69,80,46,87,32,36,37,88,40,65,37,100
00007656  502E 5720 
0000765A  2425 5828 
0000765E  4125 64   
00007661  292C 4425 11703          dc.b      41,44,68,37,100,0
00007665  6400      
                    11704   @m68kde~2_279:
00007668  4D4F 5645 11705          dc.b      77,79,86,69,80,46,76,32,36,37,88,40,65,37,100
0000766C  502E 4C20 
00007670  2425 5828 
00007674  4125 64   
00007677  292C 4425 11706          dc.b      41,44,68,37,100,0
0000767B  6400      
                    11707   @m68kde~2_280:
0000767E  4D4F 5645 11708          dc.b      77,79,86,69,80,46,87,32,68,37,100,44,36,37,88
00007682  502E 5720 
00007686  4425 642C 
0000768A  2425 58   
0000768D  2841 2564 11709          dc.b      40,65,37,100,41,0
00007691  2900      
                    11710   @m68kde~2_281:
00007694  4D4F 5645 11711          dc.b      77,79,86,69,80,46,76,32,68,37,100,44,36,37,88
00007698  502E 4C20 
0000769C  4425 642C 
000076A0  2425 58   
000076A3  2841 2564 11712          dc.b      40,65,37,100,41,0
000076A7  2900      
                    11713   @m68kde~2_282:
000076AA  4D4F 5645 11714          dc.b      77,79,86,69,81,32,35,36,37,88,44,68,37,100,0
000076AE  5120 2324 
000076B2  2558 2C44 
000076B6  2564 00   
                    11715   @m68kde~2_283:
000076BA  4D55 4C53 11716          dc.b      77,85,76,83,32,0
000076BE  2000      
                    11717   @m68kde~2_284:
000076C0  4D55 4C55 11718          dc.b      77,85,76,85,32,0
000076C4  2000      
                    11719   @m68kde~2_285:
000076C6  4E42 4344 11720          dc.b      78,66,67,68,32,0
000076CA  2000      
                    11721   @m68kde~2_286:
000076CC  4E45 4700 11722          dc.b      78,69,71,0
                    11723   @m68kde~2_287:
000076D0  4E45 4758 11724          dc.b      78,69,71,88,0
000076D4  00        
                    11725   @m68kde~2_288:
000076D6  4E4F 5000 11726          dc.b      78,79,80,0
                    11727   @m68kde~2_289:
000076DA  4E4F 5400 11728          dc.b      78,79,84,0
                    11729   @m68kde~2_290:
000076DE  4F52 00   11730          dc.b      79,82,0
                    11731   @m68kde~2_291:
000076E2  4F52 4920 11732          dc.b      79,82,73,32,35,36,37,50,88,44,67,67,82,0
000076E6  2324 2532 
000076EA  582C 4343 
000076EE  5200      
                    11733   @m68kde~2_292:
000076F0  4F52 4920 11734          dc.b      79,82,73,32,32,35,36,37,88,44,83,82,0
000076F4  2023 2425 
000076F8  582C 5352 
000076FC  00        
                    11735   @m68kde~2_293:
000076FE  5045 4120 11736          dc.b      80,69,65,32,0
00007702  00        
                    11737   @m68kde~2_294:
00007704  5245 5345 11738          dc.b      82,69,83,69,84,0
00007708  5400      
                    11739   @m68kde~2_295:
0000770A  5254 4500 11740          dc.b      82,84,69,0
                    11741   @m68kde~2_296:
0000770E  5254 5200 11742          dc.b      82,84,82,0
                    11743   @m68kde~2_297:
00007712  5254 5300 11744          dc.b      82,84,83,0
                    11745   @m68kde~2_298:
00007716  5354 4F50 11746          dc.b      83,84,79,80,32,35,36,37,88,0
0000771A  2023 2425 
0000771E  5800      
                    11747   @m68kde~2_299:
00007720  5342 4344 11748          dc.b      83,66,67,68,32,68,37,100,44,68,37,100,0
00007724  2044 2564 
00007728  2C44 2564 
0000772C  00        
                    11749   @m68kde~2_300:
0000772E  5342 4344 11750          dc.b      83,66,67,68,32,45,40,65,37,100,41,44,45,40,65
00007732  202D 2841 
00007736  2564 292C 
0000773A  2D28 41   
0000773D  2564 2900 11751          dc.b      37,100,41,0
                    11752   @m68kde~2_301:
00007742  5300      11753          dc.b      83,0
                    11754   @m68kde~2_302:
00007744  5355 4241 11755          dc.b      83,85,66,65,46,87,32,0
00007748  2E57 2000 
                    11756   @m68kde~2_303:
0000774C  5355 4241 11757          dc.b      83,85,66,65,46,76,32,0
00007750  2E4C 2000 
                    11758   @m68kde~2_304:
00007754  5355 4200 11759          dc.b      83,85,66,0
                    11760   @m68kde~2_305:
00007758  5355 4251 11761          dc.b      83,85,66,81,0
0000775C  00        
                    11762   @m68kde~2_306:
0000775E  5355 4258 11763          dc.b      83,85,66,88,0
00007762  00        
                    11764   @m68kde~2_307:
00007764  4425 3158 11765          dc.b      68,37,49,88,44,68,37,49,88,0
00007768  2C44 2531 
0000776C  5800      
                    11766   @m68kde~2_308:
0000776E  2D28 4125 11767          dc.b      45,40,65,37,49,88,41,44,45,40,65,37,49,88,41
00007772  3158 292C 
00007776  2D28 4125 
0000777A  3158 29   
0000777D  00        11768          dc.b      0
                    11769   @m68kde~2_309:
0000777E  5357 4150 11770          dc.b      83,87,65,80,32,68,37,100,0
00007782  2044 2564 
00007786  00        
                    11771   @m68kde~2_310:
00007788  5441 5320 11772          dc.b      84,65,83,32,0
0000778C  00        
                    11773   @m68kde~2_311:
0000778E  5452 4150 11774          dc.b      84,82,65,80,32,35,37,100,0
00007792  2023 2564 
00007796  00        
                    11775   @m68kde~2_312:
00007798  5452 4150 11776          dc.b      84,82,65,80,86,0
0000779C  5600      
                    11777   @m68kde~2_313:
0000779E  5453 5400 11778          dc.b      84,83,84,0
                    11779   @m68kde~2_314:
000077A2  554E 4C4B 11780          dc.b      85,78,76,75,32,65,37,100,0
000077A6  2041 2564 
000077AA  00        
                    11781          section   data
000077AC            11782                   align
          0000 77AC 11783   DataStart       equ       *
                    11784   
                    11785   *********************************************************************************************************
                    11786   * Data Section for Initialised Data - these will be placed in rom as constants and have to be copied
                    11787   * to ram as part of the CStart routine in this file
                    11788   *********************************************************************************************************
                    11789   
                    11790   @itoa_1:
000077AC  2D32 3134 11791          dc.b      45,50,49,52,55,52,56,51,54,52,56,0
000077B0  3734 3833 
000077B4  3634 3800 
                    11792          section   bss
000077B8            11793                   align
          0000 77B8 11794   DataEnd         equ     *                       this label will equate to the address of the last byte of global variable in it
                    11795   
                    11796   *********************************************************************************************************
                    11797   * Section for Uninitialised Data held in ROM as constants
                    11798   *********************************************************************************************************
                    11799   
0B000000            11800                   org     RamVectorTable          Ram based vector table must be stored here otherwise InstallException Handler will not work
          0000 000C 11801   DataLength      equ     DataEnd-DataStart       length of data needed to copy to Ram on bootup
                    11802   
                    11803   
0B000000            11804   bss             org       bss
                    11805   
                    11806   *********************************************************************************************************
                    11807   * Build a ram based vector table for interrupts so we can install our own Exception Handlers in C code at run time
                    11808   * install the exception handler using the C function InstallExceptionHandler()
                    11809   *********************************************************************************************************
                    11810   
                    11811   
                    11812   
0B000000            11813   VInitialSP       ds.l    1      dummy as we can't really install a handler for this
0B000004            11814   VInitialPC       ds.l    1      dummy as we can't reallin install a handler for this
0B000008            11815   VBusError        ds.l    1      storage for address of Bus Error Handler
0B00000C            11816   VAddressError    ds.l    1      storage for address of Address Error Handler
0B000010            11817   VIllegalInstr    ds.l    1      storage for address of Illegal Instruction handler
0B000014            11818   VDividebyZero    ds.l    1      storage for address of divide by zero handler
0B000018            11819   VCheck           ds.l    1      ditto
0B00001C            11820   VTrapV           ds.l    1      ditto
0B000020            11821   VPrivilege       ds.l    1      ditto
0B000024            11822   VTrace           ds.l    1
0B000028            11823   VLine1010emul    ds.l    1
0B00002C            11824   VLine1111emul    ds.l    1
0B000030            11825   VUnassigned1     ds.l    1
0B000034            11826   VUnassigned2     ds.l    1
0B000038            11827   VUnassigned3     ds.l    1
0B00003C            11828   VUninit_IRQ      ds.l    1
0B000040            11829   VUnassigned4     ds.l    1
0B000044            11830   VUnassigned5     ds.l    1
0B000048            11831   VUnassigned6     ds.l    1
0B00004C            11832   VUnassigned7     ds.l    1
0B000050            11833   VUnassigned8     ds.l    1
0B000054            11834   VUnassigned9     ds.l    1
0B000058            11835   VUnassigned10    ds.l    1
0B00005C            11836   VUnassigned11    ds.l    1
0B000060            11837   VSpuriousIRQ     ds.l    1
                    11838   
                    11839   * Interrupt handlers Vector 25-31
0B000064            11840   VL1IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000068            11841   VL2IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00006C            11842   VL3IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000070            11843   VL4IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000074            11844   VL5IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000078            11845   VL6IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00007C            11846   VL7IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
                    11847   
                    11848   * Trap Handler vectors 32-47
0B000080            11849   VTrap0           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000084            11850   VTrap1           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000088            11851   VTrap2           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00008C            11852   VTrap3           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000090            11853   VTrap4           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000094            11854   VTrap5           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000098            11855   VTrap6           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00009C            11856   VTrap7           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A0            11857   VTrap8           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A4            11858   VTrap9           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A8            11859   VTrap10          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000AC            11860   VTrap11          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B0            11861   VTrap12          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B4            11862   VTrap13          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B8            11863   VTrap14          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000BC            11864   VTrap15          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
                    11865   
                    11866   * the remaining exceptions are unassigned in the 68000 so no need to allocate storage for them here
                    11867   
                    11868   ***********************************************************************************************************
                    11869   * Other Variables
                    11870   ***********************************************************************************************************
                    11871   *__DebugA5       ds.l    1
                    11872   *__UserA5        ds.l    1
                    11873   
                    11874   ***********************************************************************************************************
0B0000C0            11875   __ungetbuf:     ds.l    1       ; ungetbuffer for stdio functions
0B0000C4            11876   __allocp:       ds.l    0       ; start of allocation units
0B0000C4            11877   __heap:         ds.l    0       ; pointers for malloc functions
                    11878   
                    11879   *__himem:       ds.l    himem            ; highest memory location + 1
                    11880   *__stklen:      ds.l    stklen           ; default stack size
                    11881   
                    11882   *********************************************************************************************************
                    11883   * Section for Heap
                    11884   *********************************************************************************************************
                    11885   
                    11886   _i:
0B0000C4            11887          ds.b      4
                    11888   _x:
0B0000C8            11889          ds.b      4
                    11890   _y:
0B0000CC            11891          ds.b      4
                    11892   _z:
0B0000D0            11893          ds.b      4
                    11894   _PortA_Count:
0B0000D4            11895          ds.b      4
                    11896   _Trace:
0B0000D8            11897          ds.b      4
                    11898   _GoFlag:
0B0000DC            11899          ds.b      4
                    11900   _Echo:
0B0000E0            11901          ds.b      4
                    11902   _d0:
0B0000E4            11903          ds.b      4
                    11904   _d1:
0B0000E8            11905          ds.b      4
                    11906   _d2:
0B0000EC            11907          ds.b      4
                    11908   _d3:
0B0000F0            11909          ds.b      4
                    11910   _d4:
0B0000F4            11911          ds.b      4
                    11912   _d5:
0B0000F8            11913          ds.b      4
                    11914   _d6:
0B0000FC            11915          ds.b      4
                    11916   _d7:
0B000100            11917          ds.b      4
                    11918   _a0:
0B000104            11919          ds.b      4
                    11920   _a1:
0B000108            11921          ds.b      4
                    11922   _a2:
0B00010C            11923          ds.b      4
                    11924   _a3:
0B000110            11925          ds.b      4
                    11926   _a4:
0B000114            11927          ds.b      4
                    11928   _a5:
0B000118            11929          ds.b      4
                    11930   _a6:
0B00011C            11931          ds.b      4
                    11932   _PC:
0B000120            11933          ds.b      4
                    11934   _SSP:
0B000124            11935          ds.b      4
                    11936   _USP:
0B000128            11937          ds.b      4
                    11938   _SR:
0B00012C            11939          ds.b      2
                    11940   _BreakPointAddress:
0B00012E            11941          ds.b      32
                    11942   _BreakPointInstruction:
0B00014E            11943          ds.b      16
                    11944   _BreakPointSetOrCleared:
0B00015E            11945          ds.b      32
                    11946   _InstructionSize:
0B00017E            11947          ds.b      4
                    11948   _WatchPointAddress:
0B000182            11949          ds.b      32
                    11950   _WatchPointSetOrCleared:
0B0001A2            11951          ds.b      32
                    11952   _WatchPointString:
0B0001C2            11953          ds.b      800
                    11954   _Instruction:
0B0004E2            11955          ds.b      100
                    11956   _TempString:
0B000546            11957          ds.b      100
                    11958          section   heap
0B0005AA            11959                   align
          0B00 05AA 11960   bssEnd          equ *                   end of storage space for unitialised variables
                    11961   *                                       we have to copy all initialised variable from rom to here at startup
          0B00 05AA 11962   heap   equ       *
0B0005AA            11963                    align
          0000 0000

Assembly errors: 0
