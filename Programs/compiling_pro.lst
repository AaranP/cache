680x0 MACRO ASSEMBLER   Version 5.00   (c) 1992-2005 Peter J. Fondse

Date: 15 Feb 2024      Time: 22:57:45          Source: C:\M68KV6.0 - 800BY480\PROGRAMS\COMPILING_PRO.SRC

                       1          section   code
                       2   ; for initial stack use $08040000 if your system uses SRAM for main memory (top of 256kbyte SRAM space)
                       3   ; When your system is converted to use DRAM for main memory set this constant to $0C000000 (top of 64MByte DRAM space
                       4   
          0804 0000    5   StackPointerVal     equ $08040000      when using sram
                       6   ;StackPointerVal     equ $0C000000      when using dram
                       7   
                       8   ; define RamVectorTable as $0803000 if your system uses SRAM for main memory
                       9   ; When your system is converted to use DRAM for main memory define RamVectorTable constant as $0B000000 (top of 64MByte DRAM space)
                      10   
          0803 0000   11   RamVectorTable      equ $08030000      when using sram
                      12   ;RamVectorTable      equ $0B000000      when using dram
                      13   
                      14   
                      15   
                      16   ; CSTART.ASM  -  C startup-code for Debug Monitor
00000000              17                   align
                      18   
00000000              19                   org $00000000          ;start of rom based vector table, 68k hard wired to expect this at $0
                      20   
00000000  0804 0000   21   InitialSP       dc.l StackPointerVal   ;initial supervisor state stack pointer(stack decrements first before being used)
00000004  0000 0400   22   InitialPC       dc.l start             ;address of 1st instruction of program after a reset
00000008  0000 0802   23   BusError        dc.l E_BErro           ;bus error - stop program
0000000C  0000 0814   24   AddressError    dc.l E_AErro           ;address error - stop program
00000010  0000 0826   25   IllegalInstr    dc.l E_IInst           ;illegal instruction - stop program
00000014  0000 0838   26   DividebyZero    dc.l E_DZero           ;divide by zero error - stop program
00000018  0000 084A   27   Check           dc.l E_Check           ;Check instruction - stop program
0000001C  0000 085C   28   TrapV           dc.l E_Trapv           ;Trapv instruction - stop program
00000020  0000 086E   29   Privilege       dc.l E_Priv            ;privilige violation - stop program
00000024  0000 0880   30   Trace           dc.l E_Trace           ;stop on trace
00000028  0000 0892   31   Line1010emul    dc.l E_1010            ;1010 instructions stop
0000002C  0000 08A4   32   Line1111emul    dc.l E_1111            ;1111 instructions stop
00000030  0000 08B6   33   Unassigned1     dc.l E_Unnas1           ;unassigned vector
00000034  0000 08B6   34   Unassigned2     dc.l E_Unnas2           ;unassigned vector
00000038  0000 08B6   35   Unassigned3     dc.l E_Unnas3           ;unassigned vector
0000003C  0000 08B6   36   Uninit_IRQ      dc.l E_UnitI           ;uninitialised interrupt
00000040  0000 08B6   37   Unassigned4     dc.l E_Unnas4           ;unassigned vector
00000044  0000 08B6   38   Unassigned5     dc.l E_Unnas5           ;unassigned vector
00000048  0000 08B6   39   Unassigned6     dc.l E_Unnas6           ;unassigned vector
0000004C  0000 08B6   40   Unassigned7     dc.l E_Unnas7           ;unassigned vector
00000050  0000 08B6   41   Unassigned8     dc.l E_Unnas8           ;unassigned vector
00000054  0000 08B6   42   Unassigned9     dc.l E_Unnas9           ;unassigned vector
00000058  0000 08B6   43   Unassigned10    dc.l E_Unnas10           ;unassigned vector
0000005C  0000 08B6   44   Unassigned11    dc.l E_Unnas11           ;unassigned vector
00000060  0000 08B6   45   SpuriousIRQ     dc.l E_Spuri           ;stop on spurious irq
                      46   *
                      47   *
00000064  0000 049A   48   Level1IRQ       dc.l Level1RamISR
00000068  0000 04AC   49   Level2IRQ       dc.l Level2RamISR
0000006C  0000 04BE   50   Level3IRQ       dc.l Level3RamISR
00000070  0000 04D0   51   Level4IRQ       dc.l Level4RamISR
00000074  0000 04E2   52   Level5IRQ       dc.l Level5RamISR
00000078  0000 05EC   53   Level6IRQ       dc.l Level6RamISR
0000007C  0000 05FE   54   Level7IRQ       dc.l Level7RamISR
                      55   *
                      56   *
00000080  0000 0610   57   Trap0           dc.l Trap0RamISR        ; User installed trap handler
00000084  0000 0622   58   Trap1           dc.l Trap1RamISR        ; User installed trap handler
00000088  0000 0634   59   Trap2           dc.l Trap2RamISR        ; User installed trap handler
0000008C  0000 0646   60   Trap3           dc.l Trap3RamISR        ; User installed trap handler
00000090  0000 0658   61   Trap4           dc.l Trap4RamISR        ; User installed trap handler
00000094  0000 066A   62   Trap5           dc.l Trap5RamISR        ; User installed trap handler
00000098  0000 067C   63   Trap6           dc.l Trap6RamISR        ; User installed trap handler
0000009C  0000 068E   64   Trap7           dc.l Trap7RamISR        ; User installed trap handler
000000A0  0000 06A0   65   Trap8           dc.l Trap8RamISR        ; User installed trap handler
000000A4  0000 06B2   66   Trap9           dc.l Trap9RamISR        ; User installed trap handler
000000A8  0000 06C4   67   Trap10          dc.l Trap10RamISR       ; User installed trap handler
000000AC  0000 06D6   68   Trap11          dc.l Trap11RamISR       ; User installed trap handler
000000B0  0000 06E8   69   Trap12          dc.l Trap12RamISR       ; User installed trap handler
000000B4  0000 06FA   70   Trap13          dc.l Trap13RamISR       ; User installed trap handler
000000B8  0000 070C   71   Trap14          dc.l Trap14RamISR       ; User installed trap handler
000000BC  0000 07FC   72   Trap15          dc.l Trap15RamISR       ; User installed trap handler
                      73   
                      74   *
                      75   * Other vectors 64-255 are users vectors for autovectored IO device (not implemented in TG68)
                      76   *
                      77   
00000400              78                   org       $00000400
                      79   
00000400  46FC 2700   80   start:          move.w     #$2700,SR             set interrupts to disable until later
                      81   
                      82   *************************************************************************************
                      83   ** add some 68000 instruction to read and write to memory, IO etc. This doesn't do anything
                      84   ** important, it just creates read and write bus cycles to specific addresses which
                      85   ** help with debugging hardware in Quartus simulations
                      86   **************************************************************************************
                      87   
                      88                   ; perform some dummy read/write of 32 bit values to memory to see waveforms during a simulation
                      89   
00000404  23FC 1122   90                   move.l     #$11223344,$08060000 write 32 bits, to memory
00000408  3344 0806 
0000040C  0000      
0000040E  2039 0806   91                   move.l     $08060000,d0         read 32 bits back
00000412  0000      
00000414  13FC 0000   92                   move.b     #$00,$00400000         write to the output ports
00000418  0040 0000 
0000041C  13FC 0000   93                   move.b     #$00,$00400002         write to the output ports
00000420  0040 0002 
00000424  13FC 0000   94                   move.b     #$00,$00400004         write to the output ports
00000428  0040 0004 
0000042C  13FC 0000   95                   move.b     #$00,$00400006         write to the output ports
00000430  0040 0006 
00000434  13FC 0000   96                   move.b     #$00,$00400008         write to the output ports
00000438  0040 0008 
0000043C  13FC 0000   97                   move.b     #$00,$00400010         write to the hex display ports
00000440  0040 0010 
00000444  13FC 0000   98                   move.b     #$00,$00400012         write to the hex display ports
00000448  0040 0012 
0000044C  13FC 0000   99                   move.b     #$00,$00400014         write to the hex display ports
00000450  0040 0014 
00000454  13FC 0000  100                   move.b     #0,$00400020         write to the LCD
00000458  0040 0020 
0000045C  13FC 0000  101                   move.b     #0,$00400022         write to the LCD
00000460  0040 0022 
00000464  13FC 0000  102                   move.b     #0,$00400030         write to the Timer1 Data
00000468  0040 0030 
0000046C  13FC 0000  103                   move.b     #0,$00400032         write to the Timer1 Control
00000470  0040 0032 
                     104   
                     105                   ; some important initialisation do not modify
00000474  23FC FFFF  106                   move.l    #-1,__ungetbuf  ; unget-buffer for keyboard input
00000478  FFFF 0803 
0000047C  00C0      
0000047E  23FC 0000  107                   move.l    #0,__allocp     ; pointer to allocated memory for malloc-function
00000482  0000 0803 
00000486  00C4      
00000488  23FC 0803  108                   move.l    #heap,__heap    ; pointer to free memory
0000048C  0130 0803 
00000490  00C4      
                     109   
                     110   
00000492  4EB9 0000  111   mainloop        jsr       _main
00000496  0B60      
00000498  60F8       112                   bra       mainloop
                     113   
                     114   *********************************************************************************************************
                     115   * Code to call Ram Based Interrupt handler and other exeception handler code
                     116   *********************************************************************************************************
0000049A  48E7 FFFE  117   Level1RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000049E  2079 0803  118                   move.l    VL1IRQ,a0               get ram based address into a0
000004A2  0064      
000004A4  4E90       119                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004A6  4CDF 7FFF  120                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004AA  4E73       121                   rte
000004AC  48E7 FFFE  122   Level2RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004B0  2079 0803  123                   move.l    VL2IRQ,a0               get ram based address into a0
000004B4  0068      
000004B6  4E90       124                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004B8  4CDF 7FFF  125                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004BC  4E73       126                   rte
000004BE  48E7 FFFE  127   Level3RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004C2  2079 0803  128                   move.l    VL3IRQ,a0               get ram based address into a0
000004C6  006C      
000004C8  4E90       129                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004CA  4CDF 7FFF  130                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004CE  4E73       131                   rte
000004D0  48E7 FFFE  132   Level4RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004D4  2079 0803  133                   move.l    VL4IRQ,a0               get ram based address into a0
000004D8  0070      
000004DA  4E90       134                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004DC  4CDF 7FFF  135                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004E0  4E73       136                   rte
                     137   
                     138   * Trace trap Handler
                     139   
                     140   Level5RamISR
                     141   *
                     142   **         Copy 68000 registers from debug monitor Variables,
                     143   *
                     144   *
                     145                   move.l    #1,_Trace              switch on Trace Mode
********  **** ****  Error: Undefined or illegal symbol
000004EC  13FC 0000  146                   move.b    #$0,$0040000A          turn off a trace exception so we don't when generate a trace when disassembling instruction in the register dump (disassembling causes access to use program)
000004F0  0040 000A 
                     147                   move.w    (sp)+,_SR              get at the users status register pointed to by stack pointer and copy
********  **** ****  Error: Undefined or illegal symbol
                     148                   move.l    (sp)+,_PC              get at the users program counter and copy
********  **** ****  Error: Undefined or illegal symbol
                     149   *
                     150                   move.l    SP,_SSP                copy system stack pointer to debug monitor variable
********  **** ****  Error: Undefined or illegal symbol
                     151                   move.l    d0,_d0
********  **** ****  Error: Undefined or illegal symbol
                     152                   move.l    d1,_d1
********  **** ****  Error: Undefined or illegal symbol
                     153                   move.l    d2,_d2
********  **** ****  Error: Undefined or illegal symbol
                     154                   move.l    d3,_d3
********  **** ****  Error: Undefined or illegal symbol
                     155                   move.l    d4,_d4
********  **** ****  Error: Undefined or illegal symbol
                     156                   move.l    d5,_d5
********  **** ****  Error: Undefined or illegal symbol
                     157                   move.l    d6,_d6
********  **** ****  Error: Undefined or illegal symbol
                     158                   move.l    d7,_d7
********  **** ****  Error: Undefined or illegal symbol
                     159   *
                     160                   move.l    a0,_a0
********  **** ****  Error: Undefined or illegal symbol
                     161                   move.l    a1,_a1
********  **** ****  Error: Undefined or illegal symbol
                     162                   move.l    a2,_a2
********  **** ****  Error: Undefined or illegal symbol
                     163                   move.l    a3,_a3
********  **** ****  Error: Undefined or illegal symbol
                     164                   move.l    a4,_a4
********  **** ****  Error: Undefined or illegal symbol
                     165                   move.l    a5,_a5
********  **** ****  Error: Undefined or illegal symbol
                     166                   move.l    a6,_a6
********  **** ****  Error: Undefined or illegal symbol
00000560  4E68       167                   move.l    usp,a0
                     168                   move.l    a0,_USP
********  **** ****  Error: Undefined or illegal symbol
                     169   *
00000568  2079 0803  170                   move.l    VL5IRQ,a0              get ram based address into a0, trace exception for next instruction will be generated in Menu SPACE command
0000056C  0074      
0000056E  4E90       171                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     172   
                     173   ** After trace, reload 68000 registers with new values before continuing
                     174   
                     175                   move.l   _d0,d0
********  **** ****  Error: Undefined or illegal symbol
                     176                   move.l   _d1,d1
********  **** ****  Error: Undefined or illegal symbol
                     177                   move.l   _d2,d2
********  **** ****  Error: Undefined or illegal symbol
                     178                   move.l   _d3,d3
********  **** ****  Error: Undefined or illegal symbol
                     179                   move.l   _d4,d4
********  **** ****  Error: Undefined or illegal symbol
                     180                   move.l   _d5,d5
********  **** ****  Error: Undefined or illegal symbol
                     181                   move.l   _d6,d6
********  **** ****  Error: Undefined or illegal symbol
                     182                   move.l   _d7,d7
********  **** ****  Error: Undefined or illegal symbol
                     183   
                     184                   move.l   _USP,a0
********  **** ****  Error: Undefined or illegal symbol
000005A6  4E60       185                   move.l   a0,USP                     load user stack pointer
                     186                   move.l   _a0,a0
********  **** ****  Error: Undefined or illegal symbol
                     187                   move.l   _a1,a1
********  **** ****  Error: Undefined or illegal symbol
                     188                   move.l   _a2,a2
********  **** ****  Error: Undefined or illegal symbol
                     189                   move.l   _a3,a3
********  **** ****  Error: Undefined or illegal symbol
                     190                   move.l   _a4,a4
********  **** ****  Error: Undefined or illegal symbol
                     191                   move.l   _a5,a5
********  **** ****  Error: Undefined or illegal symbol
                     192                   move.l   _a6,a6
********  **** ****  Error: Undefined or illegal symbol
                     193   
                     194                   move.l   _SSP,sp
********  **** ****  Error: Undefined or illegal symbol
                     195                   move.l   _PC,-(sp)
********  **** ****  Error: Undefined or illegal symbol
                     196                   move.w   _SR,-(sp)
********  **** ****  Error: Undefined or illegal symbol
000005E4  11F8 0074  197                   move.b    $00000074,$0	          read trace exception vector after accessing disassembly to reset the trace request causes by disassembling program above
000005E8  0000      
000005EA  4E73       198                   rte
                     199   
                     200   * address trap handler
                     201   
000005EC  48E7 FFFE  202   Level6RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005F0  2079 0803  203                   move.l    VL6IRQ,a0               get ram based address into a0
000005F4  0078      
000005F6  4E90       204                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000005F8  4CDF 7FFF  205                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005FC  4E73       206                   rte
                     207   
000005FE  48E7 FFFE  208   Level7RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000602  2079 0803  209                   move.l    VL7IRQ,a0               get ram based address into a0
00000606  007C      
00000608  4E90       210                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000060A  4CDF 7FFF  211                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000060E  4E73       212                   rte
                     213   
                     214   
                     215   ********************************************************************************************************
                     216   * Ram based Trap handler and other exeception handler code
                     217   *********************************************************************************************************
                     218   
00000610  48E7 FFFE  219   Trap0RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000614  2079 0803  220                   move.l    VTrap0,a0                get ram based address into a0
00000618  0080      
0000061A  4E90       221                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000061C  4CDF 7FFF  222                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000620  4E73       223                   rte
                     224   
00000622  48E7 FFFE  225   Trap1RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000626  2079 0803  226                   move.l    VTrap1,a0                get ram based address into a0
0000062A  0084      
0000062C  4E90       227                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000062E  4CDF 7FFF  228                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000632  4E73       229                   rte
                     230   
00000634  48E7 FFFE  231   Trap2RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000638  2079 0803  232                   move.l    VTrap2,a0                get ram based address into a0
0000063C  0088      
0000063E  4E90       233                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000640  4CDF 7FFF  234                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000644  4E73       235                   rte
                     236   
00000646  48E7 FFFE  237   Trap3RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000064A  2079 0803  238                   move.l    VTrap3,a0                get ram based address into a0
0000064E  008C      
00000650  4E90       239                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000652  4CDF 7FFF  240                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000656  4E73       241                   rte
                     242   
00000658  48E7 FFFE  243   Trap4RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000065C  2079 0803  244                   move.l    VTrap4,a0                get ram based address into a0
00000660  0090      
00000662  4E90       245                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000664  4CDF 7FFF  246                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000668  4E73       247                   rte
                     248   
0000066A  48E7 FFFE  249   Trap5RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000066E  2079 0803  250                   move.l    VTrap5,a0                get ram based address into a0
00000672  0094      
00000674  4E90       251                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000676  4CDF 7FFF  252                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000067A  4E73       253                   rte
                     254   
0000067C  48E7 FFFE  255   Trap6RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000680  2079 0803  256                   move.l    VTrap6,a0                get ram based address into a0
00000684  0098      
00000686  4E90       257                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000688  4CDF 7FFF  258                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000068C  4E73       259                   rte
                     260   
0000068E  48E7 FFFE  261   Trap7RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000692  2079 0803  262                   move.l    VTrap7,a0                get ram based address into a0
00000696  009C      
00000698  4E90       263                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000069A  4CDF 7FFF  264                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000069E  4E73       265                   rte
                     266   
000006A0  48E7 FFFE  267   Trap8RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006A4  2079 0803  268                   move.l    VTrap8,a0                get ram based address into a0
000006A8  00A0      
000006AA  4E90       269                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006AC  4CDF 7FFF  270                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006B0  4E73       271                   rte
                     272   
000006B2  48E7 FFFE  273   Trap9RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006B6  2079 0803  274                   move.l    VTrap9,a0                get ram based address into a0
000006BA  00A4      
000006BC  4E90       275                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006BE  4CDF 7FFF  276                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006C2  4E73       277                   rte
                     278   
000006C4  48E7 FFFE  279   Trap10RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006C8  2079 0803  280                   move.l    VTrap10,a0                get ram based address into a0
000006CC  00A8      
000006CE  4E90       281                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006D0  4CDF 7FFF  282                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006D4  4E73       283                   rte
                     284   
000006D6  48E7 FFFE  285   Trap11RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006DA  2079 0803  286                   move.l    VTrap11,a0                get ram based address into a0
000006DE  00AC      
000006E0  4E90       287                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006E2  4CDF 7FFF  288                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006E6  4E73       289                   rte
                     290   
000006E8  48E7 FFFE  291   Trap12RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006EC  2079 0803  292                   move.l    VTrap12,a0                get ram based address into a0
000006F0  00B0      
000006F2  4E90       293                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006F4  4CDF 7FFF  294                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006F8  4E73       295                   rte
                     296   
000006FA  48E7 FFFE  297   Trap13RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006FE  2079 0803  298                   move.l    VTrap13,a0                get ram based address into a0
00000702  00B4      
00000704  4E90       299                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000706  4CDF 7FFF  300                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000070A  4E73       301                   rte
                     302   
                     303   Trap14RamISR    ;Break Point Handler
                     304   *
                     305   **         Copy 68000 registers from debug monitor Variables
                     306   *
                     307                   move.l    #1,_Trace      switch on Trace Mode
********  **** ****  Error: Undefined or illegal symbol
                     308                   move.w    (sp)+,_SR       get at the users status register pointed to by stack pointer and copy
********  **** ****  Error: Undefined or illegal symbol
                     309                   move.l    (sp)+,_PC      get at the users program counter and copy
********  **** ****  Error: Undefined or illegal symbol
                     310   *
                     311                   move.l    d0,_d0
********  **** ****  Error: Undefined or illegal symbol
                     312                   move.l    d1,_d1
********  **** ****  Error: Undefined or illegal symbol
                     313                   move.l    d2,_d2
********  **** ****  Error: Undefined or illegal symbol
                     314                   move.l    d3,_d3
********  **** ****  Error: Undefined or illegal symbol
                     315                   move.l    d4,_d4
********  **** ****  Error: Undefined or illegal symbol
                     316                   move.l    d5,_d5
********  **** ****  Error: Undefined or illegal symbol
                     317                   move.l    d6,_d6
********  **** ****  Error: Undefined or illegal symbol
                     318                   move.l    d7,_d7
********  **** ****  Error: Undefined or illegal symbol
                     319   *
                     320                   move.l    a0,_a0
********  **** ****  Error: Undefined or illegal symbol
                     321                   move.l    a1,_a1
********  **** ****  Error: Undefined or illegal symbol
                     322                   move.l    a2,_a2
********  **** ****  Error: Undefined or illegal symbol
                     323                   move.l    a3,_a3
********  **** ****  Error: Undefined or illegal symbol
                     324                   move.l    a4,_a4
********  **** ****  Error: Undefined or illegal symbol
                     325                   move.l    a5,_a5
********  **** ****  Error: Undefined or illegal symbol
                     326                   move.l    a6,_a6
********  **** ****  Error: Undefined or illegal symbol
0000077C  4E68       327                   move.l    USP,a0
                     328                   move.l    a0,_USP
********  **** ****  Error: Undefined or illegal symbol
                     329   *
00000784  2079 0803  330                   move.l    VTrap14,a0             get ram based address into a0
00000788  00B8      
0000078A  4E90       331                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     332   
                     333   ** After breakpoint reload 68000 registers with new values before continuing
                     334   
                     335   *                move.b    #$ff,$0040000A     generate a trace exception for the next instruction
                     336                   move.l   _d0,d0
********  **** ****  Error: Undefined or illegal symbol
                     337                   move.l   _d1,d1
********  **** ****  Error: Undefined or illegal symbol
                     338                   move.l   _d2,d2
********  **** ****  Error: Undefined or illegal symbol
                     339                   move.l   _d3,d3
********  **** ****  Error: Undefined or illegal symbol
                     340                   move.l   _d4,d4
********  **** ****  Error: Undefined or illegal symbol
                     341                   move.l   _d5,d5
********  **** ****  Error: Undefined or illegal symbol
                     342                   move.l   _d6,d6
********  **** ****  Error: Undefined or illegal symbol
                     343                   move.l   _d7,d7
********  **** ****  Error: Undefined or illegal symbol
                     344   
                     345                   move.l   _USP,a0
********  **** ****  Error: Undefined or illegal symbol
000007C2  4E60       346                   move.l   a0,USP        load user stack pointer A7
                     347                   move.l   _a0,a0
********  **** ****  Error: Undefined or illegal symbol
                     348                   move.l   _a1,a1
********  **** ****  Error: Undefined or illegal symbol
                     349                   move.l   _a2,a2
********  **** ****  Error: Undefined or illegal symbol
                     350                   move.l   _a3,a3
********  **** ****  Error: Undefined or illegal symbol
                     351                   move.l   _a4,a4
********  **** ****  Error: Undefined or illegal symbol
                     352                   move.l   _a5,a5
********  **** ****  Error: Undefined or illegal symbol
                     353                   move.l   _a6,a6
********  **** ****  Error: Undefined or illegal symbol
                     354   
                     355                   move.l   _PC,-(sp)
********  **** ****  Error: Undefined or illegal symbol
                     356                   move.w   _SR,-(sp)
********  **** ****  Error: Undefined or illegal symbol
000007FA  4E73       357                   rte
                     358   
                     359   Trap15RamISR    jmp     _CallDebugMonitor
********  **** ****  Error: Undefined or illegal symbol
                     360   *                movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                     361   *                move.l    VTrap15,a0                get ram based address into a0
                     362   *                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                     363   *                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                     364   *                rte
                     365   
                     366   *********************************************************************************************************
                     367   *Default exception handler for everything without a specific handler
                     368   *********************************************************************************************************
                     369   
                     370   *
                     371   **              Jump here for each unhandled exception
                     372   **              If you need to, MAKE SURE YOU SAVE ALL IMPORTANT REGISTERS AND RESTORE THEM BEFORE RETURNING (IF APPROPRIATE)
                     373   *
                     374   
00000802  48E7 FFFE  375   E_BErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000806  2079 0803  376                   move.l    VBusError,a0            get ram based address into a0
0000080A  0008      
0000080C  4E90       377                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000080E  4CDF 7FFF  378                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000812  4E73       379                   rte
00000814  48E7 FFFE  380   E_AErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000818  2079 0803  381                   move.l    VAddressError,a0        get ram based address into a0
0000081C  000C      
0000081E  4E90       382                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000820  4CDF 7FFF  383                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000824  4E73       384                   rte
00000826  48E7 FFFE  385   E_IInst         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000082A  2079 0803  386                   move.l    VIllegalInstr,a0        get ram based address into a0
0000082E  0010      
00000830  4E90       387                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000832  4CDF 7FFF  388                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000836  4E73       389                   rte
00000838  48E7 FFFE  390   E_DZero         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000083C  2079 0803  391                   move.l    VDividebyZero,a0        get ram based address into a0
00000840  0014      
00000842  4E90       392                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000844  4CDF 7FFF  393                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000848  4E73       394                   rte
0000084A  48E7 FFFE  395   E_Check         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000084E  2079 0803  396                   move.l    VCheck,a0               get ram based address into a0
00000852  0018      
00000854  4E90       397                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000856  4CDF 7FFF  398                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000085A  4E73       399                   rte
0000085C  48E7 FFFE  400   E_Trapv         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000860  2079 0803  401                   move.l    VTrapV,a0               get ram based address into a0
00000864  001C      
00000866  4E90       402                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000868  4CDF 7FFF  403                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000086C  4E73       404                   rte
0000086E  48E7 FFFE  405   E_Priv          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000872  2079 0803  406                   move.l    VPrivilege,a0           get ram based address into a0
00000876  0020      
00000878  4E90       407                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000087A  4CDF 7FFF  408                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000087E  4E73       409                   rte
00000880  48E7 FFFE  410   E_Trace         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000884  2079 0803  411                   move.l    VTrace,a0               get ram based address into a0
00000888  0024      
0000088A  4E90       412                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000088C  4CDF 7FFF  413                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000890  4E73       414                   rte
00000892  48E7 FFFE  415   E_1010          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000896  2079 0803  416                   move.l    VLine1010emul,a0        get ram based address into a0
0000089A  0028      
0000089C  4E90       417                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000089E  4CDF 7FFF  418                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008A2  4E73       419                   rte
000008A4  48E7 FFFE  420   E_1111          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000008A8  2079 0803  421                   move.l    VLine1111emul,a0        get ram based address into a0
000008AC  002C      
000008AE  4E90       422                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000008B0  4CDF 7FFF  423                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008B4  4E73       424                   rte
                     425   E_Unnas1
                     426   E_Unnas2
                     427   E_Unnas3
                     428   E_UnitI
                     429   E_Unnas4
                     430   E_Unnas5
                     431   E_Unnas6
                     432   E_Unnas7
                     433   E_Unnas8
                     434   E_Unnas9
                     435   E_Unnas10
                     436   E_Unnas11
                     437   E_Spuri
000008B6  60FE       438   _stop            bra _stop                         stop
                     439   ***************************************************************************************************
                     440   * Go() function in debug monitor
                     441   ***************************************************************************************************
                     442   _go
                     443                   move.l   _SSP,a7        load system stack pointer (remember we are in supervisor mode when running this so a7 is the System stack pointer)
********  **** ****  Error: Undefined or illegal symbol
                     444                   move.l   _PC,-(sp)      copy debug monitor PC variable to the stack
********  **** ****  Error: Undefined or illegal symbol
                     445                   move.w   _SR,-(sp)      copy debug monitor status reg to the stack
********  **** ****  Error: Undefined or illegal symbol
                     446   
000008CA  1038 0078  447                   move.b   $00000078,d0  remove any spurious address exception arising after power on
                     448                   move.l   _d0,d0
********  **** ****  Error: Undefined or illegal symbol
                     449                   move.l   _d1,d1
********  **** ****  Error: Undefined or illegal symbol
                     450                   move.l   _d2,d2
********  **** ****  Error: Undefined or illegal symbol
                     451                   move.l   _d3,d3
********  **** ****  Error: Undefined or illegal symbol
                     452                   move.l   _d4,d4
********  **** ****  Error: Undefined or illegal symbol
                     453                   move.l   _d5,d5
********  **** ****  Error: Undefined or illegal symbol
                     454                   move.l   _d6,d6
********  **** ****  Error: Undefined or illegal symbol
                     455                   move.l   _d7,d7
********  **** ****  Error: Undefined or illegal symbol
                     456   
                     457                   move.l   _USP,a0
********  **** ****  Error: Undefined or illegal symbol
00000904  4E60       458                   move.l   a0,USP        load user stack pointer (remember we are in supervisor mode when running this, so a7 is the System stack pointer)
                     459                   move.l   _a0,a0
********  **** ****  Error: Undefined or illegal symbol
                     460                   move.l   _a1,a1
********  **** ****  Error: Undefined or illegal symbol
                     461                   move.l   _a2,a2
********  **** ****  Error: Undefined or illegal symbol
                     462                   move.l   _a3,a3
********  **** ****  Error: Undefined or illegal symbol
                     463                   move.l   _a4,a4
********  **** ****  Error: Undefined or illegal symbol
                     464                   move.l   _a5,a5
********  **** ****  Error: Undefined or illegal symbol
                     465                   move.l   _a6,a6
********  **** ****  Error: Undefined or illegal symbol
00000930  4E73       466                   rte                    load the status reg and PC from the stack and commence running
                     467                                          *used to be rte but this didn't load the status byte
                     468   
                     469   ; C:\M68KV6.0 - 800BY480\PROGRAMS\DEBUGMONITORCODE\M68KUSERPROGRAM (DE1).C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                     470   ; #include <stdio.h>
                     471   ; #include <string.h>
                     472   ; #include <ctype.h>
                     473   ; //IMPORTANT
                     474   ; //
                     475   ; // Uncomment one of the two #defines below
                     476   ; // Define StartOfExceptionVectorTable as 08030000 if running programs from sram or
                     477   ; // 0B000000 for running programs from dram
                     478   ; //
                     479   ; // In your labs, you will initially start by designing a system with SRam and later move to
                     480   ; // Dram, so these constants will need to be changed based on the version of the system you have
                     481   ; // building
                     482   ; //
                     483   ; // The working 68k system SOF file posted on canvas that you can use for your pre-lab
                     484   ; // is based around Dram so #define accordingly before building
                     485   ; //#define StartOfExceptionVectorTable 0x08030000
                     486   ; #define StartOfExceptionVectorTable 0x0B000000
                     487   ; /**********************************************************************************************
                     488   ; **	Parallel port addresses
                     489   ; **********************************************************************************************/
                     490   ; #define PortA   *(volatile unsigned char *)(0x00400000)
                     491   ; #define PortB   *(volatile unsigned char *)(0x00400002)
                     492   ; #define PortC   *(volatile unsigned char *)(0x00400004)
                     493   ; #define PortD   *(volatile unsigned char *)(0x00400006)
                     494   ; #define PortE   *(volatile unsigned char *)(0x00400008)
                     495   ; /*********************************************************************************************
                     496   ; **	Hex 7 seg displays port addresses
                     497   ; *********************************************************************************************/
                     498   ; #define HEX_A        *(volatile unsigned char *)(0x00400010)
                     499   ; #define HEX_B        *(volatile unsigned char *)(0x00400012)
                     500   ; #define HEX_C        *(volatile unsigned char *)(0x00400014)    // de2 only
                     501   ; #define HEX_D        *(volatile unsigned char *)(0x00400016)    // de2 only
                     502   ; /**********************************************************************************************
                     503   ; **	LCD display port addresses
                     504   ; **********************************************************************************************/
                     505   ; #define LCDcommand   *(volatile unsigned char *)(0x00400020)
                     506   ; #define LCDdata      *(volatile unsigned char *)(0x00400022)
                     507   ; /********************************************************************************************
                     508   ; **	Timer Port addresses
                     509   ; *********************************************************************************************/
                     510   ; #define Timer1Data      *(volatile unsigned char *)(0x00400030)
                     511   ; #define Timer1Control   *(volatile unsigned char *)(0x00400032)
                     512   ; #define Timer1Status    *(volatile unsigned char *)(0x00400032)
                     513   ; #define Timer2Data      *(volatile unsigned char *)(0x00400034)
                     514   ; #define Timer2Control   *(volatile unsigned char *)(0x00400036)
                     515   ; #define Timer2Status    *(volatile unsigned char *)(0x00400036)
                     516   ; #define Timer3Data      *(volatile unsigned char *)(0x00400038)
                     517   ; #define Timer3Control   *(volatile unsigned char *)(0x0040003A)
                     518   ; #define Timer3Status    *(volatile unsigned char *)(0x0040003A)
                     519   ; #define Timer4Data      *(volatile unsigned char *)(0x0040003C)
                     520   ; #define Timer4Control   *(volatile unsigned char *)(0x0040003E)
                     521   ; #define Timer4Status    *(volatile unsigned char *)(0x0040003E)
                     522   ; /*********************************************************************************************
                     523   ; **	RS232 port addresses
                     524   ; *********************************************************************************************/
                     525   ; #define RS232_Control     *(volatile unsigned char *)(0x00400040)
                     526   ; #define RS232_Status      *(volatile unsigned char *)(0x00400040)
                     527   ; #define RS232_TxData      *(volatile unsigned char *)(0x00400042)
                     528   ; #define RS232_RxData      *(volatile unsigned char *)(0x00400042)
                     529   ; #define RS232_Baud        *(volatile unsigned char *)(0x00400044)
                     530   ; /*********************************************************************************************
                     531   ; **	PIA 1 and 2 port addresses
                     532   ; *********************************************************************************************/
                     533   ; #define PIA1_PortA_Data     *(volatile unsigned char *)(0x00400050)         // combined data and data direction register share same address
                     534   ; #define PIA1_PortA_Control *(volatile unsigned char *)(0x00400052)
                     535   ; #define PIA1_PortB_Data     *(volatile unsigned char *)(0x00400054)         // combined data and data direction register share same address
                     536   ; #define PIA1_PortB_Control *(volatile unsigned char *)(0x00400056)
                     537   ; #define PIA2_PortA_Data     *(volatile unsigned char *)(0x00400060)         // combined data and data direction register share same address
                     538   ; #define PIA2_PortA_Control *(volatile unsigned char *)(0x00400062)
                     539   ; #define PIA2_PortB_data     *(volatile unsigned char *)(0x00400064)         // combined data and data direction register share same address
                     540   ; #define PIA2_PortB_Control *(volatile unsigned char *)(0x00400066)
                     541   ; /*********************************************************************************************************************************
                     542   ; (( DO NOT initialise global variables here, do it main even if you want 0
                     543   ; (( it's a limitation of the compiler
                     544   ; (( YOU HAVE BEEN WARNED
                     545   ; *********************************************************************************************************************************/
                     546   ; unsigned int i, x, y, z, PortA_Count;
                     547   ; unsigned char Timer1Count, Timer2Count, Timer3Count, Timer4Count ;
                     548   ; /*******************************************************************************************
                     549   ; ** Function Prototypes
                     550   ; *******************************************************************************************/
                     551   ; void Wait1ms(void);
                     552   ; void Wait3ms(void);
                     553   ; void Init_LCD(void) ;
                     554   ; void LCDOutchar(int c);
                     555   ; void LCDOutMess(char *theMessage);
                     556   ; void LCDClearln(void);
                     557   ; void LCDline1Message(char *theMessage);
                     558   ; void LCDline2Message(char *theMessage);
                     559   ; int sprintf(char *out, const char *format, ...) ;
                     560   ; /*****************************************************************************************
                     561   ; **	Interrupt service routine for Timers
                     562   ; **
                     563   ; **  Timers 1 - 4 share a common IRQ on the CPU  so this function uses polling to figure
                     564   ; **  out which timer is producing the interrupt
                     565   ; **
                     566   ; *****************************************************************************************/
                     567   ; void Timer_ISR()
                     568   ; {
                     569   _Timer_ISR:
                     570   ; if(Timer1Status == 1) {         // Did Timer 1 produce the Interrupt?
00000932  1039 0040  571          move.b    4194354,D0
00000936  0032      
00000938  0C00 0001  572          cmp.b     #1,D0
0000093C  661A       573          bne.s     Timer_ISR_1
                     574   ; Timer1Control = 3;      	// reset the timer to clear the interrupt, enable interrupts and allow counter to run
0000093E  13FC 0003  575          move.b    #3,4194354
00000942  0040 0032 
                     576   ; PortA = Timer1Count++ ;     // increment an LED count on PortA with each tick of Timer 1
00000946  1039 0803  577          move.b    _Timer1Count.L,D0
0000094A  00D8      
0000094C  5239 0803  578          addq.b    #1,_Timer1Count.L
00000950  00D8      
00000952  13C0 0040  579          move.b    D0,4194304
00000956  0000      
                     580   Timer_ISR_1:
                     581   ; }
                     582   ; if(Timer2Status == 1) {         // Did Timer 2 produce the Interrupt?
00000958  1039 0040  583          move.b    4194358,D0
0000095C  0036      
0000095E  0C00 0001  584          cmp.b     #1,D0
00000962  661A       585          bne.s     Timer_ISR_3
                     586   ; Timer2Control = 3;      	// reset the timer to clear the interrupt, enable interrupts and allow counter to run
00000964  13FC 0003  587          move.b    #3,4194358
00000968  0040 0036 
                     588   ; PortC = Timer2Count++ ;     // increment an LED count on PortC with each tick of Timer 2
0000096C  1039 0803  589          move.b    _Timer2Count.L,D0
00000970  00DA      
00000972  5239 0803  590          addq.b    #1,_Timer2Count.L
00000976  00DA      
00000978  13C0 0040  591          move.b    D0,4194308
0000097C  0004      
                     592   Timer_ISR_3:
                     593   ; }
                     594   ; if(Timer3Status == 1) {         // Did Timer 3 produce the Interrupt?
0000097E  1039 0040  595          move.b    4194362,D0
00000982  003A      
00000984  0C00 0001  596          cmp.b     #1,D0
00000988  661A       597          bne.s     Timer_ISR_5
                     598   ; Timer3Control = 3;      	// reset the timer to clear the interrupt, enable interrupts and allow counter to run
0000098A  13FC 0003  599          move.b    #3,4194362
0000098E  0040 003A 
                     600   ; HEX_A = Timer3Count++ ;     // increment a HEX count on Port HEX_A with each tick of Timer 3
00000992  1039 0803  601          move.b    _Timer3Count.L,D0
00000996  00DC      
00000998  5239 0803  602          addq.b    #1,_Timer3Count.L
0000099C  00DC      
0000099E  13C0 0040  603          move.b    D0,4194320
000009A2  0010      
                     604   Timer_ISR_5:
                     605   ; }
                     606   ; if(Timer4Status == 1) {         // Did Timer 4 produce the Interrupt?
000009A4  1039 0040  607          move.b    4194366,D0
000009A8  003E      
000009AA  0C00 0001  608          cmp.b     #1,D0
000009AE  661A       609          bne.s     Timer_ISR_7
                     610   ; Timer4Control = 3;      	// reset the timer to clear the interrupt, enable interrupts and allow counter to run
000009B0  13FC 0003  611          move.b    #3,4194366
000009B4  0040 003E 
                     612   ; HEX_B = Timer4Count++ ;     // increment a HEX count on HEX_B with each tick of Timer 4
000009B8  1039 0803  613          move.b    _Timer4Count.L,D0
000009BC  00DE      
000009BE  5239 0803  614          addq.b    #1,_Timer4Count.L
000009C2  00DE      
000009C4  13C0 0040  615          move.b    D0,4194322
000009C8  0012      
                     616   Timer_ISR_7:
000009CA  4E75       617          rts
                     618   ; }
                     619   ; }
                     620   ; /*****************************************************************************************
                     621   ; **	Interrupt service routine for ACIA. This device has it's own dedicate IRQ level
                     622   ; **  Add your code here to poll Status register and clear interrupt
                     623   ; *****************************************************************************************/
                     624   ; void ACIA_ISR()
                     625   ; {}
                     626   _ACIA_ISR:
000009CC  4E75       627          rts
                     628   ; /***************************************************************************************
                     629   ; **	Interrupt service routine for PIAs 1 and 2. These devices share an IRQ level
                     630   ; **  Add your code here to poll Status register and clear interrupt
                     631   ; *****************************************************************************************/
                     632   ; void PIA_ISR()
                     633   ; {}
                     634   _PIA_ISR:
000009CE  4E75       635          rts
                     636   ; /***********************************************************************************
                     637   ; **	Interrupt service routine for Key 2 on DE1 board. Add your own response here
                     638   ; ************************************************************************************/
                     639   ; void Key2PressISR()
                     640   ; {}
                     641   _Key2PressISR:
000009D0  4E75       642          rts
                     643   ; /***********************************************************************************
                     644   ; **	Interrupt service routine for Key 1 on DE1 board. Add your own response here
                     645   ; ************************************************************************************/
                     646   ; void Key1PressISR()
                     647   ; {}
                     648   _Key1PressISR:
000009D2  4E75       649          rts
                     650   ; /************************************************************************************
                     651   ; **   Delay Subroutine to give the 68000 something useless to do to waste 1 mSec
                     652   ; ************************************************************************************/
                     653   ; void Wait1ms(void)
                     654   ; {
                     655   _Wait1ms:
000009D4  2F02       656          move.l    D2,-(A7)
                     657   ; int  i ;
                     658   ; for(i = 0; i < 1000; i ++)
000009D6  4282       659          clr.l     D2
                     660   Wait1ms_1:
000009D8  0C82 0000  661          cmp.l     #1000,D2
000009DC  03E8      
000009DE  6C04       662          bge.s     Wait1ms_3
000009E0  5282       663          addq.l    #1,D2
000009E2  60F4       664          bra       Wait1ms_1
                     665   Wait1ms_3:
000009E4  241F       666          move.l    (A7)+,D2
000009E6  4E75       667          rts
                     668   ; ;
                     669   ; }
                     670   ; /************************************************************************************
                     671   ; **  Subroutine to give the 68000 something useless to do to waste 3 mSec
                     672   ; **************************************************************************************/
                     673   ; void Wait3ms(void)
                     674   ; {
                     675   _Wait3ms:
000009E8  2F02       676          move.l    D2,-(A7)
                     677   ; int i ;
                     678   ; for(i = 0; i < 3; i++)
000009EA  4282       679          clr.l     D2
                     680   Wait3ms_1:
000009EC  0C82 0000  681          cmp.l     #3,D2
000009F0  0003      
000009F2  6C08       682          bge.s     Wait3ms_3
                     683   ; Wait1ms() ;
000009F4  4EB8 09D4  684          jsr       _Wait1ms
000009F8  5282       685          addq.l    #1,D2
000009FA  60F0       686          bra       Wait3ms_1
                     687   Wait3ms_3:
000009FC  241F       688          move.l    (A7)+,D2
000009FE  4E75       689          rts
                     690   ; }
                     691   ; /*********************************************************************************************
                     692   ; **  Subroutine to initialise the LCD display by writing some commands to the LCD internal registers
                     693   ; **  Sets it for parallel port and 2 line display mode (if I recall correctly)
                     694   ; *********************************************************************************************/
                     695   ; void Init_LCD(void)
                     696   ; {
                     697   _Init_LCD:
                     698   ; LCDcommand = 0x0c ;
00000A00  13FC 000C  699          move.b    #12,4194336
00000A04  0040 0020 
                     700   ; Wait3ms() ;
00000A08  4EB8 09E8  701          jsr       _Wait3ms
                     702   ; LCDcommand = 0x38 ;
00000A0C  13FC 0038  703          move.b    #56,4194336
00000A10  0040 0020 
                     704   ; Wait3ms() ;
00000A14  4EB8 09E8  705          jsr       _Wait3ms
00000A18  4E75       706          rts
                     707   ; }
                     708   ; /*********************************************************************************************
                     709   ; **  Subroutine to initialise the RS232 Port by writing some commands to the internal registers
                     710   ; *********************************************************************************************/
                     711   ; void Init_RS232(void)
                     712   ; {
                     713   _Init_RS232:
                     714   ; RS232_Control = 0x15 ; //  %00010101 set up 6850 uses divide by 16 clock, set RTS low, 8 bits no parity, 1 stop bit, transmitter interrupt disabled
00000A1A  13FC 0015  715          move.b    #21,4194368
00000A1E  0040 0040 
                     716   ; RS232_Baud = 0x1 ;      // program baud rate generator 001 = 115k, 010 = 57.6k, 011 = 38.4k, 100 = 19.2, all others = 9600
00000A22  13FC 0001  717          move.b    #1,4194372
00000A26  0040 0044 
00000A2A  4E75       718          rts
                     719   ; }
                     720   ; /*********************************************************************************************************
                     721   ; **  Subroutine to provide a low level output function to 6850 ACIA
                     722   ; **  This routine provides the basic functionality to output a single character to the serial Port
                     723   ; **  to allow the board to communicate with HyperTerminal Program
                     724   ; **
                     725   ; **  NOTE you do not call this function directly, instead you call the normal putchar() function
                     726   ; **  which in turn calls _putch() below). Other functions like puts(), printf() call putchar() so will
                     727   ; **  call _putch() also
                     728   ; *********************************************************************************************************/
                     729   ; int _putch( int c)
                     730   ; {
                     731   __putch:
00000A2C  4E56 0000  732          link      A6,#0
                     733   ; while((RS232_Status & (char)(0x02)) != (char)(0x02))    // wait for Tx bit in status register or 6850 serial comms chip to be '1'
                     734   _putch_1:
00000A30  1039 0040  735          move.b    4194368,D0
00000A34  0040      
00000A36  C03C 0002  736          and.b     #2,D0
00000A3A  0C00 0002  737          cmp.b     #2,D0
00000A3E  6702       738          beq.s     _putch_3
00000A40  60EE       739          bra       _putch_1
                     740   _putch_3:
                     741   ; ;
                     742   ; RS232_TxData = (c & (char)(0x7f));                      // write to the data register to output the character (mask off bit 8 to keep it 7 bit ASCII)
00000A42  202E 0008  743          move.l    8(A6),D0
00000A46  C0BC 0000  744          and.l     #127,D0
00000A4A  007F      
00000A4C  13C0 0040  745          move.b    D0,4194370
00000A50  0042      
                     746   ; return c ;                                              // putchar() expects the character to be returned
00000A52  202E 0008  747          move.l    8(A6),D0
00000A56  4E5E       748          unlk      A6
00000A58  4E75       749          rts
                     750   ; }
                     751   ; /*********************************************************************************************************
                     752   ; **  Subroutine to provide a low level input function to 6850 ACIA
                     753   ; **  This routine provides the basic functionality to input a single character from the serial Port
                     754   ; **  to allow the board to communicate with HyperTerminal Program Keyboard (your PC)
                     755   ; **
                     756   ; **  NOTE you do not call this function directly, instead you call the normal getchar() function
                     757   ; **  which in turn calls _getch() below). Other functions like gets(), scanf() call getchar() so will
                     758   ; **  call _getch() also
                     759   ; *********************************************************************************************************/
                     760   ; int _getch( void )
                     761   ; {
                     762   __getch:
00000A5A  4E56 FFFC  763          link      A6,#-4
                     764   ; char c ;
                     765   ; while((RS232_Status & (char)(0x01)) != (char)(0x01))    // wait for Rx bit in 6850 serial comms chip status register to be '1'
                     766   _getch_1:
00000A5E  1039 0040  767          move.b    4194368,D0
00000A62  0040      
00000A64  C03C 0001  768          and.b     #1,D0
00000A68  0C00 0001  769          cmp.b     #1,D0
00000A6C  6702       770          beq.s     _getch_3
00000A6E  60EE       771          bra       _getch_1
                     772   _getch_3:
                     773   ; ;
                     774   ; return (RS232_RxData & (char)(0x7f));                   // read received character, mask off top bit and return as 7 bit ASCII character
00000A70  1039 0040  775          move.b    4194370,D0
00000A74  0042      
00000A76  C0BC 0000  776          and.l     #255,D0
00000A7A  00FF      
00000A7C  C0BC 0000  777          and.l     #127,D0
00000A80  007F      
00000A82  4E5E       778          unlk      A6
00000A84  4E75       779          rts
                     780   ; }
                     781   ; /******************************************************************************
                     782   ; **  Subroutine to output a single character to the 2 row LCD display
                     783   ; **  It is assumed the character is an ASCII code and it will be displayed at the
                     784   ; **  current cursor position
                     785   ; *******************************************************************************/
                     786   ; void LCDOutchar(int c)
                     787   ; {
                     788   _LCDOutchar:
00000A86  4E56 0000  789          link      A6,#0
                     790   ; LCDdata = (char)(c);
00000A8A  202E 0008  791          move.l    8(A6),D0
00000A8E  13C0 0040  792          move.b    D0,4194338
00000A92  0022      
                     793   ; Wait1ms() ;
00000A94  4EB8 09D4  794          jsr       _Wait1ms
00000A98  4E5E       795          unlk      A6
00000A9A  4E75       796          rts
                     797   ; }
                     798   ; /**********************************************************************************
                     799   ; *subroutine to output a message at the current cursor position of the LCD display
                     800   ; ************************************************************************************/
                     801   ; void LCDOutMessage(char *theMessage)
                     802   ; {
                     803   _LCDOutMessage:
00000A9C  4E56 FFFC  804          link      A6,#-4
                     805   ; char c ;
                     806   ; while((c = *theMessage++) != 0)     // output characters from the string until NULL
                     807   LCDOutMessage_1:
00000AA0  206E 0008  808          move.l    8(A6),A0
00000AA4  52AE 0008  809          addq.l    #1,8(A6)
00000AA8  1D50 FFFF  810          move.b    (A0),-1(A6)
00000AAC  1010       811          move.b    (A0),D0
00000AAE  6712       812          beq.s     LCDOutMessage_3
                     813   ; LCDOutchar(c) ;
00000AB0  122E FFFF  814          move.b    -1(A6),D1
00000AB4  4881       815          ext.w     D1
00000AB6  48C1       816          ext.l     D1
00000AB8  2F01       817          move.l    D1,-(A7)
00000ABA  4EB8 0A86  818          jsr       _LCDOutchar
00000ABE  584F       819          addq.w    #4,A7
00000AC0  60DE       820          bra       LCDOutMessage_1
                     821   LCDOutMessage_3:
00000AC2  4E5E       822          unlk      A6
00000AC4  4E75       823          rts
                     824   ; }
                     825   ; /******************************************************************************
                     826   ; *subroutine to clear the line by issuing 24 space characters
                     827   ; *******************************************************************************/
                     828   ; void LCDClearln(void)
                     829   ; {
                     830   _LCDClearln:
00000AC6  2F02       831          move.l    D2,-(A7)
                     832   ; int i ;
                     833   ; for(i = 0; i < 24; i ++)
00000AC8  4282       834          clr.l     D2
                     835   LCDClearln_1:
00000ACA  0C82 0000  836          cmp.l     #24,D2
00000ACE  0018      
00000AD0  6C0E       837          bge.s     LCDClearln_3
                     838   ; LCDOutchar(' ') ;       // write a space char to the LCD display
00000AD2  4878 0020  839          pea       32
00000AD6  4EB8 0A86  840          jsr       _LCDOutchar
00000ADA  584F       841          addq.w    #4,A7
00000ADC  5282       842          addq.l    #1,D2
00000ADE  60EA       843          bra       LCDClearln_1
                     844   LCDClearln_3:
00000AE0  241F       845          move.l    (A7)+,D2
00000AE2  4E75       846          rts
                     847   ; }
                     848   ; /******************************************************************************
                     849   ; **  Subroutine to move the LCD cursor to the start of line 1 and clear that line
                     850   ; *******************************************************************************/
                     851   ; void LCDLine1Message(char *theMessage)
                     852   ; {
                     853   _LCDLine1Message:
00000AE4  4E56 0000  854          link      A6,#0
                     855   ; LCDcommand = 0x80 ;
00000AE8  13FC 0080  856          move.b    #128,4194336
00000AEC  0040 0020 
                     857   ; Wait3ms();
00000AF0  4EB8 09E8  858          jsr       _Wait3ms
                     859   ; LCDClearln() ;
00000AF4  4EB8 0AC6  860          jsr       _LCDClearln
                     861   ; LCDcommand = 0x80 ;
00000AF8  13FC 0080  862          move.b    #128,4194336
00000AFC  0040 0020 
                     863   ; Wait3ms() ;
00000B00  4EB8 09E8  864          jsr       _Wait3ms
                     865   ; LCDOutMessage(theMessage) ;
00000B04  2F2E 0008  866          move.l    8(A6),-(A7)
00000B08  4EB8 0A9C  867          jsr       _LCDOutMessage
00000B0C  584F       868          addq.w    #4,A7
00000B0E  4E5E       869          unlk      A6
00000B10  4E75       870          rts
                     871   ; }
                     872   ; /******************************************************************************
                     873   ; **  Subroutine to move the LCD cursor to the start of line 2 and clear that line
                     874   ; *******************************************************************************/
                     875   ; void LCDLine2Message(char *theMessage)
                     876   ; {
                     877   _LCDLine2Message:
00000B12  4E56 0000  878          link      A6,#0
                     879   ; LCDcommand = 0xC0 ;
00000B16  13FC 00C0  880          move.b    #192,4194336
00000B1A  0040 0020 
                     881   ; Wait3ms();
00000B1E  4EB8 09E8  882          jsr       _Wait3ms
                     883   ; LCDClearln() ;
00000B22  4EB8 0AC6  884          jsr       _LCDClearln
                     885   ; LCDcommand = 0xC0 ;
00000B26  13FC 00C0  886          move.b    #192,4194336
00000B2A  0040 0020 
                     887   ; Wait3ms() ;
00000B2E  4EB8 09E8  888          jsr       _Wait3ms
                     889   ; LCDOutMessage(theMessage) ;
00000B32  2F2E 0008  890          move.l    8(A6),-(A7)
00000B36  4EB8 0A9C  891          jsr       _LCDOutMessage
00000B3A  584F       892          addq.w    #4,A7
00000B3C  4E5E       893          unlk      A6
00000B3E  4E75       894          rts
                     895   ; }
                     896   ; /*********************************************************************************************************************************
                     897   ; **  IMPORTANT FUNCTION
                     898   ; **  This function install an exception handler so you can capture and deal with any 68000 exception in your program
                     899   ; **  You pass it the name of a function in your code that will get called in response to the exception (as the 1st parameter)
                     900   ; **  and in the 2nd parameter, you pass it the exception number that you want to take over (see 68000 exceptions for details)
                     901   ; **  Calling this function allows you to deal with Interrupts for example
                     902   ; ***********************************************************************************************************************************/
                     903   ; void InstallExceptionHandler( void (*function_ptr)(), int level)
                     904   ; {
                     905   _InstallExceptionHandler:
00000B40  4E56 FFFC  906          link      A6,#-4
                     907   ; volatile long int *RamVectorAddress = (volatile long int *)(StartOfExceptionVectorTable) ;   // pointer to the Ram based interrupt vector table created in Cstart in debug monitor
00000B44  2D7C 0B00  908          move.l    #184549376,-4(A6)
00000B48  0000 FFFC 
                     909   ; RamVectorAddress[level] = (long int *)(function_ptr);                       // install the address of our function into the exception table
00000B4C  206E FFFC  910          move.l    -4(A6),A0
00000B50  202E 000C  911          move.l    12(A6),D0
00000B54  E588       912          lsl.l     #2,D0
00000B56  21AE 0008  913          move.l    8(A6),0(A0,D0.L)
00000B5A  0800      
00000B5C  4E5E       914          unlk      A6
00000B5E  4E75       915          rts
                     916   ; }
                     917   ; /******************************************************************************************************************************
                     918   ; * Start of user program
                     919   ; ******************************************************************************************************************************/
                     920   ; void main()
                     921   ; {
                     922   _main:
00000B60  4E56 FF54  923          link      A6,#-172
00000B64  48E7 0030  924          movem.l   A2/A3,-(A7)
00000B68  45F8 0B40  925          lea       _InstallExceptionHandler.L,A2
00000B6C  47F9 0000  926          lea       _printf.L,A3
00000B70  15A0      
                     927   ; unsigned int row, i=0, count=0, counter1=1;
00000B72  42AE FF58  928          clr.l     -168(A6)
00000B76  42AE FF5C  929          clr.l     -164(A6)
00000B7A  2D7C 0000  930          move.l    #1,-160(A6)
00000B7E  0001 FF60 
                     931   ; char c, text[150] ;
                     932   ; int PassFailFlag = 1 ;
00000B82  2D7C 0000  933          move.l    #1,-4(A6)
00000B86  0001 FFFC 
                     934   ; i = x = y = z = PortA_Count =0;
00000B8A  42B9 0803  935          clr.l     _PortA_Count.L
00000B8E  00D4      
00000B90  42B9 0803  936          clr.l     _z.L
00000B94  00D0      
00000B96  42B9 0803  937          clr.l     _y.L
00000B9A  00CC      
00000B9C  42B9 0803  938          clr.l     _x.L
00000BA0  00C8      
00000BA2  42AE FF58  939          clr.l     -168(A6)
                     940   ; Timer1Count = Timer2Count = Timer3Count = Timer4Count = 0;
00000BA6  4239 0803  941          clr.b     _Timer4Count.L
00000BAA  00DE      
00000BAC  4239 0803  942          clr.b     _Timer3Count.L
00000BB0  00DC      
00000BB2  4239 0803  943          clr.b     _Timer2Count.L
00000BB6  00DA      
00000BB8  4239 0803  944          clr.b     _Timer1Count.L
00000BBC  00D8      
                     945   ; InstallExceptionHandler(PIA_ISR, 25) ;          // install interrupt handler for PIAs 1 and 2 on level 1 IRQ
00000BBE  4878 0019  946          pea       25
00000BC2  4878 09CE  947          pea       _PIA_ISR.L
00000BC6  4E92       948          jsr       (A2)
00000BC8  504F       949          addq.w    #8,A7
                     950   ; InstallExceptionHandler(ACIA_ISR, 26) ;		    // install interrupt handler for ACIA on level 2 IRQ
00000BCA  4878 001A  951          pea       26
00000BCE  4878 09CC  952          pea       _ACIA_ISR.L
00000BD2  4E92       953          jsr       (A2)
00000BD4  504F       954          addq.w    #8,A7
                     955   ; InstallExceptionHandler(Timer_ISR, 27) ;		// install interrupt handler for Timers 1-4 on level 3 IRQ
00000BD6  4878 001B  956          pea       27
00000BDA  4878 0932  957          pea       _Timer_ISR.L
00000BDE  4E92       958          jsr       (A2)
00000BE0  504F       959          addq.w    #8,A7
                     960   ; InstallExceptionHandler(Key2PressISR, 28) ;	    // install interrupt handler for Key Press 2 on DE1 board for level 4 IRQ
00000BE2  4878 001C  961          pea       28
00000BE6  4878 09D0  962          pea       _Key2PressISR.L
00000BEA  4E92       963          jsr       (A2)
00000BEC  504F       964          addq.w    #8,A7
                     965   ; InstallExceptionHandler(Key1PressISR, 29) ;	    // install interrupt handler for Key Press 1 on DE1 board for level 5 IRQ
00000BEE  4878 001D  966          pea       29
00000BF2  4878 09D2  967          pea       _Key1PressISR.L
00000BF6  4E92       968          jsr       (A2)
00000BF8  504F       969          addq.w    #8,A7
                     970   ; Timer1Data = 0x10;		// program time delay into timers 1-4
00000BFA  13FC 0010  971          move.b    #16,4194352
00000BFE  0040 0030 
                     972   ; Timer2Data = 0x20;
00000C02  13FC 0020  973          move.b    #32,4194356
00000C06  0040 0034 
                     974   ; Timer3Data = 0x15;
00000C0A  13FC 0015  975          move.b    #21,4194360
00000C0E  0040 0038 
                     976   ; Timer4Data = 0x25;
00000C12  13FC 0025  977          move.b    #37,4194364
00000C16  0040 003C 
                     978   ; Timer1Control = 3;		// write 3 to control register to Bit0 = 1 (enable interrupt from timers) 1 - 4 and allow them to count Bit 1 = 1
00000C1A  13FC 0003  979          move.b    #3,4194354
00000C1E  0040 0032 
                     980   ; Timer2Control = 3;
00000C22  13FC 0003  981          move.b    #3,4194358
00000C26  0040 0036 
                     982   ; Timer3Control = 3;
00000C2A  13FC 0003  983          move.b    #3,4194362
00000C2E  0040 003A 
                     984   ; Timer4Control = 3;
00000C32  13FC 0003  985          move.b    #3,4194366
00000C36  0040 003E 
                     986   ; Init_LCD();             // initialise the LCD display to use a parallel data interface and 2 lines of display
00000C3A  4EB8 0A00  987          jsr       _Init_LCD
                     988   ; Init_RS232() ;          // initialise the RS232 port for use with hyper terminal
00000C3E  4EB8 0A1A  989          jsr       _Init_RS232
                     990   ; /*************************************************************************************************
                     991   ; **  Test of scanf function
                     992   ; *************************************************************************************************/
                     993   ; scanflush() ;                       // flush any text that may have been typed ahead
00000C42  4EB9 0000  994          jsr       _scanflush
00000C46  0F96      
                     995   ; printf("\r\nEnter Integer: ") ;
00000C48  4879 0000  996          pea       @m68kus~1_1.L
00000C4C  2140      
00000C4E  4E93       997          jsr       (A3)
00000C50  584F       998          addq.w    #4,A7
                     999   ; scanf("%d", &i) ;
00000C52  486E FF58 1000          pea       -168(A6)
00000C56  4879 0000 1001          pea       @m68kus~1_2.L
00000C5A  2152      
00000C5C  4EB9 0000 1002          jsr       _scanf
00000C60  0CD8      
00000C62  504F      1003          addq.w    #8,A7
                    1004   ; printf("You entered %d", i) ;
00000C64  2F2E FF58 1005          move.l    -168(A6),-(A7)
00000C68  4879 0000 1006          pea       @m68kus~1_3.L
00000C6C  2156      
00000C6E  4E93      1007          jsr       (A3)
00000C70  504F      1008          addq.w    #8,A7
                    1009   ; sprintf(text, "Hello CPEN 412 Student") ;
00000C72  4879 0000 1010          pea       @m68kus~1_4.L
00000C76  2166      
00000C78  486E FF66 1011          pea       -154(A6)
00000C7C  4EB9 0000 1012          jsr       _sprintf
00000C80  0CA4      
00000C82  504F      1013          addq.w    #8,A7
                    1014   ; LCDLine1Message(text) ;
00000C84  486E FF66 1015          pea       -154(A6)
00000C88  4EB8 0AE4 1016          jsr       _LCDLine1Message
00000C8C  584F      1017          addq.w    #4,A7
                    1018   ; printf("\r\nHello CPEN 412 Student\r\nYour LEDs should be Flashing") ;
00000C8E  4879 0000 1019          pea       @m68kus~1_5.L
00000C92  217E      
00000C94  4E93      1020          jsr       (A3)
00000C96  584F      1021          addq.w    #4,A7
                    1022   ; printf("\r\nYour LCD should be displaying") ;
00000C98  4879 0000 1023          pea       @m68kus~1_6.L
00000C9C  21B6      
00000C9E  4E93      1024          jsr       (A3)
00000CA0  584F      1025          addq.w    #4,A7
                    1026   ; while(1)
                    1027   main_1:
00000CA2  60FE      1028          bra       main_1
                    1029   ; ;
                    1030   ; // programs should NOT exit as there is nothing to Exit TO !!!!!!
                    1031   ; // There is no OS - just press the reset button to end program and call debug
                    1032   ; }
                    1033   _sprintf:
00000CA4  4E56 FFFC 1034          link      A6,#-4
00000CA8  48E7 2000 1035          movem.l   D2,-(A7)
00000CAC  41EE 000C 1036          lea       12(A6),A0
00000CB0  5848      1037          addq.w    #4,A0
00000CB2  2408      1038          move.l    A0,D2
00000CB4  2F02      1039          move.l    D2,-(A7)
00000CB6  2F2E 000C 1040          move.l    12(A6),-(A7)
00000CBA  2F2E 0008 1041          move.l    8(A6),-(A7)
00000CBE  6100 09C4 1042          bsr       _vsprintf
00000CC2  DEFC 000C 1043          add.w     #12,A7
00000CC6  2D40 FFFC 1044          move.l    D0,-4(A6)
00000CCA  4282      1045          clr.l     D2
00000CCC  202E FFFC 1046          move.l    -4(A6),D0
00000CD0  4CDF 0004 1047          movem.l   (A7)+,D2
00000CD4  4E5E      1048          unlk      A6
00000CD6  4E75      1049          rts
                    1050   _scanf:
00000CD8  4E56 FFFC 1051          link      A6,#-4
00000CDC  48E7 2000 1052          movem.l   D2,-(A7)
00000CE0  41EE 0008 1053          lea       8(A6),A0
00000CE4  5848      1054          addq.w    #4,A0
00000CE6  2408      1055          move.l    A0,D2
00000CE8  2F02      1056          move.l    D2,-(A7)
00000CEA  2F2E 0008 1057          move.l    8(A6),-(A7)
00000CEE  42A7      1058          clr.l     -(A7)
00000CF0  6100 02C2 1059          bsr       _vsscanf
00000CF4  DEFC 000C 1060          add.w     #12,A7
00000CF8  2D40 FFFC 1061          move.l    D0,-4(A6)
00000CFC  4282      1062          clr.l     D2
00000CFE  202E FFFC 1063          move.l    -4(A6),D0
00000D02  4CDF 0004 1064          movem.l   (A7)+,D2
00000D06  4E5E      1065          unlk      A6
00000D08  4E75      1066          rts
                    1067   @vsscanf_scanread:
00000D0A  4E56 FFFC 1068          link      A6,#-4
00000D0E  48E7 0020 1069          movem.l   A2,-(A7)
00000D12  45F9 0000 1070          lea       @vsscanf_bufx,A2
00000D16  21D6      
00000D18  4AAE 0008 1071          tst.l     8(A6)
00000D1C  6722      1072          beq.s     @vsscanf_scanread_1
00000D1E  206E 0008 1073          move.l    8(A6),A0
00000D22  58AE 0008 1074          addq.l    #4,8(A6)
00000D26  2050      1075          move.l    (A0),A0
00000D28  1010      1076          move.b    (A0),D0
00000D2A  4880      1077          ext.w     D0
00000D2C  48C0      1078          ext.l     D0
00000D2E  2D40 FFFC 1079          move.l    D0,-4(A6)
00000D32  6706      1080          beq.s     @vsscanf_scanread_3
00000D34  202E FFFC 1081          move.l    -4(A6),D0
00000D38  6002      1082          bra.s     @vsscanf_scanread_4
                    1083   @vsscanf_scanread_3:
00000D3A  70FF      1084          moveq     #-1,D0
                    1085   @vsscanf_scanread_4:
00000D3C  6000 0032 1086          bra       @vsscanf_scanread_5
                    1087   @vsscanf_scanread_1:
00000D40  2052      1088          move.l    (A2),A0
00000D42  1010      1089          move.b    (A0),D0
00000D44  6620      1090          bne.s     @vsscanf_scanread_6
00000D46  4879 0803 1091          pea       @vsscanf_buf
00000D4A  00E0      
00000D4C  6100 1038 1092          bsr       _gets
00000D50  584F      1093          addq.w    #4,A7
00000D52  2480      1094          move.l    D0,(A2)
00000D54  4879 0000 1095          pea       @vsscanf_1
00000D58  21DA      
00000D5A  4879 0803 1096          pea       @vsscanf_buf
00000D5E  00E0      
00000D60  6100 10C4 1097          bsr       _strcat
00000D64  504F      1098          addq.w    #8,A7
                    1099   @vsscanf_scanread_6:
00000D66  2052      1100          move.l    (A2),A0
00000D68  5292      1101          addq.l    #1,(A2)
00000D6A  1010      1102          move.b    (A0),D0
00000D6C  4880      1103          ext.w     D0
00000D6E  48C0      1104          ext.l     D0
                    1105   @vsscanf_scanread_5:
00000D70  4CDF 0400 1106          movem.l   (A7)+,A2
00000D74  4E5E      1107          unlk      A6
00000D76  4E75      1108          rts
                    1109   @vsscanf_scanputback:
00000D78  4E56 0000 1110          link      A6,#0
00000D7C  48E7 3000 1111          movem.l   D2/D3,-(A7)
00000D80  242E 000C 1112          move.l    12(A6),D2
00000D84  262E 0008 1113          move.l    8(A6),D3
00000D88  6718      1114          beq.s     @vsscanf_scanputback_1
00000D8A  0C82 FFFF 1115          cmp.l     #-1,D2
00000D8E  FFFF      
00000D90  670A      1116          beq.s     @vsscanf_scanputback_3
00000D92  5983      1117          subq.l    #4,D3
00000D94  2043      1118          move.l    D3,A0
00000D96  2050      1119          move.l    (A0),A0
00000D98  1082      1120          move.b    D2,(A0)
00000D9A  6004      1121          bra.s     @vsscanf_scanputback_4
                    1122   @vsscanf_scanputback_3:
00000D9C  2043      1123          move.l    D3,A0
00000D9E  5390      1124          subq.l    #1,(A0)
                    1125   @vsscanf_scanputback_4:
00000DA0  602E      1126          bra.s     @vsscanf_scanputback_6
                    1127   @vsscanf_scanputback_1:
00000DA2  41F9 0803 1128          lea       @vsscanf_buf,A0
00000DA6  00E0      
00000DA8  2008      1129          move.l    A0,D0
00000DAA  B0B9 0000 1130          cmp.l     @vsscanf_bufx,D0
00000DAE  21D6      
00000DB0  6610      1131          bne.s     @vsscanf_scanputback_5
00000DB2  4239 0803 1132          clr.b     @vsscanf_buf
00000DB6  00E0      
00000DB8  2F02      1133          move.l    D2,-(A7)
00000DBA  6100 10AC 1134          bsr       _ungetch
00000DBE  584F      1135          addq.w    #4,A7
00000DC0  600E      1136          bra.s     @vsscanf_scanputback_6
                    1137   @vsscanf_scanputback_5:
00000DC2  53B9 0000 1138          subq.l    #1,@vsscanf_bufx
00000DC6  21D6      
00000DC8  2079 0000 1139          move.l    @vsscanf_bufx,A0
00000DCC  21D6      
00000DCE  1082      1140          move.b    D2,(A0)
                    1141   @vsscanf_scanputback_6:
00000DD0  2002      1142          move.l    D2,D0
00000DD2  4CDF 000C 1143          movem.l   (A7)+,D2/D3
00000DD6  4E5E      1144          unlk      A6
00000DD8  4E75      1145          rts
                    1146   @vsscanf_scanspace:
00000DDA  4E56 0000 1147          link      A6,#0
00000DDE  48E7 2000 1148          movem.l   D2,-(A7)
                    1149   @vsscanf_scanspace_1:
00000DE2  2F2E 0008 1150          move.l    8(A6),-(A7)
00000DE6  6100 FF22 1151          bsr       @vsscanf_scanread
00000DEA  584F      1152          addq.w    #4,A7
00000DEC  2400      1153          move.l    D0,D2
00000DEE  206E 000C 1154          move.l    12(A6),A0
00000DF2  5290      1155          addq.l    #1,(A0)
00000DF4  2042      1156          move.l    D2,A0
00000DF6  43F9 0000 1157          lea       __ctype,A1
00000DFA  21DC      
00000DFC  1030 9801 1158          move.b    1(A0,A1.L),D0
00000E00  C03C 0010 1159          and.b     #16,D0
00000E04  66DC      1160          bne       @vsscanf_scanspace_1
00000E06  2002      1161          move.l    D2,D0
00000E08  4CDF 0004 1162          movem.l   (A7)+,D2
00000E0C  4E5E      1163          unlk      A6
00000E0E  4E75      1164          rts
                    1165   @vsscanf_scanselect:
00000E10  4E56 0000 1166          link      A6,#0
00000E14  48E7 3F20 1167          movem.l   D2/D3/D4/D5/D6/D7/A2,-(A7)
00000E18  262E 000C 1168          move.l    12(A6),D3
00000E1C  2C2E 0018 1169          move.l    24(A6),D6
00000E20  2E2E 0014 1170          move.l    20(A6),D7
00000E24  2043      1171          move.l    D3,A0
00000E26  1010      1172          move.b    (A0),D0
00000E28  4880      1173          ext.w     D0
00000E2A  48C0      1174          ext.l     D0
00000E2C  0C80 0000 1175          cmp.l     #94,D0
00000E30  005E      
00000E32  6608      1176          bne.s     @vsscanf_scanselect_1
00000E34  347C 0001 1177          move.w    #1,A2
00000E38  5283      1178          addq.l    #1,D3
00000E3A  6004      1179          bra.s     @vsscanf_scanselect_2
                    1180   @vsscanf_scanselect_1:
00000E3C  347C 0000 1181          move.w    #0,A2
                    1182   @vsscanf_scanselect_2:
00000E40  202E 0010 1183          move.l    16(A6),D0
00000E44  53AE 0010 1184          subq.l    #1,16(A6)
00000E48  4A80      1185          tst.l     D0
00000E4A  6700 0108 1186          beq       @vsscanf_scanselect_5
00000E4E  2F2E 0008 1187          move.l    8(A6),-(A7)
00000E52  6100 FEB6 1188          bsr       @vsscanf_scanread
00000E56  584F      1189          addq.w    #4,A7
00000E58  2800      1190          move.l    D0,D4
00000E5A  0C84 FFFF 1191          cmp.l     #-1,D4
00000E5E  FFFF      
00000E60  6604      1192          bne.s     @vsscanf_scanselect_6
00000E62  6000 00F0 1193          bra       @vsscanf_scanselect_5
                    1194   @vsscanf_scanselect_6:
00000E66  206E 001C 1195          move.l    28(A6),A0
00000E6A  5290      1196          addq.l    #1,(A0)
00000E6C  4285      1197          clr.l     D5
00000E6E  4282      1198          clr.l     D2
                    1199   @vsscanf_scanselect_8:
00000E70  2043      1200          move.l    D3,A0
00000E72  1030 2800 1201          move.b    0(A0,D2.L),D0
00000E76  4880      1202          ext.w     D0
00000E78  48C0      1203          ext.l     D0
00000E7A  0C80 0000 1204          cmp.l     #93,D0
00000E7E  005D      
00000E80  6700 008E 1205          beq       @vsscanf_scanselect_10
00000E84  4A82      1206          tst.l     D2
00000E86  6716      1207          beq.s     @vsscanf_scanselect_11
00000E88  2043      1208          move.l    D3,A0
00000E8A  1030 2800 1209          move.b    0(A0,D2.L),D0
00000E8E  4880      1210          ext.w     D0
00000E90  48C0      1211          ext.l     D0
00000E92  0C80 0000 1212          cmp.l     #93,D0
00000E96  005D      
00000E98  6604      1213          bne.s     @vsscanf_scanselect_11
00000E9A  6000 0074 1214          bra       @vsscanf_scanselect_10
                    1215   @vsscanf_scanselect_11:
00000E9E  4A82      1216          tst.l     D2
00000EA0  6700 0058 1217          beq       @vsscanf_scanselect_15
00000EA4  2043      1218          move.l    D3,A0
00000EA6  1030 2800 1219          move.b    0(A0,D2.L),D0
00000EAA  4880      1220          ext.w     D0
00000EAC  48C0      1221          ext.l     D0
00000EAE  0C80 0000 1222          cmp.l     #45,D0
00000EB2  002D      
00000EB4  6600 0044 1223          bne       @vsscanf_scanselect_15
00000EB8  2043      1224          move.l    D3,A0
00000EBA  2002      1225          move.l    D2,D0
00000EBC  5380      1226          subq.l    #1,D0
00000EBE  2243      1227          move.l    D3,A1
00000EC0  2F08      1228          move.l    A0,-(A7)
00000EC2  2042      1229          move.l    D2,A0
00000EC4  1230 0800 1230          move.b    0(A0,D0.L),D1
00000EC8  B230 9801 1231          cmp.b     1(A0,A1.L),D1
00000ECC  6C00 002C 1232          bge       @vsscanf_scanselect_15
00000ED0  205F      1233          move.l    (A7)+,A0
00000ED2  2043      1234          move.l    D3,A0
00000ED4  2002      1235          move.l    D2,D0
00000ED6  5380      1236          subq.l    #1,D0
00000ED8  1030 0800 1237          move.b    0(A0,D0.L),D0
00000EDC  4880      1238          ext.w     D0
00000EDE  48C0      1239          ext.l     D0
00000EE0  B880      1240          cmp.l     D0,D4
00000EE2  6D12      1241          blt.s     @vsscanf_scanselect_17
00000EE4  2043      1242          move.l    D3,A0
00000EE6  2242      1243          move.l    D2,A1
00000EE8  1031 8801 1244          move.b    1(A1,A0.L),D0
00000EEC  4880      1245          ext.w     D0
00000EEE  48C0      1246          ext.l     D0
00000EF0  B880      1247          cmp.l     D0,D4
00000EF2  6E02      1248          bgt.s     @vsscanf_scanselect_17
00000EF4  601A      1249          bra.s     @vsscanf_scanselect_10
                    1250   @vsscanf_scanselect_17:
00000EF6  5282      1251          addq.l    #1,D2
00000EF8  6010      1252          bra.s     @vsscanf_scanselect_19
                    1253   @vsscanf_scanselect_15:
00000EFA  2043      1254          move.l    D3,A0
00000EFC  1030 2800 1255          move.b    0(A0,D2.L),D0
00000F00  4880      1256          ext.w     D0
00000F02  48C0      1257          ext.l     D0
00000F04  B880      1258          cmp.l     D0,D4
00000F06  6602      1259          bne.s     @vsscanf_scanselect_19
00000F08  6006      1260          bra.s     @vsscanf_scanselect_10
                    1261   @vsscanf_scanselect_19:
00000F0A  5282      1262          addq.l    #1,D2
00000F0C  6000 FF62 1263          bra       @vsscanf_scanselect_8
                    1264   @vsscanf_scanselect_10:
00000F10  4A82      1265          tst.l     D2
00000F12  6712      1266          beq.s     @vsscanf_scanselect_23
00000F14  2043      1267          move.l    D3,A0
00000F16  1030 2800 1268          move.b    0(A0,D2.L),D0
00000F1A  4880      1269          ext.w     D0
00000F1C  48C0      1270          ext.l     D0
00000F1E  0C80 0000 1271          cmp.l     #93,D0
00000F22  005D      
00000F24  6702      1272          beq.s     @vsscanf_scanselect_21
                    1273   @vsscanf_scanselect_23:
00000F26  7A01      1274          moveq     #1,D5
                    1275   @vsscanf_scanselect_21:
00000F28  200A      1276          move.l    A2,D0
00000F2A  6712      1277          beq.s     @vsscanf_scanselect_24
00000F2C  4A85      1278          tst.l     D5
00000F2E  660C      1279          bne.s     @vsscanf_scanselect_26
00000F30  4A87      1280          tst.l     D7
00000F32  6606      1281          bne.s     @vsscanf_scanselect_28
00000F34  2046      1282          move.l    D6,A0
00000F36  5286      1283          addq.l    #1,D6
00000F38  1084      1284          move.b    D4,(A0)
                    1285   @vsscanf_scanselect_28:
00000F3A  6014      1286          bra.s     @vsscanf_scanselect_4
                    1287   @vsscanf_scanselect_26:
00000F3C  6016      1288          bra.s     @vsscanf_scanselect_5
                    1289   @vsscanf_scanselect_24:
00000F3E  4A85      1290          tst.l     D5
00000F40  670C      1291          beq.s     @vsscanf_scanselect_30
00000F42  4A87      1292          tst.l     D7
00000F44  6606      1293          bne.s     @vsscanf_scanselect_32
00000F46  2046      1294          move.l    D6,A0
00000F48  5286      1295          addq.l    #1,D6
00000F4A  1084      1296          move.b    D4,(A0)
                    1297   @vsscanf_scanselect_32:
00000F4C  6002      1298          bra.s     @vsscanf_scanselect_4
                    1299   @vsscanf_scanselect_30:
00000F4E  6004      1300          bra.s     @vsscanf_scanselect_5
                    1301   @vsscanf_scanselect_4:
00000F50  6000 FEEE 1302          bra       @vsscanf_scanselect_2
                    1303   @vsscanf_scanselect_5:
00000F54  0C84 FFFF 1304          cmp.l     #-1,D4
00000F58  FFFF      
00000F5A  6712      1305          beq.s     @vsscanf_scanselect_34
00000F5C  2F04      1306          move.l    D4,-(A7)
00000F5E  2F2E 0008 1307          move.l    8(A6),-(A7)
00000F62  6100 FE14 1308          bsr       @vsscanf_scanputback
00000F66  504F      1309          addq.w    #8,A7
00000F68  206E 001C 1310          move.l    28(A6),A0
00000F6C  5390      1311          subq.l    #1,(A0)
                    1312   @vsscanf_scanselect_34:
00000F6E  4A87      1313          tst.l     D7
00000F70  6604      1314          bne.s     @vsscanf_scanselect_36
00000F72  2046      1315          move.l    D6,A0
00000F74  4210      1316          clr.b     (A0)
                    1317   @vsscanf_scanselect_36:
00000F76  5283      1318          addq.l    #1,D3
00000F78  2043      1319          move.l    D3,A0
00000F7A  1010      1320          move.b    (A0),D0
00000F7C  4880      1321          ext.w     D0
00000F7E  48C0      1322          ext.l     D0
00000F80  0C80 0000 1323          cmp.l     #93,D0
00000F84  005D      
00000F86  6702      1324          beq.s     @vsscanf_scanselect_40
00000F88  60EC      1325          bra       @vsscanf_scanselect_36
                    1326   @vsscanf_scanselect_40:
00000F8A  5283      1327          addq.l    #1,D3
00000F8C  2003      1328          move.l    D3,D0
00000F8E  4CDF 04FC 1329          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2
00000F92  4E5E      1330          unlk      A6
00000F94  4E75      1331          rts
                    1332   _scanflush:
00000F96  41F9 0803 1333          lea       @vsscanf_buf,A0
00000F9A  00E0      
00000F9C  23C8 0000 1334          move.l    A0,@vsscanf_bufx
00000FA0  21D6      
00000FA2  4239 0803 1335          clr.b     @vsscanf_buf
00000FA6  00E0      
00000FA8  4878 FFFF 1336          pea       -1
00000FAC  6100 0EBA 1337          bsr       _ungetch
00000FB0  584F      1338          addq.w    #4,A7
00000FB2  4E75      1339          rts
                    1340   _vsscanf:
00000FB4  4E56 FF88 1341          link      A6,#-120
00000FB8  48E7 3F3C 1342          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00000FBC  47F8 0D0A 1343          lea       @vsscanf_scanread,A3
00000FC0  4AAE 0008 1344          tst.l     8(A6)
00000FC4  6706      1345          beq.s     vsscanf_1
00000FC6  41EE 0008 1346          lea       8(A6),A0
00000FCA  6004      1347          bra.s     vsscanf_2
                    1348   vsscanf_1:
00000FCC  4280      1349          clr.l     D0
00000FCE  2040      1350          move.l    D0,A0
                    1351   vsscanf_2:
00000FD0  2A08      1352          move.l    A0,D5
00000FD2  42AE FFE4 1353          clr.l     -28(A6)
00000FD6  4284      1354          clr.l     D4
                    1355   vsscanf_3:
00000FD8  206E 000C 1356          move.l    12(A6),A0
00000FDC  52AE 000C 1357          addq.l    #1,12(A6)
00000FE0  1010      1358          move.b    (A0),D0
00000FE2  4880      1359          ext.w     D0
00000FE4  48C0      1360          ext.l     D0
00000FE6  2600      1361          move.l    D0,D3
00000FE8  6700 05AC 1362          beq       vsscanf_5
00000FEC  4286      1363          clr.l     D6
00000FEE  387C 0000 1364          move.w    #0,A4
00000FF2  0C83 0000 1365          cmp.l     #32,D3
00000FF6  0020      
00000FF8  6712      1366          beq.s     vsscanf_8
00000FFA  0C83 0000 1367          cmp.l     #9,D3
00000FFE  0009      
00001000  670A      1368          beq.s     vsscanf_8
00001002  0C83 0000 1369          cmp.l     #10,D3
00001006  000A      
00001008  6600 0048 1370          bne       vsscanf_6
                    1371   vsscanf_8:
0000100C  2F05      1372          move.l    D5,-(A7)
0000100E  4E93      1373          jsr       (A3)
00001010  584F      1374          addq.w    #4,A7
00001012  2400      1375          move.l    D0,D2
00001014  52AE FFE4 1376          addq.l    #1,-28(A6)
00001018  0C82 FFFF 1377          cmp.l     #-1,D2
0000101C  FFFF      
0000101E  660E      1378          bne.s     vsscanf_11
00001020  4A84      1379          tst.l     D4
00001022  6704      1380          beq.s     vsscanf_13
00001024  2004      1381          move.l    D4,D0
00001026  6002      1382          bra.s     vsscanf_14
                    1383   vsscanf_13:
00001028  70FF      1384          moveq     #-1,D0
                    1385   vsscanf_14:
0000102A  6000 056C 1386          bra       vsscanf_15
                    1387   vsscanf_11:
0000102E  2042      1388          move.l    D2,A0
00001030  43F9 0000 1389          lea       __ctype,A1
00001034  21DC      
00001036  1030 9801 1390          move.b    1(A0,A1.L),D0
0000103A  C03C 0010 1391          and.b     #16,D0
0000103E  66CC      1392          bne       vsscanf_8
00001040  53AE FFE4 1393          subq.l    #1,-28(A6)
00001044  2F02      1394          move.l    D2,-(A7)
00001046  2F05      1395          move.l    D5,-(A7)
00001048  6100 FD2E 1396          bsr       @vsscanf_scanputback
0000104C  504F      1397          addq.w    #8,A7
0000104E  6000 0542 1398          bra       vsscanf_139
                    1399   vsscanf_6:
00001052  0C83 0000 1400          cmp.l     #37,D3
00001056  0025      
00001058  6600 0502 1401          bne       vsscanf_127
0000105C  206E 000C 1402          move.l    12(A6),A0
00001060  52AE 000C 1403          addq.l    #1,12(A6)
00001064  1010      1404          move.b    (A0),D0
00001066  4880      1405          ext.w     D0
00001068  48C0      1406          ext.l     D0
0000106A  2600      1407          move.l    D0,D3
0000106C  42AE FFEC 1408          clr.l     -20(A6)
00001070  4286      1409          clr.l     D6
00001072  42AE FFE8 1410          clr.l     -24(A6)
00001076  347C 7FFF 1411          move.w    #32767,A2
0000107A  0C83 0000 1412          cmp.l     #42,D3
0000107E  002A      
00001080  6612      1413          bne.s     vsscanf_18
00001082  7C01      1414          moveq     #1,D6
00001084  206E 000C 1415          move.l    12(A6),A0
00001088  52AE 000C 1416          addq.l    #1,12(A6)
0000108C  1010      1417          move.b    (A0),D0
0000108E  4880      1418          ext.w     D0
00001090  48C0      1419          ext.l     D0
00001092  2600      1420          move.l    D0,D3
                    1421   vsscanf_18:
00001094  2043      1422          move.l    D3,A0
00001096  43F9 0000 1423          lea       __ctype,A1
0000109A  21DC      
0000109C  1030 9801 1424          move.b    1(A0,A1.L),D0
000010A0  C03C 0004 1425          and.b     #4,D0
000010A4  6700 004E 1426          beq       vsscanf_24
000010A8  2003      1427          move.l    D3,D0
000010AA  0480 0000 1428          sub.l     #48,D0
000010AE  0030      
000010B0  2440      1429          move.l    D0,A2
                    1430   vsscanf_22:
000010B2  206E 000C 1431          move.l    12(A6),A0
000010B6  52AE 000C 1432          addq.l    #1,12(A6)
000010BA  1010      1433          move.b    (A0),D0
000010BC  4880      1434          ext.w     D0
000010BE  48C0      1435          ext.l     D0
000010C0  2600      1436          move.l    D0,D3
000010C2  2040      1437          move.l    D0,A0
000010C4  43F9 0000 1438          lea       __ctype,A1
000010C8  21DC      
000010CA  1030 9801 1439          move.b    1(A0,A1.L),D0
000010CE  C0BC 0000 1440          and.l     #255,D0
000010D2  00FF      
000010D4  C0BC 0000 1441          and.l     #4,D0
000010D8  0004      
000010DA  6718      1442          beq.s     vsscanf_24
000010DC  70D0      1443          moveq     #-48,D0
000010DE  2F0A      1444          move.l    A2,-(A7)
000010E0  4878 000A 1445          pea       10
000010E4  6100 0C12 1446          bsr       LMUL
000010E8  2217      1447          move.l    (A7),D1
000010EA  504F      1448          addq.w    #8,A7
000010EC  D283      1449          add.l     D3,D1
000010EE  D081      1450          add.l     D1,D0
000010F0  2440      1451          move.l    D0,A2
000010F2  60BE      1452          bra       vsscanf_22
                    1453   vsscanf_24:
000010F4  0C83 0000 1454          cmp.l     #108,D3
000010F8  006C      
000010FA  6708      1455          beq.s     vsscanf_27
000010FC  0C83 0000 1456          cmp.l     #76,D3
00001100  004C      
00001102  661A      1457          bne.s     vsscanf_25
                    1458   vsscanf_27:
00001104  2D7C 0000 1459          move.l    #1,-24(A6)
00001108  0001 FFE8 
0000110C  206E 000C 1460          move.l    12(A6),A0
00001110  52AE 000C 1461          addq.l    #1,12(A6)
00001114  1010      1462          move.b    (A0),D0
00001116  4880      1463          ext.w     D0
00001118  48C0      1464          ext.l     D0
0000111A  2600      1465          move.l    D0,D3
0000111C  6020      1466          bra.s     vsscanf_28
                    1467   vsscanf_25:
0000111E  0C83 0000 1468          cmp.l     #104,D3
00001122  0068      
00001124  6618      1469          bne.s     vsscanf_28
00001126  2D7C 0000 1470          move.l    #1,-20(A6)
0000112A  0001 FFEC 
0000112E  206E 000C 1471          move.l    12(A6),A0
00001132  52AE 000C 1472          addq.l    #1,12(A6)
00001136  1010      1473          move.b    (A0),D0
00001138  4880      1474          ext.w     D0
0000113A  48C0      1475          ext.l     D0
0000113C  2600      1476          move.l    D0,D3
                    1477   vsscanf_28:
0000113E  0C83 0000 1478          cmp.l     #91,D3
00001142  005B      
00001144  6600 0036 1479          bne       vsscanf_30
00001148  4A86      1480          tst.l     D6
0000114A  660A      1481          bne.s     vsscanf_32
0000114C  206E 0010 1482          move.l    16(A6),A0
00001150  58AE 0010 1483          addq.l    #4,16(A6)
00001154  2E10      1484          move.l    (A0),D7
                    1485   vsscanf_32:
00001156  486E FFE4 1486          pea       -28(A6)
0000115A  2F07      1487          move.l    D7,-(A7)
0000115C  2F06      1488          move.l    D6,-(A7)
0000115E  2F0A      1489          move.l    A2,-(A7)
00001160  2F2E 000C 1490          move.l    12(A6),-(A7)
00001164  2F05      1491          move.l    D5,-(A7)
00001166  6100 FCA8 1492          bsr       @vsscanf_scanselect
0000116A  DEFC 0018 1493          add.w     #24,A7
0000116E  2D40 000C 1494          move.l    D0,12(A6)
00001172  4A86      1495          tst.l     D6
00001174  6602      1496          bne.s     vsscanf_34
00001176  5284      1497          addq.l    #1,D4
                    1498   vsscanf_34:
00001178  6000 0418 1499          bra       vsscanf_139
                    1500   vsscanf_30:
0000117C  0C83 0000 1501          cmp.l     #110,D3
00001180  006E      
00001182  661A      1502          bne.s     vsscanf_36
00001184  4A86      1503          tst.l     D6
00001186  6612      1504          bne.s     vsscanf_38
00001188  206E 0010 1505          move.l    16(A6),A0
0000118C  58AE 0010 1506          addq.l    #4,16(A6)
00001190  2E10      1507          move.l    (A0),D7
00001192  2047      1508          move.l    D7,A0
00001194  20AE FFE4 1509          move.l    -28(A6),(A0)
00001198  5284      1510          addq.l    #1,D4
                    1511   vsscanf_38:
0000119A  6000 03F6 1512          bra       vsscanf_139
                    1513   vsscanf_36:
0000119E  0C83 0000 1514          cmp.l     #115,D3
000011A2  0073      
000011A4  6600 00AC 1515          bne       vsscanf_40
000011A8  486E FFE4 1516          pea       -28(A6)
000011AC  2F05      1517          move.l    D5,-(A7)
000011AE  6100 FC2A 1518          bsr       @vsscanf_scanspace
000011B2  504F      1519          addq.w    #8,A7
000011B4  2400      1520          move.l    D0,D2
000011B6  4A86      1521          tst.l     D6
000011B8  660A      1522          bne.s     vsscanf_42
000011BA  206E 0010 1523          move.l    16(A6),A0
000011BE  58AE 0010 1524          addq.l    #4,16(A6)
000011C2  2E10      1525          move.l    (A0),D7
                    1526   vsscanf_42:
000011C4  52AE FFE4 1527          addq.l    #1,-28(A6)
                    1528   vsscanf_44:
000011C8  200A      1529          move.l    A2,D0
000011CA  534A      1530          subq.w    #1,A2
000011CC  4A80      1531          tst.l     D0
000011CE  6700 0038 1532          beq       vsscanf_46
000011D2  2042      1533          move.l    D2,A0
000011D4  43F9 0000 1534          lea       __ctype,A1
000011D8  21DC      
000011DA  1030 9801 1535          move.b    1(A0,A1.L),D0
000011DE  C03C 0010 1536          and.b     #16,D0
000011E2  6624      1537          bne.s     vsscanf_46
000011E4  0C82 FFFF 1538          cmp.l     #-1,D2
000011E8  FFFF      
000011EA  671C      1539          beq.s     vsscanf_46
000011EC  387C 0001 1540          move.w    #1,A4
000011F0  4A86      1541          tst.l     D6
000011F2  6606      1542          bne.s     vsscanf_47
000011F4  2047      1543          move.l    D7,A0
000011F6  5287      1544          addq.l    #1,D7
000011F8  1082      1545          move.b    D2,(A0)
                    1546   vsscanf_47:
000011FA  2F05      1547          move.l    D5,-(A7)
000011FC  4E93      1548          jsr       (A3)
000011FE  584F      1549          addq.w    #4,A7
00001200  2400      1550          move.l    D0,D2
00001202  52AE FFE4 1551          addq.l    #1,-28(A6)
00001206  60C0      1552          bra       vsscanf_44
                    1553   vsscanf_46:
00001208  4A86      1554          tst.l     D6
0000120A  660A      1555          bne.s     vsscanf_51
0000120C  2047      1556          move.l    D7,A0
0000120E  4210      1557          clr.b     (A0)
00001210  200C      1558          move.l    A4,D0
00001212  6702      1559          beq.s     vsscanf_51
00001214  5284      1560          addq.l    #1,D4
                    1561   vsscanf_51:
00001216  0C82 FFFF 1562          cmp.l     #-1,D2
0000121A  FFFF      
0000121C  6708      1563          beq.s     vsscanf_55
0000121E  4A86      1564          tst.l     D6
00001220  661E      1565          bne.s     vsscanf_53
00001222  200C      1566          move.l    A4,D0
00001224  661A      1567          bne.s     vsscanf_53
                    1568   vsscanf_55:
00001226  4A84      1569          tst.l     D4
00001228  6704      1570          beq.s     vsscanf_56
0000122A  2004      1571          move.l    D4,D0
0000122C  600E      1572          bra.s     vsscanf_59
                    1573   vsscanf_56:
0000122E  0C82 FFFF 1574          cmp.l     #-1,D2
00001232  FFFF      
00001234  6604      1575          bne.s     vsscanf_58
00001236  70FF      1576          moveq     #-1,D0
00001238  6002      1577          bra.s     vsscanf_59
                    1578   vsscanf_58:
0000123A  2004      1579          move.l    D4,D0
                    1580   vsscanf_59:
0000123C  6000 035A 1581          bra       vsscanf_15
                    1582   vsscanf_53:
00001240  53AE FFE4 1583          subq.l    #1,-28(A6)
00001244  2F02      1584          move.l    D2,-(A7)
00001246  2F05      1585          move.l    D5,-(A7)
00001248  6100 FB2E 1586          bsr       @vsscanf_scanputback
0000124C  504F      1587          addq.w    #8,A7
0000124E  6000 0342 1588          bra       vsscanf_139
                    1589   vsscanf_40:
00001252  0C83 0000 1590          cmp.l     #99,D3
00001256  0063      
00001258  6600 008E 1591          bne       vsscanf_60
0000125C  4A86      1592          tst.l     D6
0000125E  660A      1593          bne.s     vsscanf_62
00001260  206E 0010 1594          move.l    16(A6),A0
00001264  58AE 0010 1595          addq.l    #4,16(A6)
00001268  2E10      1596          move.l    (A0),D7
                    1597   vsscanf_62:
0000126A  2F05      1598          move.l    D5,-(A7)
0000126C  4E93      1599          jsr       (A3)
0000126E  584F      1600          addq.w    #4,A7
00001270  2400      1601          move.l    D0,D2
00001272  52AE FFE4 1602          addq.l    #1,-28(A6)
00001276  200A      1603          move.l    A2,D0
00001278  0C80 0000 1604          cmp.l     #32767,D0
0000127C  7FFF      
0000127E  6604      1605          bne.s     vsscanf_64
00001280  347C 0001 1606          move.w    #1,A2
                    1607   vsscanf_64:
00001284  0C82 FFFF 1608          cmp.l     #-1,D2
00001288  FFFF      
0000128A  6606      1609          bne.s     vsscanf_66
0000128C  4A86      1610          tst.l     D6
0000128E  6602      1611          bne.s     vsscanf_66
00001290  5384      1612          subq.l    #1,D4
                    1613   vsscanf_66:
00001292  200A      1614          move.l    A2,D0
00001294  534A      1615          subq.w    #1,A2
00001296  4A80      1616          tst.l     D0
00001298  6720      1617          beq.s     vsscanf_70
0000129A  0C82 FFFF 1618          cmp.l     #-1,D2
0000129E  FFFF      
000012A0  6718      1619          beq.s     vsscanf_70
000012A2  4A86      1620          tst.l     D6
000012A4  6606      1621          bne.s     vsscanf_71
000012A6  2047      1622          move.l    D7,A0
000012A8  5287      1623          addq.l    #1,D7
000012AA  1082      1624          move.b    D2,(A0)
                    1625   vsscanf_71:
000012AC  2F05      1626          move.l    D5,-(A7)
000012AE  4E93      1627          jsr       (A3)
000012B0  584F      1628          addq.w    #4,A7
000012B2  2400      1629          move.l    D0,D2
000012B4  52AE FFE4 1630          addq.l    #1,-28(A6)
000012B8  60D8      1631          bra       vsscanf_66
                    1632   vsscanf_70:
000012BA  0C82 FFFF 1633          cmp.l     #-1,D2
000012BE  FFFF      
000012C0  660E      1634          bne.s     vsscanf_73
000012C2  4A84      1635          tst.l     D4
000012C4  6704      1636          beq.s     vsscanf_75
000012C6  2004      1637          move.l    D4,D0
000012C8  6002      1638          bra.s     vsscanf_76
                    1639   vsscanf_75:
000012CA  70FF      1640          moveq     #-1,D0
                    1641   vsscanf_76:
000012CC  6000 02CA 1642          bra       vsscanf_15
                    1643   vsscanf_73:
000012D0  4A86      1644          tst.l     D6
000012D2  6602      1645          bne.s     vsscanf_77
000012D4  5284      1646          addq.l    #1,D4
                    1647   vsscanf_77:
000012D6  53AE FFE4 1648          subq.l    #1,-28(A6)
000012DA  2F02      1649          move.l    D2,-(A7)
000012DC  2F05      1650          move.l    D5,-(A7)
000012DE  6100 FA98 1651          bsr       @vsscanf_scanputback
000012E2  504F      1652          addq.w    #8,A7
000012E4  6000 02AC 1653          bra       vsscanf_139
                    1654   vsscanf_60:
000012E8  0C83 0000 1655          cmp.l     #105,D3
000012EC  0069      
000012EE  6600 0060 1656          bne       vsscanf_82
000012F2  486E FFE4 1657          pea       -28(A6)
000012F6  2F05      1658          move.l    D5,-(A7)
000012F8  6100 FAE0 1659          bsr       @vsscanf_scanspace
000012FC  504F      1660          addq.w    #8,A7
000012FE  2400      1661          move.l    D0,D2
00001300  0C82 0000 1662          cmp.l     #48,D2
00001304  0030      
00001306  6600 0038 1663          bne       vsscanf_81
0000130A  387C 0001 1664          move.w    #1,A4
0000130E  2F05      1665          move.l    D5,-(A7)
00001310  4E93      1666          jsr       (A3)
00001312  584F      1667          addq.w    #4,A7
00001314  2400      1668          move.l    D0,D2
00001316  2F02      1669          move.l    D2,-(A7)
00001318  6100 0AE0 1670          bsr       _tolower
0000131C  584F      1671          addq.w    #4,A7
0000131E  0C80 0000 1672          cmp.l     #120,D0
00001322  0078      
00001324  6604      1673          bne.s     vsscanf_83
00001326  7678      1674          moveq     #120,D3
00001328  6010      1675          bra.s     vsscanf_84
                    1676   vsscanf_83:
0000132A  53AE FFE4 1677          subq.l    #1,-28(A6)
0000132E  2F02      1678          move.l    D2,-(A7)
00001330  2F05      1679          move.l    D5,-(A7)
00001332  6100 FA44 1680          bsr       @vsscanf_scanputback
00001336  504F      1681          addq.w    #8,A7
00001338  766F      1682          moveq     #111,D3
                    1683   vsscanf_84:
0000133A  52AE FFE4 1684          addq.l    #1,-28(A6)
0000133E  6010      1685          bra.s     vsscanf_82
                    1686   vsscanf_81:
00001340  53AE FFE4 1687          subq.l    #1,-28(A6)
00001344  2F02      1688          move.l    D2,-(A7)
00001346  2F05      1689          move.l    D5,-(A7)
00001348  6100 FA2E 1690          bsr       @vsscanf_scanputback
0000134C  504F      1691          addq.w    #8,A7
0000134E  7664      1692          moveq     #100,D3
                    1693   vsscanf_82:
00001350  0C83 0000 1694          cmp.l     #100,D3
00001354  0064      
00001356  671A      1695          beq.s     vsscanf_87
00001358  0C83 0000 1696          cmp.l     #117,D3
0000135C  0075      
0000135E  6712      1697          beq.s     vsscanf_87
00001360  0C83 0000 1698          cmp.l     #120,D3
00001364  0078      
00001366  670A      1699          beq.s     vsscanf_87
00001368  0C83 0000 1700          cmp.l     #111,D3
0000136C  006F      
0000136E  6600 01A4 1701          bne       vsscanf_85
                    1702   vsscanf_87:
00001372  486E FFE4 1703          pea       -28(A6)
00001376  2F05      1704          move.l    D5,-(A7)
00001378  6100 FA60 1705          bsr       @vsscanf_scanspace
0000137C  504F      1706          addq.w    #8,A7
0000137E  2400      1707          move.l    D0,D2
00001380  2D7C 0000 1708          move.l    #10,-4(A6)
00001384  000A FFFC 
00001388  0C83 0000 1709          cmp.l     #120,D3
0000138C  0078      
0000138E  6608      1710          bne.s     vsscanf_88
00001390  2D7C 0000 1711          move.l    #16,-4(A6)
00001394  0010 FFFC 
                    1712   vsscanf_88:
00001398  0C83 0000 1713          cmp.l     #111,D3
0000139C  006F      
0000139E  6608      1714          bne.s     vsscanf_90
000013A0  2D7C 0000 1715          move.l    #8,-4(A6)
000013A4  0008 FFFC 
                    1716   vsscanf_90:
000013A8  4A86      1717          tst.l     D6
000013AA  660A      1718          bne.s     vsscanf_92
000013AC  206E 0010 1719          move.l    16(A6),A0
000013B0  58AE 0010 1720          addq.l    #4,16(A6)
000013B4  2E10      1721          move.l    (A0),D7
                    1722   vsscanf_92:
000013B6  42AE FFE0 1723          clr.l     -32(A6)
000013BA  52AE FFE4 1724          addq.l    #1,-28(A6)
000013BE  0C83 0000 1725          cmp.l     #117,D3
000013C2  0075      
000013C4  6720      1726          beq.s     vsscanf_94
000013C6  0C82 0000 1727          cmp.l     #45,D2
000013CA  002D      
000013CC  6618      1728          bne.s     vsscanf_94
000013CE  2F05      1729          move.l    D5,-(A7)
000013D0  4E93      1730          jsr       (A3)
000013D2  584F      1731          addq.w    #4,A7
000013D4  2400      1732          move.l    D0,D2
000013D6  52AE FFE4 1733          addq.l    #1,-28(A6)
000013DA  2D7C 0000 1734          move.l    #1,-32(A6)
000013DE  0001 FFE0 
000013E2  387C 0001 1735          move.w    #1,A4
                    1736   vsscanf_94:
000013E6  3A7C 0000 1737          move.w    #0,A5
000013EA  0C82 FFFF 1738          cmp.l     #-1,D2
000013EE  FFFF      
000013F0  660E      1739          bne.s     vsscanf_96
000013F2  4A84      1740          tst.l     D4
000013F4  6704      1741          beq.s     vsscanf_98
000013F6  2004      1742          move.l    D4,D0
000013F8  6002      1743          bra.s     vsscanf_99
                    1744   vsscanf_98:
000013FA  70FF      1745          moveq     #-1,D0
                    1746   vsscanf_99:
000013FC  6000 019A 1747          bra       vsscanf_15
                    1748   vsscanf_96:
00001400  200A      1749          move.l    A2,D0
00001402  534A      1750          subq.w    #1,A2
00001404  4A80      1751          tst.l     D0
00001406  6700 0090 1752          beq       vsscanf_102
0000140A  0C83 0000 1753          cmp.l     #120,D3
0000140E  0078      
00001410  6620      1754          bne.s     vsscanf_104
00001412  2F02      1755          move.l    D2,-(A7)
00001414  6100 0A26 1756          bsr       _toupper
00001418  584F      1757          addq.w    #4,A7
0000141A  0C80 0000 1758          cmp.l     #65,D0
0000141E  0041      
00001420  6D10      1759          blt.s     vsscanf_104
00001422  2F02      1760          move.l    D2,-(A7)
00001424  6100 0A16 1761          bsr       _toupper
00001428  584F      1762          addq.w    #4,A7
0000142A  0C80 0000 1763          cmp.l     #70,D0
0000142E  0046      
00001430  6F14      1764          ble.s     vsscanf_103
                    1765   vsscanf_104:
00001432  2042      1766          move.l    D2,A0
00001434  43F9 0000 1767          lea       __ctype,A1
00001438  21DC      
0000143A  1030 9801 1768          move.b    1(A0,A1.L),D0
0000143E  C03C 0004 1769          and.b     #4,D0
00001442  6700 0054 1770          beq       vsscanf_102
                    1771   vsscanf_103:
00001446  2042      1772          move.l    D2,A0
00001448  43F9 0000 1773          lea       __ctype,A1
0000144C  21DC      
0000144E  1030 9801 1774          move.b    1(A0,A1.L),D0
00001452  C03C 0004 1775          and.b     #4,D0
00001456  6614      1776          bne.s     vsscanf_105
00001458  70F9      1777          moveq     #-7,D0
0000145A  2F00      1778          move.l    D0,-(A7)
0000145C  2F02      1779          move.l    D2,-(A7)
0000145E  6100 09DC 1780          bsr       _toupper
00001462  584F      1781          addq.w    #4,A7
00001464  2200      1782          move.l    D0,D1
00001466  201F      1783          move.l    (A7)+,D0
00001468  D081      1784          add.l     D1,D0
0000146A  2400      1785          move.l    D0,D2
                    1786   vsscanf_105:
0000146C  2F0D      1787          move.l    A5,-(A7)
0000146E  2F2E FFFC 1788          move.l    -4(A6),-(A7)
00001472  6100 0884 1789          bsr       LMUL
00001476  2017      1790          move.l    (A7),D0
00001478  504F      1791          addq.w    #8,A7
0000147A  D082      1792          add.l     D2,D0
0000147C  0480 0000 1793          sub.l     #48,D0
00001480  0030      
00001482  2A40      1794          move.l    D0,A5
00001484  2F05      1795          move.l    D5,-(A7)
00001486  4E93      1796          jsr       (A3)
00001488  584F      1797          addq.w    #4,A7
0000148A  2400      1798          move.l    D0,D2
0000148C  52AE FFE4 1799          addq.l    #1,-28(A6)
00001490  387C 0001 1800          move.w    #1,A4
00001494  6000 FF6A 1801          bra       vsscanf_96
                    1802   vsscanf_102:
00001498  0C82 FFFF 1803          cmp.l     #-1,D2
0000149C  FFFF      
0000149E  671A      1804          beq.s     vsscanf_107
000014A0  2F02      1805          move.l    D2,-(A7)
000014A2  2F05      1806          move.l    D5,-(A7)
000014A4  6100 F8D2 1807          bsr       @vsscanf_scanputback
000014A8  504F      1808          addq.w    #8,A7
000014AA  53AE FFE4 1809          subq.l    #1,-28(A6)
000014AE  200C      1810          move.l    A4,D0
000014B0  6606      1811          bne.s     vsscanf_109
000014B2  2004      1812          move.l    D4,D0
000014B4  6000 00E2 1813          bra       vsscanf_15
                    1814   vsscanf_109:
000014B8  6012      1815          bra.s     vsscanf_111
                    1816   vsscanf_107:
000014BA  200C      1817          move.l    A4,D0
000014BC  660E      1818          bne.s     vsscanf_111
000014BE  4A84      1819          tst.l     D4
000014C0  6704      1820          beq.s     vsscanf_113
000014C2  2004      1821          move.l    D4,D0
000014C4  6002      1822          bra.s     vsscanf_114
                    1823   vsscanf_113:
000014C6  70FF      1824          moveq     #-1,D0
                    1825   vsscanf_114:
000014C8  6000 00CE 1826          bra       vsscanf_15
                    1827   vsscanf_111:
000014CC  4AAE FFE0 1828          tst.l     -32(A6)
000014D0  6706      1829          beq.s     vsscanf_115
000014D2  200D      1830          move.l    A5,D0
000014D4  4480      1831          neg.l     D0
000014D6  2A40      1832          move.l    D0,A5
                    1833   vsscanf_115:
000014D8  4A86      1834          tst.l     D6
000014DA  661E      1835          bne.s     vsscanf_117
000014DC  4AAE FFE8 1836          tst.l     -24(A6)
000014E0  6706      1837          beq.s     vsscanf_119
000014E2  2047      1838          move.l    D7,A0
000014E4  208D      1839          move.l    A5,(A0)
000014E6  6010      1840          bra.s     vsscanf_122
                    1841   vsscanf_119:
000014E8  4AAE FFEC 1842          tst.l     -20(A6)
000014EC  6706      1843          beq.s     vsscanf_121
000014EE  2047      1844          move.l    D7,A0
000014F0  308D      1845          move.w    A5,(A0)
000014F2  6004      1846          bra.s     vsscanf_122
                    1847   vsscanf_121:
000014F4  2047      1848          move.l    D7,A0
000014F6  208D      1849          move.l    A5,(A0)
                    1850   vsscanf_122:
000014F8  5284      1851          addq.l    #1,D4
                    1852   vsscanf_117:
000014FA  0C82 FFFF 1853          cmp.l     #-1,D2
000014FE  FFFF      
00001500  660E      1854          bne.s     vsscanf_123
00001502  4A84      1855          tst.l     D4
00001504  6704      1856          beq.s     vsscanf_125
00001506  2004      1857          move.l    D4,D0
00001508  6002      1858          bra.s     vsscanf_126
                    1859   vsscanf_125:
0000150A  70FF      1860          moveq     #-1,D0
                    1861   vsscanf_126:
0000150C  6000 008A 1862          bra       vsscanf_15
                    1863   vsscanf_123:
00001510  6000 0080 1864          bra       vsscanf_139
                    1865   vsscanf_85:
00001514  0C83 0000 1866          cmp.l     #37,D3
00001518  0025      
0000151A  6600 0040 1867          bne       vsscanf_127
0000151E  2F05      1868          move.l    D5,-(A7)
00001520  4E93      1869          jsr       (A3)
00001522  584F      1870          addq.w    #4,A7
00001524  2400      1871          move.l    D0,D2
00001526  0C82 FFFF 1872          cmp.l     #-1,D2
0000152A  FFFF      
0000152C  660E      1873          bne.s     vsscanf_129
0000152E  4A84      1874          tst.l     D4
00001530  6704      1875          beq.s     vsscanf_131
00001532  2004      1876          move.l    D4,D0
00001534  6002      1877          bra.s     vsscanf_132
                    1878   vsscanf_131:
00001536  70FF      1879          moveq     #-1,D0
                    1880   vsscanf_132:
00001538  6000 005E 1881          bra       vsscanf_15
                    1882   vsscanf_129:
0000153C  52AE FFE4 1883          addq.l    #1,-28(A6)
00001540  B483      1884          cmp.l     D3,D2
00001542  6714      1885          beq.s     vsscanf_133
00001544  2F02      1886          move.l    D2,-(A7)
00001546  2F05      1887          move.l    D5,-(A7)
00001548  6100 F82E 1888          bsr       @vsscanf_scanputback
0000154C  504F      1889          addq.w    #8,A7
0000154E  53AE FFE4 1890          subq.l    #1,-28(A6)
00001552  2004      1891          move.l    D4,D0
00001554  6000 0042 1892          bra       vsscanf_15
                    1893   vsscanf_133:
00001558  6000 0038 1894          bra       vsscanf_139
                    1895   vsscanf_127:
0000155C  2F05      1896          move.l    D5,-(A7)
0000155E  4E93      1897          jsr       (A3)
00001560  584F      1898          addq.w    #4,A7
00001562  2400      1899          move.l    D0,D2
00001564  52AE FFE4 1900          addq.l    #1,-28(A6)
00001568  0C82 FFFF 1901          cmp.l     #-1,D2
0000156C  FFFF      
0000156E  660C      1902          bne.s     vsscanf_135
00001570  4A84      1903          tst.l     D4
00001572  6704      1904          beq.s     vsscanf_137
00001574  2004      1905          move.l    D4,D0
00001576  6002      1906          bra.s     vsscanf_138
                    1907   vsscanf_137:
00001578  70FF      1908          moveq     #-1,D0
                    1909   vsscanf_138:
0000157A  601C      1910          bra.s     vsscanf_15
                    1911   vsscanf_135:
0000157C  B483      1912          cmp.l     D3,D2
0000157E  6712      1913          beq.s     vsscanf_139
00001580  2F02      1914          move.l    D2,-(A7)
00001582  2F05      1915          move.l    D5,-(A7)
00001584  6100 F7F2 1916          bsr       @vsscanf_scanputback
00001588  504F      1917          addq.w    #8,A7
0000158A  53AE FFE4 1918          subq.l    #1,-28(A6)
0000158E  2004      1919          move.l    D4,D0
00001590  6006      1920          bra.s     vsscanf_15
                    1921   vsscanf_139:
00001592  6000 FA44 1922          bra       vsscanf_3
                    1923   vsscanf_5:
00001596  2004      1924          move.l    D4,D0
                    1925   vsscanf_15:
00001598  4CDF 3CFC 1926          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
0000159C  4E5E      1927          unlk      A6
0000159E  4E75      1928          rts
                    1929   _printf:
000015A0  4E56 FFFC 1930          link      A6,#-4
000015A4  48E7 2000 1931          movem.l   D2,-(A7)
000015A8  41EE 0008 1932          lea       8(A6),A0
000015AC  5848      1933          addq.w    #4,A0
000015AE  2408      1934          move.l    A0,D2
000015B0  2F02      1935          move.l    D2,-(A7)
000015B2  2F2E 0008 1936          move.l    8(A6),-(A7)
000015B6  42A7      1937          clr.l     -(A7)
000015B8  6100 00CA 1938          bsr       _vsprintf
000015BC  DEFC 000C 1939          add.w     #12,A7
000015C0  2D40 FFFC 1940          move.l    D0,-4(A6)
000015C4  4282      1941          clr.l     D2
000015C6  202E FFFC 1942          move.l    -4(A6),D0
000015CA  4CDF 0004 1943          movem.l   (A7)+,D2
000015CE  4E5E      1944          unlk      A6
000015D0  4E75      1945          rts
                    1946   @vsprintf_copy:
000015D2  4E56 0000 1947          link      A6,#0
000015D6  206E 0008 1948          move.l    8(A6),A0
000015DA  4A90      1949          tst.l     (A0)
000015DC  6710      1950          beq.s     @vsprintf_copy_1
000015DE  202E 000C 1951          move.l    12(A6),D0
000015E2  206E 0008 1952          move.l    8(A6),A0
000015E6  2250      1953          move.l    (A0),A1
000015E8  5290      1954          addq.l    #1,(A0)
000015EA  1280      1955          move.b    D0,(A1)
000015EC  600A      1956          bra.s     @vsprintf_copy_2
                    1957   @vsprintf_copy_1:
000015EE  2F2E 000C 1958          move.l    12(A6),-(A7)
000015F2  6100 09F2 1959          bsr       _putch
000015F6  584F      1960          addq.w    #4,A7
                    1961   @vsprintf_copy_2:
000015F8  4E5E      1962          unlk      A6
000015FA  4E75      1963          rts
                    1964   @vsprintf_getval:
000015FC  4E56 0000 1965          link      A6,#0
00001600  48E7 3000 1966          movem.l   D2/D3,-(A7)
00001604  242E 0008 1967          move.l    8(A6),D2
00001608  4283      1968          clr.l     D3
0000160A  2042      1969          move.l    D2,A0
0000160C  2050      1970          move.l    (A0),A0
0000160E  1010      1971          move.b    (A0),D0
00001610  4880      1972          ext.w     D0
00001612  48C0      1973          ext.l     D0
00001614  0C80 0000 1974          cmp.l     #42,D0
00001618  002A      
0000161A  6612      1975          bne.s     @vsprintf_getval_1
0000161C  206E 000C 1976          move.l    12(A6),A0
00001620  2250      1977          move.l    (A0),A1
00001622  5890      1978          addq.l    #4,(A0)
00001624  2611      1979          move.l    (A1),D3
00001626  2042      1980          move.l    D2,A0
00001628  5290      1981          addq.l    #1,(A0)
0000162A  6000 004E 1982          bra       @vsprintf_getval_5
                    1983   @vsprintf_getval_1:
0000162E  2042      1984          move.l    D2,A0
00001630  2050      1985          move.l    (A0),A0
00001632  1010      1986          move.b    (A0),D0
00001634  4880      1987          ext.w     D0
00001636  48C0      1988          ext.l     D0
00001638  0C80 0000 1989          cmp.l     #48,D0
0000163C  0030      
0000163E  6D00 003A 1990          blt       @vsprintf_getval_5
00001642  2042      1991          move.l    D2,A0
00001644  2050      1992          move.l    (A0),A0
00001646  1010      1993          move.b    (A0),D0
00001648  4880      1994          ext.w     D0
0000164A  48C0      1995          ext.l     D0
0000164C  0C80 0000 1996          cmp.l     #57,D0
00001650  0039      
00001652  6E26      1997          bgt.s     @vsprintf_getval_5
00001654  2F03      1998          move.l    D3,-(A7)
00001656  4878 000A 1999          pea       10
0000165A  6100 069C 2000          bsr       LMUL
0000165E  2017      2001          move.l    (A7),D0
00001660  504F      2002          addq.w    #8,A7
00001662  2042      2003          move.l    D2,A0
00001664  2250      2004          move.l    (A0),A1
00001666  5290      2005          addq.l    #1,(A0)
00001668  1211      2006          move.b    (A1),D1
0000166A  4881      2007          ext.w     D1
0000166C  48C1      2008          ext.l     D1
0000166E  D081      2009          add.l     D1,D0
00001670  0480 0000 2010          sub.l     #48,D0
00001674  0030      
00001676  2600      2011          move.l    D0,D3
00001678  60B4      2012          bra       @vsprintf_getval_1
                    2013   @vsprintf_getval_5:
0000167A  2003      2014          move.l    D3,D0
0000167C  4CDF 000C 2015          movem.l   (A7)+,D2/D3
00001680  4E5E      2016          unlk      A6
00001682  4E75      2017          rts
                    2018   _vsprintf:
00001684  4E56 FFCC 2019          link      A6,#-52
00001688  48E7 3F3C 2020          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
0000168C  45EE 0008 2021          lea       8(A6),A2
00001690  47F8 15D2 2022          lea       @vsprintf_copy,A3
00001694  49F9 0000 2023          lea       _ultoa,A4
00001698  1F72      
0000169A  4286      2024          clr.l     D6
                    2025   vsprintf_1:
0000169C  206E 000C 2026          move.l    12(A6),A0
000016A0  4A10      2027          tst.b     (A0)
000016A2  6700 0624 2028          beq       vsprintf_3
000016A6  206E 000C 2029          move.l    12(A6),A0
000016AA  1010      2030          move.b    (A0),D0
000016AC  4880      2031          ext.w     D0
000016AE  48C0      2032          ext.l     D0
000016B0  0C80 0000 2033          cmp.l     #37,D0
000016B4  0025      
000016B6  671C      2034          beq.s     vsprintf_4
000016B8  206E 000C 2035          move.l    12(A6),A0
000016BC  52AE 000C 2036          addq.l    #1,12(A6)
000016C0  1210      2037          move.b    (A0),D1
000016C2  4881      2038          ext.w     D1
000016C4  48C1      2039          ext.l     D1
000016C6  2F01      2040          move.l    D1,-(A7)
000016C8  2F0A      2041          move.l    A2,-(A7)
000016CA  4E93      2042          jsr       (A3)
000016CC  504F      2043          addq.w    #8,A7
000016CE  5286      2044          addq.l    #1,D6
000016D0  6000 05F2 2045          bra       vsprintf_2
                    2046   vsprintf_4:
000016D4  52AE 000C 2047          addq.l    #1,12(A6)
000016D8  422E FFD3 2048          clr.b     -45(A6)
000016DC  422E FFD2 2049          clr.b     -46(A6)
000016E0  422E FFD0 2050          clr.b     -48(A6)
000016E4  422E FFCF 2051          clr.b     -49(A6)
000016E8  422E FFCE 2052          clr.b     -50(A6)
000016EC  422E FFCD 2053          clr.b     -51(A6)
000016F0  42AE FFFC 2054          clr.l     -4(A6)
000016F4  7AFF      2055          moveq     #-1,D5
000016F6  41EE FFDC 2056          lea       -36(A6),A0
000016FA  2608      2057          move.l    A0,D3
000016FC  2408      2058          move.l    A0,D2
                    2059   vsprintf_6:
000016FE  206E 000C 2060          move.l    12(A6),A0
00001702  1010      2061          move.b    (A0),D0
00001704  4880      2062          ext.w     D0
00001706  48C0      2063          ext.l     D0
00001708  0C80 0000 2064          cmp.l     #43,D0
0000170C  002B      
0000170E  6730      2065          beq.s     vsprintf_12
00001710  6E18      2066          bgt.s     vsprintf_15
00001712  0C80 0000 2067          cmp.l     #35,D0
00001716  0023      
00001718  6700 003E 2068          beq       vsprintf_14
0000171C  6E00 0046 2069          bgt       vsprintf_9
00001720  0C80 0000 2070          cmp.l     #32,D0
00001724  0020      
00001726  6724      2071          beq.s     vsprintf_13
00001728  603A      2072          bra.s     vsprintf_9
                    2073   vsprintf_15:
0000172A  0C80 0000 2074          cmp.l     #45,D0
0000172E  002D      
00001730  6702      2075          beq.s     vsprintf_11
00001732  6030      2076          bra.s     vsprintf_9
                    2077   vsprintf_11:
00001734  1D7C 0001 2078          move.b    #1,-51(A6)
00001738  FFCD      
0000173A  52AE 000C 2079          addq.l    #1,12(A6)
0000173E  6026      2080          bra.s     vsprintf_7
                    2081   vsprintf_12:
00001740  1D7C 0001 2082          move.b    #1,-50(A6)
00001744  FFCE      
00001746  52AE 000C 2083          addq.l    #1,12(A6)
0000174A  601A      2084          bra.s     vsprintf_7
                    2085   vsprintf_13:
0000174C  1D7C 0001 2086          move.b    #1,-49(A6)
00001750  FFCF      
00001752  52AE 000C 2087          addq.l    #1,12(A6)
00001756  600E      2088          bra.s     vsprintf_7
                    2089   vsprintf_14:
00001758  1D7C 0001 2090          move.b    #1,-48(A6)
0000175C  FFD0      
0000175E  52AE 000C 2091          addq.l    #1,12(A6)
00001762  6002      2092          bra.s     vsprintf_7
                    2093   vsprintf_9:
00001764  6002      2094          bra.s     vsprintf_8
                    2095   vsprintf_7:
00001766  6096      2096          bra       vsprintf_6
                    2097   vsprintf_8:
00001768  206E 000C 2098          move.l    12(A6),A0
0000176C  1010      2099          move.b    (A0),D0
0000176E  4880      2100          ext.w     D0
00001770  48C0      2101          ext.l     D0
00001772  0C80 0000 2102          cmp.l     #48,D0
00001776  0030      
00001778  660A      2103          bne.s     vsprintf_16
0000177A  52AE 000C 2104          addq.l    #1,12(A6)
0000177E  1D7C 0001 2105          move.b    #1,-46(A6)
00001782  FFD2      
                    2106   vsprintf_16:
00001784  486E 0010 2107          pea       16(A6)
00001788  486E 000C 2108          pea       12(A6)
0000178C  6100 FE6E 2109          bsr       @vsprintf_getval
00001790  504F      2110          addq.w    #8,A7
00001792  2A40      2111          move.l    D0,A5
00001794  206E 000C 2112          move.l    12(A6),A0
00001798  1010      2113          move.b    (A0),D0
0000179A  4880      2114          ext.w     D0
0000179C  48C0      2115          ext.l     D0
0000179E  0C80 0000 2116          cmp.l     #46,D0
000017A2  002E      
000017A4  6614      2117          bne.s     vsprintf_18
000017A6  52AE 000C 2118          addq.l    #1,12(A6)
000017AA  486E 0010 2119          pea       16(A6)
000017AE  486E 000C 2120          pea       12(A6)
000017B2  6100 FE48 2121          bsr       @vsprintf_getval
000017B6  504F      2122          addq.w    #8,A7
000017B8  2A00      2123          move.l    D0,D5
                    2124   vsprintf_18:
000017BA  206E 000C 2125          move.l    12(A6),A0
000017BE  1010      2126          move.b    (A0),D0
000017C0  4880      2127          ext.w     D0
000017C2  48C0      2128          ext.l     D0
000017C4  0C80 0000 2129          cmp.l     #108,D0
000017C8  006C      
000017CA  660A      2130          bne.s     vsprintf_20
000017CC  52AE 000C 2131          addq.l    #1,12(A6)
000017D0  1D7C 0001 2132          move.b    #1,-45(A6)
000017D4  FFD3      
                    2133   vsprintf_20:
000017D6  206E 000C 2134          move.l    12(A6),A0
000017DA  1010      2135          move.b    (A0),D0
000017DC  4880      2136          ext.w     D0
000017DE  48C0      2137          ext.l     D0
000017E0  0C80 0000 2138          cmp.l     #111,D0
000017E4  006F      
000017E6  6700 00D4 2139          beq       vsprintf_27
000017EA  6E34      2140          bgt.s     vsprintf_33
000017EC  0C80 0000 2141          cmp.l     #100,D0
000017F0  0064      
000017F2  6700 0054 2142          beq       vsprintf_24
000017F6  6E1C      2143          bgt.s     vsprintf_34
000017F8  0C80 0000 2144          cmp.l     #99,D0
000017FC  0063      
000017FE  6700 012C 2145          beq       vsprintf_30
00001802  6E00 016A 2146          bgt       vsprintf_22
00001806  0C80 0000 2147          cmp.l     #88,D0
0000180A  0058      
0000180C  6700 00E6 2148          beq       vsprintf_28
00001810  6000 015C 2149          bra       vsprintf_22
                    2150   vsprintf_34:
00001814  0C80 0000 2151          cmp.l     #105,D0
00001818  0069      
0000181A  672C      2152          beq.s     vsprintf_24
0000181C  6000 0150 2153          bra       vsprintf_22
                    2154   vsprintf_33:
00001820  0C80 0000 2155          cmp.l     #117,D0
00001824  0075      
00001826  6700 005C 2156          beq       vsprintf_26
0000182A  6E0E      2157          bgt.s     vsprintf_35
0000182C  0C80 0000 2158          cmp.l     #115,D0
00001830  0073      
00001832  6700 011C 2159          beq       vsprintf_31
00001836  6000 0136 2160          bra       vsprintf_22
                    2161   vsprintf_35:
0000183A  0C80 0000 2162          cmp.l     #120,D0
0000183E  0078      
00001840  6700 00B2 2163          beq       vsprintf_28
00001844  6000 0128 2164          bra       vsprintf_22
                    2165   vsprintf_24:
00001848  4A2E FFD3 2166          tst.b     -45(A6)
0000184C  671A      2167          beq.s     vsprintf_36
0000184E  4878 000A 2168          pea       10
00001852  2F03      2169          move.l    D3,-(A7)
00001854  206E 0010 2170          move.l    16(A6),A0
00001858  58AE 0010 2171          addq.l    #4,16(A6)
0000185C  2F10      2172          move.l    (A0),-(A7)
0000185E  6100 068E 2173          bsr       _ltoa
00001862  DEFC 000C 2174          add.w     #12,A7
00001866  6018      2175          bra.s     vsprintf_37
                    2176   vsprintf_36:
00001868  4878 000A 2177          pea       10
0000186C  2F03      2178          move.l    D3,-(A7)
0000186E  206E 0010 2179          move.l    16(A6),A0
00001872  58AE 0010 2180          addq.l    #4,16(A6)
00001876  2F10      2181          move.l    (A0),-(A7)
00001878  6100 0674 2182          bsr       _ltoa
0000187C  DEFC 000C 2183          add.w     #12,A7
                    2184   vsprintf_37:
00001880  6000 00FA 2185          bra       vsprintf_23
                    2186   vsprintf_26:
00001884  4A2E FFD3 2187          tst.b     -45(A6)
00001888  6718      2188          beq.s     vsprintf_38
0000188A  4878 000A 2189          pea       10
0000188E  2F03      2190          move.l    D3,-(A7)
00001890  206E 0010 2191          move.l    16(A6),A0
00001894  58AE 0010 2192          addq.l    #4,16(A6)
00001898  2F10      2193          move.l    (A0),-(A7)
0000189A  4E94      2194          jsr       (A4)
0000189C  DEFC 000C 2195          add.w     #12,A7
000018A0  6016      2196          bra.s     vsprintf_39
                    2197   vsprintf_38:
000018A2  4878 000A 2198          pea       10
000018A6  2F03      2199          move.l    D3,-(A7)
000018A8  206E 0010 2200          move.l    16(A6),A0
000018AC  58AE 0010 2201          addq.l    #4,16(A6)
000018B0  2F10      2202          move.l    (A0),-(A7)
000018B2  4E94      2203          jsr       (A4)
000018B4  DEFC 000C 2204          add.w     #12,A7
                    2205   vsprintf_39:
000018B8  6000 00C2 2206          bra       vsprintf_23
                    2207   vsprintf_27:
000018BC  4A2E FFD3 2208          tst.b     -45(A6)
000018C0  6718      2209          beq.s     vsprintf_40
000018C2  4878 0008 2210          pea       8
000018C6  2F03      2211          move.l    D3,-(A7)
000018C8  206E 0010 2212          move.l    16(A6),A0
000018CC  58AE 0010 2213          addq.l    #4,16(A6)
000018D0  2F10      2214          move.l    (A0),-(A7)
000018D2  4E94      2215          jsr       (A4)
000018D4  DEFC 000C 2216          add.w     #12,A7
000018D8  6016      2217          bra.s     vsprintf_41
                    2218   vsprintf_40:
000018DA  4878 0008 2219          pea       8
000018DE  2F03      2220          move.l    D3,-(A7)
000018E0  206E 0010 2221          move.l    16(A6),A0
000018E4  58AE 0010 2222          addq.l    #4,16(A6)
000018E8  2F10      2223          move.l    (A0),-(A7)
000018EA  4E94      2224          jsr       (A4)
000018EC  DEFC 000C 2225          add.w     #12,A7
                    2226   vsprintf_41:
000018F0  6000 008A 2227          bra       vsprintf_23
                    2228   vsprintf_28:
000018F4  4A2E FFD3 2229          tst.b     -45(A6)
000018F8  6718      2230          beq.s     vsprintf_42
000018FA  4878 0010 2231          pea       16
000018FE  2F03      2232          move.l    D3,-(A7)
00001900  206E 0010 2233          move.l    16(A6),A0
00001904  58AE 0010 2234          addq.l    #4,16(A6)
00001908  2F10      2235          move.l    (A0),-(A7)
0000190A  4E94      2236          jsr       (A4)
0000190C  DEFC 000C 2237          add.w     #12,A7
00001910  6016      2238          bra.s     vsprintf_43
                    2239   vsprintf_42:
00001912  4878 0010 2240          pea       16
00001916  2F03      2241          move.l    D3,-(A7)
00001918  206E 0010 2242          move.l    16(A6),A0
0000191C  58AE 0010 2243          addq.l    #4,16(A6)
00001920  2F10      2244          move.l    (A0),-(A7)
00001922  4E94      2245          jsr       (A4)
00001924  DEFC 000C 2246          add.w     #12,A7
                    2247   vsprintf_43:
00001928  6000 0052 2248          bra       vsprintf_23
                    2249   vsprintf_30:
0000192C  206E 0010 2250          move.l    16(A6),A0
00001930  58AE 0010 2251          addq.l    #4,16(A6)
00001934  2010      2252          move.l    (A0),D0
00001936  2042      2253          move.l    D2,A0
00001938  5282      2254          addq.l    #1,D2
0000193A  1080      2255          move.b    D0,(A0)
0000193C  2042      2256          move.l    D2,A0
0000193E  4210      2257          clr.b     (A0)
00001940  200D      2258          move.l    A5,D0
00001942  6704      2259          beq.s     vsprintf_44
00001944  200D      2260          move.l    A5,D0
00001946  6002      2261          bra.s     vsprintf_45
                    2262   vsprintf_44:
00001948  7001      2263          moveq     #1,D0
                    2264   vsprintf_45:
0000194A  2A00      2265          move.l    D0,D5
0000194C  6000 002E 2266          bra       vsprintf_23
                    2267   vsprintf_31:
00001950  206E 0010 2268          move.l    16(A6),A0
00001954  58AE 0010 2269          addq.l    #4,16(A6)
00001958  2610      2270          move.l    (A0),D3
0000195A  0C85 FFFF 2271          cmp.l     #-1,D5
0000195E  FFFF      
00001960  660A      2272          bne.s     vsprintf_46
00001962  2F03      2273          move.l    D3,-(A7)
00001964  6100 066E 2274          bsr       _strlen
00001968  584F      2275          addq.w    #4,A7
0000196A  2A00      2276          move.l    D0,D5
                    2277   vsprintf_46:
0000196C  600E      2278          bra.s     vsprintf_23
                    2279   vsprintf_22:
0000196E  206E 000C 2280          move.l    12(A6),A0
00001972  2242      2281          move.l    D2,A1
00001974  5282      2282          addq.l    #1,D2
00001976  1290      2283          move.b    (A0),(A1)
00001978  2042      2284          move.l    D2,A0
0000197A  4210      2285          clr.b     (A0)
                    2286   vsprintf_23:
0000197C  2F03      2287          move.l    D3,-(A7)
0000197E  6100 0654 2288          bsr       _strlen
00001982  584F      2289          addq.w    #4,A7
00001984  1800      2290          move.b    D0,D4
00001986  206E 000C 2291          move.l    12(A6),A0
0000198A  1010      2292          move.b    (A0),D0
0000198C  4880      2293          ext.w     D0
0000198E  48C0      2294          ext.l     D0
00001990  0C80 0000 2295          cmp.l     #115,D0
00001994  0073      
00001996  6618      2296          bne.s     vsprintf_48
00001998  0C85 0000 2297          cmp.l     #0,D5
0000199C  0000      
0000199E  6D10      2298          blt.s     vsprintf_48
000019A0  4884      2299          ext.w     D4
000019A2  48C4      2300          ext.l     D4
000019A4  B885      2301          cmp.l     D5,D4
000019A6  6F04      2302          ble.s     vsprintf_50
000019A8  1005      2303          move.b    D5,D0
000019AA  6002      2304          bra.s     vsprintf_51
                    2305   vsprintf_50:
000019AC  1004      2306          move.b    D4,D0
                    2307   vsprintf_51:
000019AE  1800      2308          move.b    D0,D4
                    2309   vsprintf_48:
000019B0  206E 000C 2310          move.l    12(A6),A0
000019B4  1010      2311          move.b    (A0),D0
000019B6  4880      2312          ext.w     D0
000019B8  48C0      2313          ext.l     D0
000019BA  0C80 0000 2314          cmp.l     #88,D0
000019BE  0058      
000019C0  6600 0026 2315          bne       vsprintf_56
000019C4  41EE FFDC 2316          lea       -36(A6),A0
000019C8  2408      2317          move.l    A0,D2
                    2318   vsprintf_54:
000019CA  2042      2319          move.l    D2,A0
000019CC  4A10      2320          tst.b     (A0)
000019CE  6718      2321          beq.s     vsprintf_56
000019D0  2042      2322          move.l    D2,A0
000019D2  1210      2323          move.b    (A0),D1
000019D4  4881      2324          ext.w     D1
000019D6  48C1      2325          ext.l     D1
000019D8  2F01      2326          move.l    D1,-(A7)
000019DA  6100 0460 2327          bsr       _toupper
000019DE  584F      2328          addq.w    #4,A7
000019E0  2042      2329          move.l    D2,A0
000019E2  1080      2330          move.b    D0,(A0)
000019E4  5282      2331          addq.l    #1,D2
000019E6  60E2      2332          bra       vsprintf_54
                    2333   vsprintf_56:
000019E8  7E00      2334          moveq     #0,D7
000019EA  41EE FFD4 2335          lea       -44(A6),A0
000019EE  2408      2336          move.l    A0,D2
000019F0  206E 000C 2337          move.l    12(A6),A0
000019F4  1010      2338          move.b    (A0),D0
000019F6  4880      2339          ext.w     D0
000019F8  48C0      2340          ext.l     D0
000019FA  0C80 0000 2341          cmp.l     #100,D0
000019FE  0064      
00001A00  6714      2342          beq.s     vsprintf_59
00001A02  206E 000C 2343          move.l    12(A6),A0
00001A06  1010      2344          move.b    (A0),D0
00001A08  4880      2345          ext.w     D0
00001A0A  48C0      2346          ext.l     D0
00001A0C  0C80 0000 2347          cmp.l     #105,D0
00001A10  0069      
00001A12  6600 0076 2348          bne       vsprintf_65
                    2349   vsprintf_59:
00001A16  4A2E FFCE 2350          tst.b     -50(A6)
00001A1A  6612      2351          bne.s     vsprintf_62
00001A1C  2043      2352          move.l    D3,A0
00001A1E  1010      2353          move.b    (A0),D0
00001A20  4880      2354          ext.w     D0
00001A22  48C0      2355          ext.l     D0
00001A24  0C80 0000 2356          cmp.l     #45,D0
00001A28  002D      
00001A2A  6600 002E 2357          bne       vsprintf_60
                    2358   vsprintf_62:
00001A2E  2043      2359          move.l    D3,A0
00001A30  1010      2360          move.b    (A0),D0
00001A32  4880      2361          ext.w     D0
00001A34  48C0      2362          ext.l     D0
00001A36  0C80 0000 2363          cmp.l     #45,D0
00001A3A  002D      
00001A3C  660E      2364          bne.s     vsprintf_63
00001A3E  2043      2365          move.l    D3,A0
00001A40  5283      2366          addq.l    #1,D3
00001A42  2242      2367          move.l    D2,A1
00001A44  5282      2368          addq.l    #1,D2
00001A46  1290      2369          move.b    (A0),(A1)
00001A48  5304      2370          subq.b    #1,D4
00001A4A  6008      2371          bra.s     vsprintf_64
                    2372   vsprintf_63:
00001A4C  2042      2373          move.l    D2,A0
00001A4E  5282      2374          addq.l    #1,D2
00001A50  10BC 002B 2375          move.b    #43,(A0)
                    2376   vsprintf_64:
00001A54  5287      2377          addq.l    #1,D7
00001A56  6000 0032 2378          bra       vsprintf_65
                    2379   vsprintf_60:
00001A5A  4A2E FFCF 2380          tst.b     -49(A6)
00001A5E  6700 002A 2381          beq       vsprintf_65
00001A62  2043      2382          move.l    D3,A0
00001A64  1010      2383          move.b    (A0),D0
00001A66  4880      2384          ext.w     D0
00001A68  48C0      2385          ext.l     D0
00001A6A  0C80 0000 2386          cmp.l     #45,D0
00001A6E  002D      
00001A70  660E      2387          bne.s     vsprintf_67
00001A72  2043      2388          move.l    D3,A0
00001A74  5283      2389          addq.l    #1,D3
00001A76  2242      2390          move.l    D2,A1
00001A78  5282      2391          addq.l    #1,D2
00001A7A  1290      2392          move.b    (A0),(A1)
00001A7C  5304      2393          subq.b    #1,D4
00001A7E  6008      2394          bra.s     vsprintf_68
                    2395   vsprintf_67:
00001A80  2042      2396          move.l    D2,A0
00001A82  5282      2397          addq.l    #1,D2
00001A84  10BC 0020 2398          move.b    #32,(A0)
                    2399   vsprintf_68:
00001A88  5287      2400          addq.l    #1,D7
                    2401   vsprintf_65:
00001A8A  4A2E FFD0 2402          tst.b     -48(A6)
00001A8E  6700 0066 2403          beq       vsprintf_77
00001A92  206E 000C 2404          move.l    12(A6),A0
00001A96  1010      2405          move.b    (A0),D0
00001A98  4880      2406          ext.w     D0
00001A9A  48C0      2407          ext.l     D0
00001A9C  0C80 0000 2408          cmp.l     #111,D0
00001AA0  006F      
00001AA2  671A      2409          beq.s     vsprintf_73
00001AA4  6E0C      2410          bgt.s     vsprintf_76
00001AA6  0C80 0000 2411          cmp.l     #88,D0
00001AAA  0058      
00001AAC  6710      2412          beq.s     vsprintf_73
00001AAE  6000 0046 2413          bra       vsprintf_77
                    2414   vsprintf_76:
00001AB2  0C80 0000 2415          cmp.l     #120,D0
00001AB6  0078      
00001AB8  6704      2416          beq.s     vsprintf_73
00001ABA  6000 003A 2417          bra       vsprintf_77
                    2418   vsprintf_73:
00001ABE  2042      2419          move.l    D2,A0
00001AC0  5282      2420          addq.l    #1,D2
00001AC2  10BC 0030 2421          move.b    #48,(A0)
00001AC6  5287      2422          addq.l    #1,D7
00001AC8  206E 000C 2423          move.l    12(A6),A0
00001ACC  1010      2424          move.b    (A0),D0
00001ACE  4880      2425          ext.w     D0
00001AD0  48C0      2426          ext.l     D0
00001AD2  0C80 0000 2427          cmp.l     #120,D0
00001AD6  0078      
00001AD8  6712      2428          beq.s     vsprintf_79
00001ADA  206E 000C 2429          move.l    12(A6),A0
00001ADE  1010      2430          move.b    (A0),D0
00001AE0  4880      2431          ext.w     D0
00001AE2  48C0      2432          ext.l     D0
00001AE4  0C80 0000 2433          cmp.l     #88,D0
00001AE8  0058      
00001AEA  660A      2434          bne.s     vsprintf_77
                    2435   vsprintf_79:
00001AEC  2042      2436          move.l    D2,A0
00001AEE  5282      2437          addq.l    #1,D2
00001AF0  10BC 0078 2438          move.b    #120,(A0)
00001AF4  5287      2439          addq.l    #1,D7
                    2440   vsprintf_77:
00001AF6  2042      2441          move.l    D2,A0
00001AF8  4210      2442          clr.b     (A0)
00001AFA  206E 000C 2443          move.l    12(A6),A0
00001AFE  1010      2444          move.b    (A0),D0
00001B00  4880      2445          ext.w     D0
00001B02  48C0      2446          ext.l     D0
00001B04  0C80 0000 2447          cmp.l     #105,D0
00001B08  0069      
00001B0A  6700 0076 2448          beq       vsprintf_82
00001B0E  6E42      2449          bgt.s     vsprintf_93
00001B10  0C80 0000 2450          cmp.l     #99,D0
00001B14  0063      
00001B16  6700 0084 2451          beq       vsprintf_96
00001B1A  6E1C      2452          bgt.s     vsprintf_94
00001B1C  0C80 0000 2453          cmp.l     #88,D0
00001B20  0058      
00001B22  6700 005E 2454          beq       vsprintf_82
00001B26  6E00 0184 2455          bgt       vsprintf_80
00001B2A  0C80 0000 2456          cmp.l     #69,D0
00001B2E  0045      
00001B30  6700 0050 2457          beq       vsprintf_82
00001B34  6000 0176 2458          bra       vsprintf_80
                    2459   vsprintf_94:
00001B38  0C80 0000 2460          cmp.l     #101,D0
00001B3C  0065      
00001B3E  6700 0042 2461          beq       vsprintf_82
00001B42  6E00 0168 2462          bgt       vsprintf_80
00001B46  0C80 0000 2463          cmp.l     #100,D0
00001B4A  0064      
00001B4C  6734      2464          beq.s     vsprintf_82
00001B4E  6000 015C 2465          bra       vsprintf_80
                    2466   vsprintf_93:
00001B52  0C80 0000 2467          cmp.l     #117,D0
00001B56  0075      
00001B58  6728      2468          beq.s     vsprintf_82
00001B5A  6E1A      2469          bgt.s     vsprintf_95
00001B5C  0C80 0000 2470          cmp.l     #115,D0
00001B60  0073      
00001B62  6700 0038 2471          beq       vsprintf_96
00001B66  6E00 0144 2472          bgt       vsprintf_80
00001B6A  0C80 0000 2473          cmp.l     #111,D0
00001B6E  006F      
00001B70  6710      2474          beq.s     vsprintf_82
00001B72  6000 0138 2475          bra       vsprintf_80
                    2476   vsprintf_95:
00001B76  0C80 0000 2477          cmp.l     #120,D0
00001B7A  0078      
00001B7C  6704      2478          beq.s     vsprintf_82
00001B7E  6000 012C 2479          bra       vsprintf_80
                    2480   vsprintf_82:
00001B82  4A2E FFD2 2481          tst.b     -46(A6)
00001B86  6714      2482          beq.s     vsprintf_96
00001B88  4A2E FFCD 2483          tst.b     -51(A6)
00001B8C  660E      2484          bne.s     vsprintf_96
00001B8E  200D      2485          move.l    A5,D0
00001B90  9087      2486          sub.l     D7,D0
00001B92  4884      2487          ext.w     D4
00001B94  48C4      2488          ext.l     D4
00001B96  9084      2489          sub.l     D4,D0
00001B98  2D40 FFFC 2490          move.l    D0,-4(A6)
                    2491   vsprintf_96:
00001B9C  202E FFFC 2492          move.l    -4(A6),D0
00001BA0  0C80 0000 2493          cmp.l     #0,D0
00001BA4  0000      
00001BA6  6C04      2494          bge.s     vsprintf_98
00001BA8  42AE FFFC 2495          clr.l     -4(A6)
                    2496   vsprintf_98:
00001BAC  4A2E FFCD 2497          tst.b     -51(A6)
00001BB0  6600 0030 2498          bne       vsprintf_104
00001BB4  4884      2499          ext.w     D4
00001BB6  48C4      2500          ext.l     D4
00001BB8  2004      2501          move.l    D4,D0
00001BBA  D0AE FFFC 2502          add.l     -4(A6),D0
00001BBE  D087      2503          add.l     D7,D0
00001BC0  1D40 FFD1 2504          move.b    D0,-47(A6)
                    2505   vsprintf_102:
00001BC4  102E FFD1 2506          move.b    -47(A6),D0
00001BC8  4880      2507          ext.w     D0
00001BCA  48C0      2508          ext.l     D0
00001BCC  220D      2509          move.l    A5,D1
00001BCE  534D      2510          subq.w    #1,A5
00001BD0  B081      2511          cmp.l     D1,D0
00001BD2  6C0E      2512          bge.s     vsprintf_104
00001BD4  4878 0020 2513          pea       32
00001BD8  2F0A      2514          move.l    A2,-(A7)
00001BDA  4E93      2515          jsr       (A3)
00001BDC  504F      2516          addq.w    #8,A7
00001BDE  5286      2517          addq.l    #1,D6
00001BE0  60E2      2518          bra       vsprintf_102
                    2519   vsprintf_104:
00001BE2  41EE FFD4 2520          lea       -44(A6),A0
00001BE6  2408      2521          move.l    A0,D2
                    2522   vsprintf_105:
00001BE8  2042      2523          move.l    D2,A0
00001BEA  4A10      2524          tst.b     (A0)
00001BEC  6716      2525          beq.s     vsprintf_107
00001BEE  2042      2526          move.l    D2,A0
00001BF0  5282      2527          addq.l    #1,D2
00001BF2  1210      2528          move.b    (A0),D1
00001BF4  4881      2529          ext.w     D1
00001BF6  48C1      2530          ext.l     D1
00001BF8  2F01      2531          move.l    D1,-(A7)
00001BFA  2F0A      2532          move.l    A2,-(A7)
00001BFC  4E93      2533          jsr       (A3)
00001BFE  504F      2534          addq.w    #8,A7
00001C00  5286      2535          addq.l    #1,D6
00001C02  60E4      2536          bra       vsprintf_105
                    2537   vsprintf_107:
00001C04  202E FFFC 2538          move.l    -4(A6),D0
00001C08  1D40 FFD1 2539          move.b    D0,-47(A6)
                    2540   vsprintf_108:
00001C0C  102E FFD1 2541          move.b    -47(A6),D0
00001C10  532E FFD1 2542          subq.b    #1,-47(A6)
00001C14  4A00      2543          tst.b     D0
00001C16  670E      2544          beq.s     vsprintf_110
00001C18  4878 0030 2545          pea       48
00001C1C  2F0A      2546          move.l    A2,-(A7)
00001C1E  4E93      2547          jsr       (A3)
00001C20  504F      2548          addq.w    #8,A7
00001C22  5286      2549          addq.l    #1,D6
00001C24  60E6      2550          bra       vsprintf_108
                    2551   vsprintf_110:
00001C26  2043      2552          move.l    D3,A0
00001C28  4A10      2553          tst.b     (A0)
00001C2A  6700 0048 2554          beq       vsprintf_113
00001C2E  206E 000C 2555          move.l    12(A6),A0
00001C32  1010      2556          move.b    (A0),D0
00001C34  4880      2557          ext.w     D0
00001C36  48C0      2558          ext.l     D0
00001C38  0C80 0000 2559          cmp.l     #115,D0
00001C3C  0073      
00001C3E  670C      2560          beq.s     vsprintf_116
00001C40  6E18      2561          bgt.s     vsprintf_119
00001C42  0C80 0000 2562          cmp.l     #99,D0
00001C46  0063      
00001C48  6702      2563          beq.s     vsprintf_116
00001C4A  600E      2564          bra.s     vsprintf_119
                    2565   vsprintf_116:
00001C4C  2005      2566          move.l    D5,D0
00001C4E  5385      2567          subq.l    #1,D5
00001C50  0C80 0000 2568          cmp.l     #0,D0
00001C54  0000      
00001C56  6E02      2569          bgt.s     vsprintf_119
00001C58  6016      2570          bra.s     vsprintf_115
                    2571   vsprintf_119:
00001C5A  2043      2572          move.l    D3,A0
00001C5C  5283      2573          addq.l    #1,D3
00001C5E  1210      2574          move.b    (A0),D1
00001C60  4881      2575          ext.w     D1
00001C62  48C1      2576          ext.l     D1
00001C64  2F01      2577          move.l    D1,-(A7)
00001C66  2F0A      2578          move.l    A2,-(A7)
00001C68  4E93      2579          jsr       (A3)
00001C6A  504F      2580          addq.w    #8,A7
00001C6C  5286      2581          addq.l    #1,D6
00001C6E  6002      2582          bra.s     vsprintf_112
                    2583   vsprintf_115:
00001C70  6002      2584          bra.s     vsprintf_113
                    2585   vsprintf_112:
00001C72  60B2      2586          bra       vsprintf_110
                    2587   vsprintf_113:
00001C74  4A2E FFCD 2588          tst.b     -51(A6)
00001C78  6700 0030 2589          beq       vsprintf_125
00001C7C  4884      2590          ext.w     D4
00001C7E  48C4      2591          ext.l     D4
00001C80  2004      2592          move.l    D4,D0
00001C82  D0AE FFFC 2593          add.l     -4(A6),D0
00001C86  D087      2594          add.l     D7,D0
00001C88  1D40 FFD1 2595          move.b    D0,-47(A6)
                    2596   vsprintf_123:
00001C8C  102E FFD1 2597          move.b    -47(A6),D0
00001C90  4880      2598          ext.w     D0
00001C92  48C0      2599          ext.l     D0
00001C94  220D      2600          move.l    A5,D1
00001C96  534D      2601          subq.w    #1,A5
00001C98  B081      2602          cmp.l     D1,D0
00001C9A  6C0E      2603          bge.s     vsprintf_125
00001C9C  4878 0020 2604          pea       32
00001CA0  2F0A      2605          move.l    A2,-(A7)
00001CA2  4E93      2606          jsr       (A3)
00001CA4  504F      2607          addq.w    #8,A7
00001CA6  5386      2608          subq.l    #1,D6
00001CA8  60E2      2609          bra       vsprintf_123
                    2610   vsprintf_125:
00001CAA  6014      2611          bra.s     vsprintf_81
                    2612   vsprintf_80:
00001CAC  206E 000C 2613          move.l    12(A6),A0
00001CB0  1210      2614          move.b    (A0),D1
00001CB2  4881      2615          ext.w     D1
00001CB4  48C1      2616          ext.l     D1
00001CB6  2F01      2617          move.l    D1,-(A7)
00001CB8  2F0A      2618          move.l    A2,-(A7)
00001CBA  4E93      2619          jsr       (A3)
00001CBC  504F      2620          addq.w    #8,A7
00001CBE  5286      2621          addq.l    #1,D6
                    2622   vsprintf_81:
00001CC0  52AE 000C 2623          addq.l    #1,12(A6)
                    2624   vsprintf_2:
00001CC4  6000 F9D6 2625          bra       vsprintf_1
                    2626   vsprintf_3:
00001CC8  4A92      2627          tst.l     (A2)
00001CCA  6710      2628          beq.s     vsprintf_126
00001CCC  4201      2629          clr.b     D1
00001CCE  C2BC 0000 2630          and.l     #255,D1
00001CD2  00FF      
00001CD4  2F01      2631          move.l    D1,-(A7)
00001CD6  2F0A      2632          move.l    A2,-(A7)
00001CD8  4E93      2633          jsr       (A3)
00001CDA  504F      2634          addq.w    #8,A7
                    2635   vsprintf_126:
00001CDC  2006      2636          move.l    D6,D0
00001CDE  4CDF 3CFC 2637          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00001CE2  4E5E      2638          unlk      A6
00001CE4  4E75      2639          rts
                    2640   ULMUL:
00001CE6  4E56 0000 2641          link    A6,#0
00001CEA  48E7 C000 2642          movem.l D0/D1,-(A7)
00001CEE  222E 0008 2643          move.l  8(A6),D1
00001CF2  202E 000C 2644          move.l  12(A6),D0
00001CF6  602C      2645          bra.s   lmul_3
                    2646   LMUL:
00001CF8  4E56 0000 2647          link    A6,#0
00001CFC  48E7 C000 2648          movem.l D0/D1,-(A7)
00001D00  222E 0008 2649          move.l  8(A6),D1
00001D04  202E 000C 2650          move.l  12(A6),D0
00001D08  4A80      2651          tst.l   D0
00001D0A  6A0A      2652          bpl.s   lmul_1
00001D0C  4480      2653          neg.l   D0
00001D0E  4A81      2654          tst.l   D1
00001D10  6A0A      2655          bpl.s   lmul_2
00001D12  4481      2656          neg.l   D1
00001D14  600E      2657          bra.s   lmul_3
                    2658   lmul_1:
00001D16  4A81      2659          tst.l   D1
00001D18  6A0A      2660          bpl.s   lmul_3
00001D1A  4481      2661          neg.l   D1
                    2662   lmul_2:
00001D1C  6114      2663          bsr.s   domul
00001D1E  4481      2664          neg.l   D1
00001D20  4080      2665          negx.l  D0
00001D22  6002      2666          bra.s   lmul_4
                    2667   lmul_3:
00001D24  610C      2668          bsr.s   domul
                    2669   lmul_4:
00001D26  2D41 0008 2670          move.l  D1,8(A6)
00001D2A  4CDF 0003 2671          movem.l (A7)+,D0/D1
00001D2E  4E5E      2672          unlk    A6
00001D30  4E75      2673          rts
                    2674   domul:
00001D32  0C81 0000 2675          cmpi.l  #$FFFF,D1
00001D36  FFFF      
00001D38  620C      2676          bhi.s   domul_1
00001D3A  0C80 0000 2677          cmpi.l  #$FFFF,D0
00001D3E  FFFF      
00001D40  620E      2678          bhi.s   domul_2
00001D42  C2C0      2679          mulu    D0,D1
00001D44  4E75      2680          rts
                    2681   domul_1:
00001D46  0C80 0000 2682          cmpi.l  #$FFFF,D0
00001D4A  FFFF      
00001D4C  6218      2683          bhi.s   domul_4
00001D4E  6002      2684          bra.s   domul_3
                    2685   domul_2
00001D50  C141      2686          exg     D0,D1
                    2687   domul_3:
00001D52  2F02      2688          move.l  D2,-(A7)
00001D54  2401      2689          move.l  D1,D2
00001D56  4842      2690          swap    D2
00001D58  C2C0      2691          mulu    D0,D1
00001D5A  C4C0      2692          mulu    D0,D2
00001D5C  4842      2693          swap    D2
00001D5E  4242      2694          clr.w   D2
00001D60  D282      2695          add.l   D2,D1
00001D62  241F      2696          move.l  (A7)+,D2
00001D64  4E75      2697          rts
                    2698   domul_4:
00001D66  48E7 3000 2699          movem.l D2/D3,-(A7)
00001D6A  2401      2700          move.l  D1,D2
00001D6C  2601      2701          move.l  D1,D3
00001D6E  C2C0      2702          mulu    D0,D1
00001D70  4842      2703          swap    D2
00001D72  C4C0      2704          mulu    D0,D2
00001D74  4840      2705          swap    D0
00001D76  C6C0      2706          mulu    D0,D3
00001D78  D483      2707          add.l   D3,D2
00001D7A  4842      2708          swap    D2
00001D7C  4242      2709          clr.w   D2
00001D7E  D282      2710          add.l   D2,D1
00001D80  4CDF 000C 2711          movem.l (A7)+,D2/D3
00001D84  4E75      2712          rts
                    2713   _gets:
00001D86  4E56 0000 2714          link      A6,#0
00001D8A  48E7 3820 2715          movem.l   D2/D3/D4/A2,-(A7)
00001D8E  45F9 0000 2716          lea       _putch,A2
00001D92  1FE6      
00001D94  282E 0008 2717          move.l    8(A6),D4
00001D98  2404      2718          move.l    D4,D2
                    2719   gets_1:
00001D9A  6100 027A 2720          bsr       _getch
00001D9E  2600      2721          move.l    D0,D3
00001DA0  0C80 0000 2722          cmp.l     #10,D0
00001DA4  000A      
00001DA6  6700 003C 2723          beq       gets_3
00001DAA  0C83 0000 2724          cmp.l     #8,D3
00001DAE  0008      
00001DB0  6712      2725          beq.s     gets_4
00001DB2  2042      2726          move.l    D2,A0
00001DB4  5282      2727          addq.l    #1,D2
00001DB6  1083      2728          move.b    D3,(A0)
00001DB8  4883      2729          ext.w     D3
00001DBA  48C3      2730          ext.l     D3
00001DBC  2F03      2731          move.l    D3,-(A7)
00001DBE  4E92      2732          jsr       (A2)
00001DC0  584F      2733          addq.w    #4,A7
00001DC2  601E      2734          bra.s     gets_6
                    2735   gets_4:
00001DC4  B484      2736          cmp.l     D4,D2
00001DC6  631A      2737          bls.s     gets_6
00001DC8  4878 0008 2738          pea       8
00001DCC  4E92      2739          jsr       (A2)
00001DCE  584F      2740          addq.w    #4,A7
00001DD0  4878 0020 2741          pea       32
00001DD4  4E92      2742          jsr       (A2)
00001DD6  584F      2743          addq.w    #4,A7
00001DD8  4878 0008 2744          pea       8
00001DDC  4E92      2745          jsr       (A2)
00001DDE  584F      2746          addq.w    #4,A7
00001DE0  5382      2747          subq.l    #1,D2
                    2748   gets_6:
00001DE2  60B6      2749          bra       gets_1
                    2750   gets_3:
00001DE4  4878 000A 2751          pea       10
00001DE8  4E92      2752          jsr       (A2)
00001DEA  584F      2753          addq.w    #4,A7
00001DEC  2042      2754          move.l    D2,A0
00001DEE  4210      2755          clr.b     (A0)
00001DF0  2004      2756          move.l    D4,D0
00001DF2  4CDF 041C 2757          movem.l   (A7)+,D2/D3/D4/A2
00001DF6  4E5E      2758          unlk      A6
00001DF8  4E75      2759          rts
                    2760   _tolower:
00001DFA  4E56 0000 2761          link      A6,#0
00001DFE  48E7 2000 2762          movem.l   D2,-(A7)
00001E02  242E 0008 2763          move.l    8(A6),D2
00001E06  0C82 0000 2764          cmp.l     #65,D2
00001E0A  0041      
00001E0C  6D0E      2765          blt.s     tolower_1
00001E0E  0C82 0000 2766          cmp.l     #90,D2
00001E12  005A      
00001E14  6E06      2767          bgt.s     tolower_1
00001E16  84BC 0000 2768          or.l      #32,D2
00001E1A  0020      
                    2769   tolower_1:
00001E1C  2002      2770          move.l    D2,D0
00001E1E  4CDF 0004 2771          movem.l   (A7)+,D2
00001E22  4E5E      2772          unlk      A6
00001E24  4E75      2773          rts
                    2774   _strcat:
00001E26  206F 0004 2775          move.l    (4,A7),A0	
00001E2A  226F 0008 2776          move.l    (8,A7),A1	
00001E2E  2008      2777          move.l    A0,D0		
                    2778   strcat_0:
00001E30  4A18      2779          tst.b     (A0)+
00001E32  66FC      2780          bne       strcat_0
00001E34  5348      2781          subq      #1,A0
                    2782   strcat_1:
00001E36  10D9      2783          move.b    (A1)+,(A0)+
00001E38  66FC      2784          bne       strcat_1
00001E3A  4E75      2785          rts
                    2786   _toupper:
00001E3C  4E56 0000 2787          link      A6,#0
00001E40  48E7 2000 2788          movem.l   D2,-(A7)
00001E44  242E 0008 2789          move.l    8(A6),D2
00001E48  0C82 0000 2790          cmp.l     #97,D2
00001E4C  0061      
00001E4E  6D0E      2791          blt.s     toupper_1
00001E50  0C82 0000 2792          cmp.l     #122,D2
00001E54  007A      
00001E56  6E06      2793          bgt.s     toupper_1
00001E58  C4BC 0000 2794          and.l     #95,D2
00001E5C  005F      
                    2795   toupper_1:
00001E5E  2002      2796          move.l    D2,D0
00001E60  4CDF 0004 2797          movem.l   (A7)+,D2
00001E64  4E5E      2798          unlk      A6
00001E66  4E75      2799          rts
                    2800   _ungetch:
00001E68  4E56 0000 2801          link      A6,#0
00001E6C  23EE 0008 2802          move.l    8(A6),__ungetbuf
00001E70  0803 00C0 
00001E74  202E 0008 2803          move.l    8(A6),D0
00001E78  4E5E      2804          unlk      A6
00001E7A  4E75      2805          rts
                    2806   @itoa_convert:
00001E7C  4E56 0000 2807          link      A6,#0
00001E80  48E7 3C00 2808          movem.l   D2/D3/D4/D5,-(A7)
00001E84  242E 0008 2809          move.l    8(A6),D2
00001E88  262E 0010 2810          move.l    16(A6),D3
00001E8C  2A2E 000C 2811          move.l    12(A6),D5
00001E90  2F05      2812          move.l    D5,-(A7)
00001E92  2F03      2813          move.l    D3,-(A7)
00001E94  6100 01CC 2814          bsr       ULDIV
00001E98  202F 0004 2815          move.l    4(A7),D0
00001E9C  504F      2816          addq.w    #8,A7
00001E9E  2800      2817          move.l    D0,D4
00001EA0  BA83      2818          cmp.l     D3,D5
00001EA2  651A      2819          blo.s     @itoa_convert_1
00001EA4  2F03      2820          move.l    D3,-(A7)
00001EA6  2F05      2821          move.l    D5,-(A7)
00001EA8  2F03      2822          move.l    D3,-(A7)
00001EAA  6100 01B6 2823          bsr       ULDIV
00001EAE  2217      2824          move.l    (A7),D1
00001EB0  504F      2825          addq.w    #8,A7
00001EB2  2F01      2826          move.l    D1,-(A7)
00001EB4  2F02      2827          move.l    D2,-(A7)
00001EB6  61C4      2828          bsr       @itoa_convert
00001EB8  DEFC 000C 2829          add.w     #12,A7
00001EBC  2400      2830          move.l    D0,D2
                    2831   @itoa_convert_1:
00001EBE  0C84 0000 2832          cmp.l     #9,D4
00001EC2  0009      
00001EC4  6E0A      2833          bgt.s     @itoa_convert_3
00001EC6  2004      2834          move.l    D4,D0
00001EC8  0680 0000 2835          add.l     #48,D0
00001ECC  0030      
00001ECE  600E      2836          bra.s     @itoa_convert_4
                    2837   @itoa_convert_3:
00001ED0  2004      2838          move.l    D4,D0
00001ED2  0680 0000 2839          add.l     #97,D0
00001ED6  0061      
00001ED8  0480 0000 2840          sub.l     #10,D0
00001EDC  000A      
                    2841   @itoa_convert_4:
00001EDE  2042      2842          move.l    D2,A0
00001EE0  1080      2843          move.b    D0,(A0)
00001EE2  2002      2844          move.l    D2,D0
00001EE4  5280      2845          addq.l    #1,D0
00001EE6  4CDF 003C 2846          movem.l   (A7)+,D2/D3/D4/D5
00001EEA  4E5E      2847          unlk      A6
00001EEC  4E75      2848          rts
                    2849   _ltoa:
00001EEE  4E56 0000 2850          link      A6,#0
00001EF2  48E7 3C00 2851          movem.l   D2/D3/D4/D5,-(A7)
00001EF6  242E 0008 2852          move.l    8(A6),D2
00001EFA  262E 000C 2853          move.l    12(A6),D3
00001EFE  2A2E 0010 2854          move.l    16(A6),D5
00001F02  2803      2855          move.l    D3,D4
00001F04  0C85 0000 2856          cmp.l     #2,D5
00001F08  0002      
00001F0A  6D08      2857          blt.s     ltoa_3
00001F0C  0C85 0000 2858          cmp.l     #36,D5
00001F10  0024      
00001F12  6F06      2859          ble.s     ltoa_1
                    2860   ltoa_3:
00001F14  2003      2861          move.l    D3,D0
00001F16  6000 0052 2862          bra       ltoa_4
                    2863   ltoa_1:
00001F1A  0C85 0000 2864          cmp.l     #10,D5
00001F1E  000A      
00001F20  6600 0032 2865          bne       ltoa_5
00001F24  0C82 0000 2866          cmp.l     #0,D2
00001F28  0000      
00001F2A  6C28      2867          bge.s     ltoa_5
00001F2C  2002      2868          move.l    D2,D0
00001F2E  4480      2869          neg.l     D0
00001F30  2400      2870          move.l    D0,D2
00001F32  0C82 0000 2871          cmp.l     #0,D2
00001F36  0000      
00001F38  6C12      2872          bge.s     ltoa_7
00001F3A  4879 0000 2873          pea       @itoa_1
00001F3E  22DE      
00001F40  2F03      2874          move.l    D3,-(A7)
00001F42  6100 010E 2875          bsr       _strcpy
00001F46  504F      2876          addq.w    #8,A7
00001F48  2003      2877          move.l    D3,D0
00001F4A  601E      2878          bra.s     ltoa_4
                    2879   ltoa_7:
00001F4C  2044      2880          move.l    D4,A0
00001F4E  5284      2881          addq.l    #1,D4
00001F50  10BC 002D 2882          move.b    #45,(A0)
                    2883   ltoa_5:
00001F54  2F05      2884          move.l    D5,-(A7)
00001F56  2F02      2885          move.l    D2,-(A7)
00001F58  2F04      2886          move.l    D4,-(A7)
00001F5A  6100 FF20 2887          bsr       @itoa_convert
00001F5E  DEFC 000C 2888          add.w     #12,A7
00001F62  2800      2889          move.l    D0,D4
00001F64  2044      2890          move.l    D4,A0
00001F66  4210      2891          clr.b     (A0)
00001F68  2003      2892          move.l    D3,D0
                    2893   ltoa_4:
00001F6A  4CDF 003C 2894          movem.l   (A7)+,D2/D3/D4/D5
00001F6E  4E5E      2895          unlk      A6
00001F70  4E75      2896          rts
                    2897   _ultoa:
00001F72  4E56 0000 2898          link      A6,#0
00001F76  48E7 3800 2899          movem.l   D2/D3/D4,-(A7)
00001F7A  262E 0010 2900          move.l    16(A6),D3
00001F7E  282E 000C 2901          move.l    12(A6),D4
00001F82  2404      2902          move.l    D4,D2
00001F84  0C83 0000 2903          cmp.l     #2,D3
00001F88  0002      
00001F8A  6D08      2904          blt.s     ultoa_3
00001F8C  0C83 0000 2905          cmp.l     #36,D3
00001F90  0024      
00001F92  6F04      2906          ble.s     ultoa_1
                    2907   ultoa_3:
00001F94  2004      2908          move.l    D4,D0
00001F96  6018      2909          bra.s     ultoa_4
                    2910   ultoa_1:
00001F98  2F03      2911          move.l    D3,-(A7)
00001F9A  2F2E 0008 2912          move.l    8(A6),-(A7)
00001F9E  2F02      2913          move.l    D2,-(A7)
00001FA0  6100 FEDA 2914          bsr       @itoa_convert
00001FA4  DEFC 000C 2915          add.w     #12,A7
00001FA8  2400      2916          move.l    D0,D2
00001FAA  2042      2917          move.l    D2,A0
00001FAC  4210      2918          clr.b     (A0)
00001FAE  2004      2919          move.l    D4,D0
                    2920   ultoa_4:
00001FB0  4CDF 001C 2921          movem.l   (A7)+,D2/D3/D4
00001FB4  4E5E      2922          unlk      A6
00001FB6  4E75      2923          rts
                    2924   _itoa:
00001FB8  4E56 0000 2925          link      A6,#0
00001FBC  2F2E 0010 2926          move.l    16(A6),-(A7)
00001FC0  2F2E 000C 2927          move.l    12(A6),-(A7)
00001FC4  2F2E 0008 2928          move.l    8(A6),-(A7)
00001FC8  6100 FF24 2929          bsr       _ltoa
00001FCC  DEFC 000C 2930          add.w     #12,A7
00001FD0  4E5E      2931          unlk      A6
00001FD2  4E75      2932          rts
                    2933   _strlen:
00001FD4  206F 0004 2934          move.l    (4,A7),A0
00001FD8  2248      2935          move.l    A0,A1
                    2936   strlen_1:
00001FDA  4A19      2937          tst.b     (A1)+
00001FDC  66FC      2938          bne       strlen_1
00001FDE  2009      2939          move.l    A1,D0
00001FE0  9088      2940          sub.l     A0,D0
00001FE2  5380      2941          subq.l    #1,D0
00001FE4  4E75      2942          rts
                    2943   _putch:
00001FE6  4E56 0000 2944          link      A6,#0
00001FEA  48E7 2000 2945          movem.l   D2,-(A7)
00001FEE  242E 0008 2946          move.l    8(A6),D2
00001FF2  0C82 0000 2947          cmp.l     #10,D2
00001FF6  000A      
00001FF8  660A      2948          bne.s     putch_1
00001FFA  4878 000D 2949          pea       13
00001FFE  6100 EA2C 2950          bsr       __putch
00002002  584F      2951          addq.w    #4,A7
                    2952   putch_1:
00002004  2F02      2953          move.l    D2,-(A7)
00002006  6100 EA24 2954          bsr       __putch
0000200A  584F      2955          addq.w    #4,A7
0000200C  2002      2956          move.l    D2,D0
0000200E  4CDF 0004 2957          movem.l   (A7)+,D2
00002012  4E5E      2958          unlk      A6
00002014  4E75      2959          rts
                    2960   _getch:
00002016  48E7 2000 2961          movem.l   D2,-(A7)
0000201A  2439 0803 2962          move.l    __ungetbuf,D2
0000201E  00C0      
00002020  2039 0803 2963          move.l    __ungetbuf,D0
00002024  00C0      
00002026  0C80 FFFF 2964          cmp.l     #-1,D0
0000202A  FFFF      
0000202C  670C      2965          beq.s     getch_1
0000202E  23FC FFFF 2966          move.l    #-1,__ungetbuf
00002032  FFFF 0803 
00002036  00C0      
00002038  6010      2967          bra.s     getch_3
                    2968   getch_1:
0000203A  6100 EA1E 2969          bsr       __getch
0000203E  2400      2970          move.l    D0,D2
00002040  0C80 0000 2971          cmp.l     #13,D0
00002044  000D      
00002046  6602      2972          bne.s     getch_3
00002048  740A      2973          moveq     #10,D2
                    2974   getch_3:
0000204A  2002      2975          move.l    D2,D0
0000204C  4CDF 0004 2976          movem.l   (A7)+,D2
00002050  4E75      2977          rts
                    2978   _strcpy:
00002052  206F 0004 2979          move.l    (4,A7),A0
00002056  226F 0008 2980          move.l    (8,A7),A1
0000205A  2008      2981          move.l    A0,D0
                    2982   strcpy_1:
0000205C  10D9      2983          move.b    (A1)+,(A0)+
0000205E  66FC      2984          bne       strcpy_1
00002060  4E75      2985          rts
                    2986   ULDIV:
00002062  4E56 0000 2987          link    A6,#0
00002066  48E7 C000 2988          movem.l D0/D1,-(A7)
0000206A  222E 0008 2989          move.l  8(A6),D1
0000206E  202E 000C 2990          move.l  12(A6),D0
00002072  6036      2991          bra.s   ldiv_3
                    2992   LDIV:
00002074  4E56 0000 2993          link    A6,#0
00002078  48E7 C000 2994          movem.l D0/D1,-(A7)
0000207C  222E 0008 2995          move.l  8(A6),D1
00002080  202E 000C 2996          move.l  12(A6),D0
00002084  4A80      2997          tst.l   D0
00002086  6A0E      2998          bpl.s   ldiv_1
00002088  4480      2999          neg.l   D0
0000208A  4A81      3000          tst.l   D1
0000208C  6A14      3001          bpl.s   ldiv_2
0000208E  4481      3002          neg.l   D1
00002090  612A      3003          bsr.s   dodiv
00002092  4481      3004          neg.l   D1
00002094  6016      3005          bra.s   ldiv_4
                    3006   ldiv_1:
00002096  4A81      3007          tst.l   D1
00002098  6A10      3008          bpl.s   ldiv_3
0000209A  4481      3009          neg.l   D1
0000209C  611E      3010          bsr.s   dodiv
0000209E  4480      3011          neg.l   D0
000020A0  600A      3012          bra.s   ldiv_4
                    3013   ldiv_2:
000020A2  6118      3014          bsr.s   dodiv
000020A4  4480      3015          neg.l   D0
000020A6  4481      3016          neg.l   D1
000020A8  6002      3017          bra.s   ldiv_4
                    3018   ldiv_3:
000020AA  6110      3019          bsr.s   dodiv
                    3020   ldiv_4:
000020AC  2D40 0008 3021          move.l  D0,8(A6)
000020B0  2D41 000C 3022          move.l  D1,12(A6)
000020B4  4CDF 0003 3023          movem.l (A7)+,D0/D1
000020B8  4E5E      3024          unlk    A6
000020BA  4E75      3025          rts
                    3026   dodiv:
000020BC  0C81 0000 3027          cmpi.l  #$FFFF,D1
000020C0  FFFF      
000020C2  6236      3028          bhi.s   dodiv_2
000020C4  0C80 0000 3029          cmpi.l  #$FFFF,D0
000020C8  FFFF      
000020CA  6210      3030          bhi.s   dodiv_1
000020CC  80C1      3031          divu    D1,D0
000020CE  2200      3032          move.l  D0,D1
000020D0  4241      3033          clr.w   D1
000020D2  4841      3034          swap    D1
000020D4  0280 0000 3035          andi.l  #$FFFF,D0
000020D8  FFFF      
000020DA  4E75      3036          rts
                    3037   dodiv_1:
000020DC  48A7 A000 3038          movem.w D0/D2,-(A7)
000020E0  4240      3039          clr.w   D0
000020E2  4840      3040          swap    D0
000020E4  80C1      3041          divu    D1,D0
000020E6  3400      3042          move.w  D0,D2
000020E8  301F      3043          move.w  (A7)+,D0
000020EA  80C1      3044          divu    D1,D0
000020EC  4840      3045          swap    D0
000020EE  4281      3046          clr.l   D1
000020F0  3200      3047          move.w  D0,D1
000020F2  3002      3048          move.w  D2,D0
000020F4  4840      3049          swap    D0
000020F6  341F      3050          move.w  (A7)+,D2
000020F8  4E75      3051          rts
                    3052   dodiv_2:
000020FA  48E7 3800 3053          movem.l D2/D3/D4,-(A7)
000020FE  2401      3054          move.l  D1,D2
00002100  4242      3055          clr.w   D2
00002102  4842      3056          swap    D2
00002104  5282      3057          addq.l  #1,D2
00002106  2600      3058          move.l  D0,D3
00002108  2801      3059          move.l  D1,D4
0000210A  2202      3060          move.l  D2,D1
0000210C  61CE      3061          bsr.s   dodiv_1
0000210E  2204      3062          move.l  D4,D1
00002110  82C2      3063          divu    D2,D1
00002112  80C1      3064          divu    D1,D0
00002114  0280 0000 3065          andi.l  #$FFFF,D0
00002118  FFFF      
                    3066   dodiv_3:
0000211A  2204      3067          move.l  D4,D1
0000211C  2404      3068          move.l  D4,D2
0000211E  4842      3069          swap    D2
00002120  C2C0      3070          mulu    D0,D1
00002122  C4C0      3071          mulu    D0,D2
00002124  4842      3072          swap    D2
00002126  D282      3073          add.l   D2,D1
00002128  9283      3074          sub.l   D3,D1
0000212A  620A      3075          bhi.s   dodiv_4
0000212C  4481      3076          neg.l   D1
0000212E  B881      3077          cmp.l   D1,D4
00002130  6208      3078          bhi.s   dodiv_5
00002132  5280      3079          addq.l  #1,D0
00002134  60E4      3080          bra.s   dodiv_3
                    3081   dodiv_4:
00002136  5380      3082          subq.l  #1,D0
00002138  60E0      3083          bra.s   dodiv_3
                    3084   dodiv_5:
0000213A  4CDF 001C 3085          movem.l (A7)+,D2/D3/D4
0000213E  4E75      3086          rts
                    3087          section   const
                    3088   
                    3089   @m68kus~1_1:
00002140  0D0A 456E 3090          dc.b      13,10,69,110,116,101,114,32,73,110,116,101,103
00002144  7465 7220 
00002148  496E 7465 
0000214C  67        
0000214D  6572 3A20 3091          dc.b      101,114,58,32,0
00002151  00        
                    3092   @m68kus~1_2:
00002152  2564 00   3093          dc.b      37,100,0
                    3094   @m68kus~1_3:
00002156  596F 7520 3095          dc.b      89,111,117,32,101,110,116,101,114,101,100,32
0000215A  656E 7465 
0000215E  7265 6420 
00002162  2564 00   3096          dc.b      37,100,0
                    3097   @m68kus~1_4:
00002166  4865 6C6C 3098          dc.b      72,101,108,108,111,32,67,80,69,78,32,52,49,50
0000216A  6F20 4350 
0000216E  454E 2034 
00002172  3132      
00002174  2053 7475 3099          dc.b      32,83,116,117,100,101,110,116,0
00002178  6465 6E74 
0000217C  00        
                    3100   @m68kus~1_5:
0000217E  0D0A 4865 3101          dc.b      13,10,72,101,108,108,111,32,67,80,69,78,32,52
00002182  6C6C 6F20 
00002186  4350 454E 
0000218A  2034      
0000218C  3132 2053 3102          dc.b      49,50,32,83,116,117,100,101,110,116,13,10,89
00002190  7475 6465 
00002194  6E74 0D0A 
00002198  59        
00002199  6F75 7220 3103          dc.b      111,117,114,32,76,69,68,115,32,115,104,111,117
0000219D  4C45 4473 
000021A1  2073 686F 
000021A5  75        
000021A6  6C64 2062 3104          dc.b      108,100,32,98,101,32,70,108,97,115,104,105,110
000021AA  6520 466C 
000021AE  6173 6869 
000021B2  6E        
000021B3  6700      3105          dc.b      103,0
                    3106   @m68kus~1_6:
000021B6  0D0A 596F 3107          dc.b      13,10,89,111,117,114,32,76,67,68,32,115,104
000021BA  7572 204C 
000021BE  4344 2073 
000021C2  68        
000021C3  6F75 6C64 3108          dc.b      111,117,108,100,32,98,101,32,100,105,115,112
000021C7  2062 6520 
000021CB  6469 7370 
000021CF  6C61 7969 3109          dc.b      108,97,121,105,110,103,0
000021D3  6E67 00   
                    3110          section   data
000021D6            3111                   align
          0000 21D6 3112   DataStart       equ       *
                    3113   
                    3114   *********************************************************************************************************
                    3115   * Data Section for Initialised Data - these will be placed in rom as constants and have to be copied
                    3116   * to ram as part of the CStart routine in this file
                    3117   *********************************************************************************************************
                    3118   
                    3119   @vsscanf_bufx:
000021D6  0803 00E0 3120          dc.l      @vsscanf_buf
                    3121   @vsscanf_1:
000021DA  0A00      3122          dc.b      10,0
                    3123   __ctype:
000021DC  0040 4040 3124          dc.b      0,64,64,64,64,64,64,64,64,64,80,80,80,80,80
000021E0  4040 4040 
000021E4  4040 5050 
000021E8  5050 50   
000021EB  4040 4040 3125          dc.b      64,64,64,64,64,64,64,64,64,64,64,64,64,64,64
000021EF  4040 4040 
000021F3  4040 4040 
000021F7  4040 40   
000021FA  4040 40D0 3126          dc.b      64,64,64,208,160,160,160,160,160,160,160,160
000021FE  A0A0 A0A0 
00002202  A0A0 A0A0 
00002206  A0A0 A0A0 3127          dc.b      160,160,160,160,160,160,160,140,140,140,140
0000220A  A0A0 A08C 
0000220E  8C8C 8C   
00002211  8C8C 8C8C 3128          dc.b      140,140,140,140,140,140,160,160,160,160,160
00002215  8C8C A0A0 
00002219  A0A0 A0   
0000221C  A0A0 8A8A 3129          dc.b      160,160,138,138,138,138,138,138,130,130,130
00002220  8A8A 8A8A 
00002224  8282 82   
00002227  8282 8282 3130          dc.b      130,130,130,130,130,130,130,130,130,130,130
0000222B  8282 8282 
0000222F  8282 82   
00002232  8282 8282 3131          dc.b      130,130,130,130,130,130,160,160,160,160,160
00002236  8282 A0A0 
0000223A  A0A0 A0   
0000223D  A089 8989 3132          dc.b      160,137,137,137,137,137,137,129,129,129,129
00002241  8989 8981 
00002245  8181 81   
00002248  8181 8181 3133          dc.b      129,129,129,129,129,129,129,129,129,129,129
0000224C  8181 8181 
00002250  8181 81   
00002253  8181 8181 3134          dc.b      129,129,129,129,129,160,160,160,160,64,0,0,0
00002257  81A0 A0A0 
0000225B  A040 0000 
0000225F  00        
00002260  0000 0000 3135          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00002264  0000 0000 
00002268  0000 0000 
0000226C  0000 0000 
00002270  0000 0000 
00002274  0000      
00002276  0000 0000 3136          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0000227A  0000 0000 
0000227E  0000 0000 
00002282  0000 0000 
00002286  0000 0000 
0000228A  0000      
0000228C  0000 0000 3137          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00002290  0000 0000 
00002294  0000 0000 
00002298  0000 0000 
0000229C  0000 0000 
000022A0  0000      
000022A2  0000 0000 3138          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000022A6  0000 0000 
000022AA  0000 0000 
000022AE  0000 0000 
000022B2  0000 0000 
000022B6  0000      
000022B8  0000 0000 3139          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000022BC  0000 0000 
000022C0  0000 0000 
000022C4  0000 0000 
000022C8  0000 0000 
000022CC  0000      
000022CE  0000 0000 3140          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000022D2  0000 0000 
000022D6  0000 0000 
000022DA  0000 00   
                    3141   @itoa_1:
000022DE  2D32 3134 3142          dc.b      45,50,49,52,55,52,56,51,54,52,56,0
000022E2  3734 3833 
000022E6  3634 3800 
                    3143          section   bss
000022EA            3144                   align
          0000 22EA 3145   DataEnd         equ     *                       this label will equate to the address of the last byte of global variable in it
                    3146   
                    3147   *********************************************************************************************************
                    3148   * Section for Uninitialised Data held in ROM as constants
                    3149   *********************************************************************************************************
                    3150   
08030000            3151                   org     RamVectorTable          Ram based vector table must be stored here otherwise InstallException Handler will not work
          0000 0114 3152   DataLength      equ     DataEnd-DataStart       length of data needed to copy to Ram on bootup
                    3153   
                    3154   
08030000            3155   bss             org       bss
                    3156   
                    3157   *********************************************************************************************************
                    3158   * Build a ram based vector table for interrupts so we can install our own Exception Handlers in C code at run time
                    3159   * install the exception handler using the C function InstallExceptionHandler()
                    3160   *********************************************************************************************************
                    3161   
                    3162   
                    3163   
08030000            3164   VInitialSP       ds.l    1      dummy as we can't really install a handler for this
08030004            3165   VInitialPC       ds.l    1      dummy as we can't reallin install a handler for this
08030008            3166   VBusError        ds.l    1      storage for address of Bus Error Handler
0803000C            3167   VAddressError    ds.l    1      storage for address of Address Error Handler
08030010            3168   VIllegalInstr    ds.l    1      storage for address of Illegal Instruction handler
08030014            3169   VDividebyZero    ds.l    1      storage for address of divide by zero handler
08030018            3170   VCheck           ds.l    1      ditto
0803001C            3171   VTrapV           ds.l    1      ditto
08030020            3172   VPrivilege       ds.l    1      ditto
08030024            3173   VTrace           ds.l    1
08030028            3174   VLine1010emul    ds.l    1
0803002C            3175   VLine1111emul    ds.l    1
08030030            3176   VUnassigned1     ds.l    1
08030034            3177   VUnassigned2     ds.l    1
08030038            3178   VUnassigned3     ds.l    1
0803003C            3179   VUninit_IRQ      ds.l    1
08030040            3180   VUnassigned4     ds.l    1
08030044            3181   VUnassigned5     ds.l    1
08030048            3182   VUnassigned6     ds.l    1
0803004C            3183   VUnassigned7     ds.l    1
08030050            3184   VUnassigned8     ds.l    1
08030054            3185   VUnassigned9     ds.l    1
08030058            3186   VUnassigned10    ds.l    1
0803005C            3187   VUnassigned11    ds.l    1
08030060            3188   VSpuriousIRQ     ds.l    1
                    3189   
                    3190   * Interrupt handlers Vector 25-31
08030064            3191   VL1IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030068            3192   VL2IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0803006C            3193   VL3IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030070            3194   VL4IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030074            3195   VL5IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030078            3196   VL6IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0803007C            3197   VL7IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
                    3198   
                    3199   * Trap Handler vectors 32-47
08030080            3200   VTrap0           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030084            3201   VTrap1           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030088            3202   VTrap2           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0803008C            3203   VTrap3           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030090            3204   VTrap4           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030094            3205   VTrap5           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030098            3206   VTrap6           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0803009C            3207   VTrap7           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300A0            3208   VTrap8           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300A4            3209   VTrap9           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300A8            3210   VTrap10          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300AC            3211   VTrap11          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300B0            3212   VTrap12          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300B4            3213   VTrap13          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300B8            3214   VTrap14          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300BC            3215   VTrap15          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
                    3216   
                    3217   * the remaining exceptions are unassigned in the 68000 so no need to allocate storage for them here
                    3218   
                    3219   ***********************************************************************************************************
                    3220   * Other Variables
                    3221   ***********************************************************************************************************
                    3222   *__DebugA5       ds.l    1
                    3223   *__UserA5        ds.l    1
                    3224   
                    3225   ***********************************************************************************************************
080300C0            3226   __ungetbuf:     ds.l    1       ; ungetbuffer for stdio functions
080300C4            3227   __allocp:       ds.l    0       ; start of allocation units
080300C4            3228   __heap:         ds.l    0       ; pointers for malloc functions
                    3229   
                    3230   *__himem:       ds.l    himem            ; highest memory location + 1
                    3231   *__stklen:      ds.l    stklen           ; default stack size
                    3232   
                    3233   *********************************************************************************************************
                    3234   * Section for Heap
                    3235   *********************************************************************************************************
                    3236   
                    3237   _i:
080300C4            3238          ds.b      4
                    3239   _x:
080300C8            3240          ds.b      4
                    3241   _y:
080300CC            3242          ds.b      4
                    3243   _z:
080300D0            3244          ds.b      4
                    3245   _PortA_Count:
080300D4            3246          ds.b      4
                    3247   _Timer1Count:
080300D8            3248          ds.b      1
                    3249   _Timer2Count:
080300DA            3250          ds.b      1
                    3251   _Timer3Count:
080300DC            3252          ds.b      1
                    3253   _Timer4Count:
080300DE            3254          ds.b      1
                    3255   @vsscanf_buf:
080300E0            3256          ds.b      80
                    3257          section   heap
08030130            3258                   align
          0803 0130 3259   bssEnd          equ *                   end of storage space for unitialised variables
                    3260   *                                       we have to copy all initialised variable from rom to here at startup
          0803 0130 3261   heap   equ       *
08030130            3262                    align
          0000 0000

Assembly errors: 96
